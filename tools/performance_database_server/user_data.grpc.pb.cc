// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: user_data.proto

#include "user_data.pb.h"
#include "user_data.grpc.pb.h"

#include <grpc++/async_unary_call.h>
#include <grpc++/channel_interface.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/stream.h>
namespace grpc {
namespace testing {

static const char* UserDataTransfer_method_names[] = {
  "/grpc.testing.UserDataTransfer/RecordSingleClientData",
  "/grpc.testing.UserDataTransfer/RetrieveSingleUserData",
  "/grpc.testing.UserDataTransfer/RetrieveAllUsersData",
};

std::unique_ptr< UserDataTransfer::Stub> UserDataTransfer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel) {
  std::unique_ptr< UserDataTransfer::Stub> stub(new UserDataTransfer::Stub(channel));
  return stub;
}

UserDataTransfer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : ::grpc::InternalStub(channel), rpcmethod_RecordSingleClientData_(UserDataTransfer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(UserDataTransfer_method_names[0]))
  , rpcmethod_RetrieveSingleUserData_(UserDataTransfer_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(UserDataTransfer_method_names[1]))
  , rpcmethod_RetrieveAllUsersData_(UserDataTransfer_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(UserDataTransfer_method_names[2]))
  {}

::grpc::Status UserDataTransfer::Stub::RecordSingleClientData(::grpc::ClientContext* context, const ::grpc::testing::SingleUserRecordRequest& request, ::grpc::testing::SingleUserRecordReply* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_RecordSingleClientData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc::testing::SingleUserRecordReply>* UserDataTransfer::Stub::AsyncRecordSingleClientDataRaw(::grpc::ClientContext* context, const ::grpc::testing::SingleUserRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::grpc::testing::SingleUserRecordReply>(channel(), cq, rpcmethod_RecordSingleClientData_, context, request);
}

::grpc::Status UserDataTransfer::Stub::RetrieveSingleUserData(::grpc::ClientContext* context, const ::grpc::testing::SingleUserRetrieveRequest& request, ::grpc::testing::SingleUserRetrieveReply* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_RetrieveSingleUserData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc::testing::SingleUserRetrieveReply>* UserDataTransfer::Stub::AsyncRetrieveSingleUserDataRaw(::grpc::ClientContext* context, const ::grpc::testing::SingleUserRetrieveRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::grpc::testing::SingleUserRetrieveReply>(channel(), cq, rpcmethod_RetrieveSingleUserData_, context, request);
}

::grpc::Status UserDataTransfer::Stub::RetrieveAllUsersData(::grpc::ClientContext* context, const ::grpc::testing::AllUsersRetrieveRequest& request, ::grpc::testing::AllUsersRetrieveReply* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_RetrieveAllUsersData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc::testing::AllUsersRetrieveReply>* UserDataTransfer::Stub::AsyncRetrieveAllUsersDataRaw(::grpc::ClientContext* context, const ::grpc::testing::AllUsersRetrieveRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::grpc::testing::AllUsersRetrieveReply>(channel(), cq, rpcmethod_RetrieveAllUsersData_, context, request);
}

UserDataTransfer::AsyncService::AsyncService() : ::grpc::AsynchronousService(UserDataTransfer_method_names, 3) {}

UserDataTransfer::Service::~Service() {
  delete service_;
}

::grpc::Status UserDataTransfer::Service::RecordSingleClientData(::grpc::ServerContext* context, const ::grpc::testing::SingleUserRecordRequest* request, ::grpc::testing::SingleUserRecordReply* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void UserDataTransfer::AsyncService::RequestRecordSingleClientData(::grpc::ServerContext* context, ::grpc::testing::SingleUserRecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc::testing::SingleUserRecordReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status UserDataTransfer::Service::RetrieveSingleUserData(::grpc::ServerContext* context, const ::grpc::testing::SingleUserRetrieveRequest* request, ::grpc::testing::SingleUserRetrieveReply* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void UserDataTransfer::AsyncService::RequestRetrieveSingleUserData(::grpc::ServerContext* context, ::grpc::testing::SingleUserRetrieveRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc::testing::SingleUserRetrieveReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status UserDataTransfer::Service::RetrieveAllUsersData(::grpc::ServerContext* context, const ::grpc::testing::AllUsersRetrieveRequest* request, ::grpc::testing::AllUsersRetrieveReply* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void UserDataTransfer::AsyncService::RequestRetrieveAllUsersData(::grpc::ServerContext* context, ::grpc::testing::AllUsersRetrieveRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc::testing::AllUsersRetrieveReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* UserDataTransfer::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      UserDataTransfer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< UserDataTransfer::Service, ::grpc::testing::SingleUserRecordRequest, ::grpc::testing::SingleUserRecordReply>(
          std::mem_fn(&UserDataTransfer::Service::RecordSingleClientData), this),
      new ::grpc::testing::SingleUserRecordRequest, new ::grpc::testing::SingleUserRecordReply));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      UserDataTransfer_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< UserDataTransfer::Service, ::grpc::testing::SingleUserRetrieveRequest, ::grpc::testing::SingleUserRetrieveReply>(
          std::mem_fn(&UserDataTransfer::Service::RetrieveSingleUserData), this),
      new ::grpc::testing::SingleUserRetrieveRequest, new ::grpc::testing::SingleUserRetrieveReply));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      UserDataTransfer_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< UserDataTransfer::Service, ::grpc::testing::AllUsersRetrieveRequest, ::grpc::testing::AllUsersRetrieveReply>(
          std::mem_fn(&UserDataTransfer::Service::RetrieveAllUsersData), this),
      new ::grpc::testing::AllUsersRetrieveRequest, new ::grpc::testing::AllUsersRetrieveReply));
  return service_;
}


}  // namespace grpc
}  // namespace testing

