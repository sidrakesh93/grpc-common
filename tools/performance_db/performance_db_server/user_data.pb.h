// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_data.proto

#ifndef PROTOBUF_user_5fdata_2eproto__INCLUDED
#define PROTOBUF_user_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "qpstest.pb.h"
// @@protoc_insertion_point(includes)

namespace grpc {
namespace testing {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_user_5fdata_2eproto();
void protobuf_AssignDesc_user_5fdata_2eproto();
void protobuf_ShutdownFile_user_5fdata_2eproto();

class Metrics;
class DataDetails;
class UserDetails;
class SingleUserDetails;
class SingleUserRecordRequest;
class SingleUserRecordReply;
class SingleUserRetrieveRequest;
class SingleUserRetrieveReply;
class AllUsersRetrieveReply;
class AllUsersRetrieveRequest;

// ===================================================================

class Metrics : public ::google::protobuf::Message {
 public:
  Metrics();
  virtual ~Metrics();

  Metrics(const Metrics& from);

  inline Metrics& operator=(const Metrics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metrics& default_instance();

  void Swap(Metrics* other);

  // implements Message ----------------------------------------------

  inline Metrics* New() const { return New(NULL); }

  Metrics* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metrics& from);
  void MergeFrom(const Metrics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Metrics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double qps = 1;
  bool has_qps() const;
  void clear_qps();
  static const int kQpsFieldNumber = 1;
  double qps() const;
  void set_qps(double value);

  // optional double qps_per_core = 2;
  bool has_qps_per_core() const;
  void clear_qps_per_core();
  static const int kQpsPerCoreFieldNumber = 2;
  double qps_per_core() const;
  void set_qps_per_core(double value);

  // optional double perc_lat_50 = 3;
  bool has_perc_lat_50() const;
  void clear_perc_lat_50();
  static const int kPercLat50FieldNumber = 3;
  double perc_lat_50() const;
  void set_perc_lat_50(double value);

  // optional double perc_lat_90 = 4;
  bool has_perc_lat_90() const;
  void clear_perc_lat_90();
  static const int kPercLat90FieldNumber = 4;
  double perc_lat_90() const;
  void set_perc_lat_90(double value);

  // optional double perc_lat_95 = 5;
  bool has_perc_lat_95() const;
  void clear_perc_lat_95();
  static const int kPercLat95FieldNumber = 5;
  double perc_lat_95() const;
  void set_perc_lat_95(double value);

  // optional double perc_lat_99 = 6;
  bool has_perc_lat_99() const;
  void clear_perc_lat_99();
  static const int kPercLat99FieldNumber = 6;
  double perc_lat_99() const;
  void set_perc_lat_99(double value);

  // optional double perc_lat_99_point_9 = 7;
  bool has_perc_lat_99_point_9() const;
  void clear_perc_lat_99_point_9();
  static const int kPercLat99Point9FieldNumber = 7;
  double perc_lat_99_point_9() const;
  void set_perc_lat_99_point_9(double value);

  // optional double server_system_time = 8;
  bool has_server_system_time() const;
  void clear_server_system_time();
  static const int kServerSystemTimeFieldNumber = 8;
  double server_system_time() const;
  void set_server_system_time(double value);

  // optional double server_user_time = 9;
  bool has_server_user_time() const;
  void clear_server_user_time();
  static const int kServerUserTimeFieldNumber = 9;
  double server_user_time() const;
  void set_server_user_time(double value);

  // optional double client_system_time = 10;
  bool has_client_system_time() const;
  void clear_client_system_time();
  static const int kClientSystemTimeFieldNumber = 10;
  double client_system_time() const;
  void set_client_system_time(double value);

  // optional double client_user_time = 11;
  bool has_client_user_time() const;
  void clear_client_user_time();
  static const int kClientUserTimeFieldNumber = 11;
  double client_user_time() const;
  void set_client_user_time(double value);

  // @@protoc_insertion_point(class_scope:grpc.testing.Metrics)
 private:
  inline void set_has_qps();
  inline void clear_has_qps();
  inline void set_has_qps_per_core();
  inline void clear_has_qps_per_core();
  inline void set_has_perc_lat_50();
  inline void clear_has_perc_lat_50();
  inline void set_has_perc_lat_90();
  inline void clear_has_perc_lat_90();
  inline void set_has_perc_lat_95();
  inline void clear_has_perc_lat_95();
  inline void set_has_perc_lat_99();
  inline void clear_has_perc_lat_99();
  inline void set_has_perc_lat_99_point_9();
  inline void clear_has_perc_lat_99_point_9();
  inline void set_has_server_system_time();
  inline void clear_has_server_system_time();
  inline void set_has_server_user_time();
  inline void clear_has_server_user_time();
  inline void set_has_client_system_time();
  inline void clear_has_client_system_time();
  inline void set_has_client_user_time();
  inline void clear_has_client_user_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double qps_;
  double qps_per_core_;
  double perc_lat_50_;
  double perc_lat_90_;
  double perc_lat_95_;
  double perc_lat_99_;
  double perc_lat_99_point_9_;
  double server_system_time_;
  double server_user_time_;
  double client_system_time_;
  double client_user_time_;
  friend void  protobuf_AddDesc_user_5fdata_2eproto();
  friend void protobuf_AssignDesc_user_5fdata_2eproto();
  friend void protobuf_ShutdownFile_user_5fdata_2eproto();

  void InitAsDefaultInstance();
  static Metrics* default_instance_;
};
// -------------------------------------------------------------------

class DataDetails : public ::google::protobuf::Message {
 public:
  DataDetails();
  virtual ~DataDetails();

  DataDetails(const DataDetails& from);

  inline DataDetails& operator=(const DataDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataDetails& default_instance();

  void Swap(DataDetails* other);

  // implements Message ----------------------------------------------

  inline DataDetails* New() const { return New(NULL); }

  DataDetails* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataDetails& from);
  void MergeFrom(const DataDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // optional string test_name = 2;
  bool has_test_name() const;
  void clear_test_name();
  static const int kTestNameFieldNumber = 2;
  const ::std::string& test_name() const;
  void set_test_name(const ::std::string& value);
  void set_test_name(const char* value);
  void set_test_name(const char* value, size_t size);
  ::std::string* mutable_test_name();
  ::std::string* release_test_name();
  void set_allocated_test_name(::std::string* test_name);

  // optional string sys_info = 3;
  bool has_sys_info() const;
  void clear_sys_info();
  static const int kSysInfoFieldNumber = 3;
  const ::std::string& sys_info() const;
  void set_sys_info(const ::std::string& value);
  void set_sys_info(const char* value);
  void set_sys_info(const char* value, size_t size);
  ::std::string* mutable_sys_info();
  ::std::string* release_sys_info();
  void set_allocated_sys_info(::std::string* sys_info);

  // optional .grpc.testing.Metrics metrics = 4;
  bool has_metrics() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 4;
  const ::grpc::testing::Metrics& metrics() const;
  ::grpc::testing::Metrics* mutable_metrics();
  ::grpc::testing::Metrics* release_metrics();
  void set_allocated_metrics(::grpc::testing::Metrics* metrics);

  // optional .grpc.testing.ClientConfig client_config = 5;
  bool has_client_config() const;
  void clear_client_config();
  static const int kClientConfigFieldNumber = 5;
  const ::grpc::testing::ClientConfig& client_config() const;
  ::grpc::testing::ClientConfig* mutable_client_config();
  ::grpc::testing::ClientConfig* release_client_config();
  void set_allocated_client_config(::grpc::testing::ClientConfig* client_config);

  // optional .grpc.testing.ServerConfig server_config = 6;
  bool has_server_config() const;
  void clear_server_config();
  static const int kServerConfigFieldNumber = 6;
  const ::grpc::testing::ServerConfig& server_config() const;
  ::grpc::testing::ServerConfig* mutable_server_config();
  ::grpc::testing::ServerConfig* release_server_config();
  void set_allocated_server_config(::grpc::testing::ServerConfig* server_config);

  // @@protoc_insertion_point(class_scope:grpc.testing.DataDetails)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_test_name();
  inline void clear_has_test_name();
  inline void set_has_sys_info();
  inline void clear_has_sys_info();
  inline void set_has_metrics();
  inline void clear_has_metrics();
  inline void set_has_client_config();
  inline void clear_has_client_config();
  inline void set_has_server_config();
  inline void clear_has_server_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::internal::ArenaStringPtr test_name_;
  ::google::protobuf::internal::ArenaStringPtr sys_info_;
  ::grpc::testing::Metrics* metrics_;
  ::grpc::testing::ClientConfig* client_config_;
  ::grpc::testing::ServerConfig* server_config_;
  friend void  protobuf_AddDesc_user_5fdata_2eproto();
  friend void protobuf_AssignDesc_user_5fdata_2eproto();
  friend void protobuf_ShutdownFile_user_5fdata_2eproto();

  void InitAsDefaultInstance();
  static DataDetails* default_instance_;
};
// -------------------------------------------------------------------

class UserDetails : public ::google::protobuf::Message {
 public:
  UserDetails();
  virtual ~UserDetails();

  UserDetails(const UserDetails& from);

  inline UserDetails& operator=(const UserDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDetails& default_instance();

  void Swap(UserDetails* other);

  // implements Message ----------------------------------------------

  inline UserDetails* New() const { return New(NULL); }

  UserDetails* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserDetails& from);
  void MergeFrom(const UserDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string email = 2;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 2;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional bool verified_email = 3;
  bool has_verified_email() const;
  void clear_verified_email();
  static const int kVerifiedEmailFieldNumber = 3;
  bool verified_email() const;
  void set_verified_email(bool value);

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string given_name = 5;
  bool has_given_name() const;
  void clear_given_name();
  static const int kGivenNameFieldNumber = 5;
  const ::std::string& given_name() const;
  void set_given_name(const ::std::string& value);
  void set_given_name(const char* value);
  void set_given_name(const char* value, size_t size);
  ::std::string* mutable_given_name();
  ::std::string* release_given_name();
  void set_allocated_given_name(::std::string* given_name);

  // optional string family_name = 6;
  bool has_family_name() const;
  void clear_family_name();
  static const int kFamilyNameFieldNumber = 6;
  const ::std::string& family_name() const;
  void set_family_name(const ::std::string& value);
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  ::std::string* mutable_family_name();
  ::std::string* release_family_name();
  void set_allocated_family_name(::std::string* family_name);

  // optional string link = 7;
  bool has_link() const;
  void clear_link();
  static const int kLinkFieldNumber = 7;
  const ::std::string& link() const;
  void set_link(const ::std::string& value);
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  ::std::string* mutable_link();
  ::std::string* release_link();
  void set_allocated_link(::std::string* link);

  // optional string picture = 8;
  bool has_picture() const;
  void clear_picture();
  static const int kPictureFieldNumber = 8;
  const ::std::string& picture() const;
  void set_picture(const ::std::string& value);
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  ::std::string* mutable_picture();
  ::std::string* release_picture();
  void set_allocated_picture(::std::string* picture);

  // optional string gender = 9;
  bool has_gender() const;
  void clear_gender();
  static const int kGenderFieldNumber = 9;
  const ::std::string& gender() const;
  void set_gender(const ::std::string& value);
  void set_gender(const char* value);
  void set_gender(const char* value, size_t size);
  ::std::string* mutable_gender();
  ::std::string* release_gender();
  void set_allocated_gender(::std::string* gender);

  // optional string locale = 10;
  bool has_locale() const;
  void clear_locale();
  static const int kLocaleFieldNumber = 10;
  const ::std::string& locale() const;
  void set_locale(const ::std::string& value);
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  ::std::string* mutable_locale();
  ::std::string* release_locale();
  void set_allocated_locale(::std::string* locale);

  // optional string hd = 11;
  bool has_hd() const;
  void clear_hd();
  static const int kHdFieldNumber = 11;
  const ::std::string& hd() const;
  void set_hd(const ::std::string& value);
  void set_hd(const char* value);
  void set_hd(const char* value, size_t size);
  ::std::string* mutable_hd();
  ::std::string* release_hd();
  void set_allocated_hd(::std::string* hd);

  // @@protoc_insertion_point(class_scope:grpc.testing.UserDetails)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_verified_email();
  inline void clear_has_verified_email();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_given_name();
  inline void clear_has_given_name();
  inline void set_has_family_name();
  inline void clear_has_family_name();
  inline void set_has_link();
  inline void clear_has_link();
  inline void set_has_picture();
  inline void clear_has_picture();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_locale();
  inline void clear_has_locale();
  inline void set_has_hd();
  inline void clear_has_hd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr given_name_;
  ::google::protobuf::internal::ArenaStringPtr family_name_;
  ::google::protobuf::internal::ArenaStringPtr link_;
  ::google::protobuf::internal::ArenaStringPtr picture_;
  ::google::protobuf::internal::ArenaStringPtr gender_;
  ::google::protobuf::internal::ArenaStringPtr locale_;
  ::google::protobuf::internal::ArenaStringPtr hd_;
  bool verified_email_;
  friend void  protobuf_AddDesc_user_5fdata_2eproto();
  friend void protobuf_AssignDesc_user_5fdata_2eproto();
  friend void protobuf_ShutdownFile_user_5fdata_2eproto();

  void InitAsDefaultInstance();
  static UserDetails* default_instance_;
};
// -------------------------------------------------------------------

class SingleUserDetails : public ::google::protobuf::Message {
 public:
  SingleUserDetails();
  virtual ~SingleUserDetails();

  SingleUserDetails(const SingleUserDetails& from);

  inline SingleUserDetails& operator=(const SingleUserDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleUserDetails& default_instance();

  void Swap(SingleUserDetails* other);

  // implements Message ----------------------------------------------

  inline SingleUserDetails* New() const { return New(NULL); }

  SingleUserDetails* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleUserDetails& from);
  void MergeFrom(const SingleUserDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SingleUserDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grpc.testing.DataDetails data_details = 1;
  int data_details_size() const;
  void clear_data_details();
  static const int kDataDetailsFieldNumber = 1;
  const ::grpc::testing::DataDetails& data_details(int index) const;
  ::grpc::testing::DataDetails* mutable_data_details(int index);
  ::grpc::testing::DataDetails* add_data_details();
  const ::google::protobuf::RepeatedPtrField< ::grpc::testing::DataDetails >&
      data_details() const;
  ::google::protobuf::RepeatedPtrField< ::grpc::testing::DataDetails >*
      mutable_data_details();

  // optional .grpc.testing.UserDetails user_details = 2;
  bool has_user_details() const;
  void clear_user_details();
  static const int kUserDetailsFieldNumber = 2;
  const ::grpc::testing::UserDetails& user_details() const;
  ::grpc::testing::UserDetails* mutable_user_details();
  ::grpc::testing::UserDetails* release_user_details();
  void set_allocated_user_details(::grpc::testing::UserDetails* user_details);

  // @@protoc_insertion_point(class_scope:grpc.testing.SingleUserDetails)
 private:
  inline void set_has_user_details();
  inline void clear_has_user_details();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::grpc::testing::DataDetails > data_details_;
  ::grpc::testing::UserDetails* user_details_;
  friend void  protobuf_AddDesc_user_5fdata_2eproto();
  friend void protobuf_AssignDesc_user_5fdata_2eproto();
  friend void protobuf_ShutdownFile_user_5fdata_2eproto();

  void InitAsDefaultInstance();
  static SingleUserDetails* default_instance_;
};
// -------------------------------------------------------------------

class SingleUserRecordRequest : public ::google::protobuf::Message {
 public:
  SingleUserRecordRequest();
  virtual ~SingleUserRecordRequest();

  SingleUserRecordRequest(const SingleUserRecordRequest& from);

  inline SingleUserRecordRequest& operator=(const SingleUserRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleUserRecordRequest& default_instance();

  void Swap(SingleUserRecordRequest* other);

  // implements Message ----------------------------------------------

  inline SingleUserRecordRequest* New() const { return New(NULL); }

  SingleUserRecordRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleUserRecordRequest& from);
  void MergeFrom(const SingleUserRecordRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SingleUserRecordRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string access_token = 1;
  bool has_access_token() const;
  void clear_access_token();
  static const int kAccessTokenFieldNumber = 1;
  const ::std::string& access_token() const;
  void set_access_token(const ::std::string& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  ::std::string* mutable_access_token();
  ::std::string* release_access_token();
  void set_allocated_access_token(::std::string* access_token);

  // optional string test_name = 2;
  bool has_test_name() const;
  void clear_test_name();
  static const int kTestNameFieldNumber = 2;
  const ::std::string& test_name() const;
  void set_test_name(const ::std::string& value);
  void set_test_name(const char* value);
  void set_test_name(const char* value, size_t size);
  ::std::string* mutable_test_name();
  ::std::string* release_test_name();
  void set_allocated_test_name(::std::string* test_name);

  // optional string sys_info = 3;
  bool has_sys_info() const;
  void clear_sys_info();
  static const int kSysInfoFieldNumber = 3;
  const ::std::string& sys_info() const;
  void set_sys_info(const ::std::string& value);
  void set_sys_info(const char* value);
  void set_sys_info(const char* value, size_t size);
  ::std::string* mutable_sys_info();
  ::std::string* release_sys_info();
  void set_allocated_sys_info(::std::string* sys_info);

  // optional .grpc.testing.Metrics metrics = 4;
  bool has_metrics() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 4;
  const ::grpc::testing::Metrics& metrics() const;
  ::grpc::testing::Metrics* mutable_metrics();
  ::grpc::testing::Metrics* release_metrics();
  void set_allocated_metrics(::grpc::testing::Metrics* metrics);

  // optional .grpc.testing.ClientConfig client_config = 5;
  bool has_client_config() const;
  void clear_client_config();
  static const int kClientConfigFieldNumber = 5;
  const ::grpc::testing::ClientConfig& client_config() const;
  ::grpc::testing::ClientConfig* mutable_client_config();
  ::grpc::testing::ClientConfig* release_client_config();
  void set_allocated_client_config(::grpc::testing::ClientConfig* client_config);

  // optional .grpc.testing.ServerConfig server_config = 6;
  bool has_server_config() const;
  void clear_server_config();
  static const int kServerConfigFieldNumber = 6;
  const ::grpc::testing::ServerConfig& server_config() const;
  ::grpc::testing::ServerConfig* mutable_server_config();
  ::grpc::testing::ServerConfig* release_server_config();
  void set_allocated_server_config(::grpc::testing::ServerConfig* server_config);

  // @@protoc_insertion_point(class_scope:grpc.testing.SingleUserRecordRequest)
 private:
  inline void set_has_access_token();
  inline void clear_has_access_token();
  inline void set_has_test_name();
  inline void clear_has_test_name();
  inline void set_has_sys_info();
  inline void clear_has_sys_info();
  inline void set_has_metrics();
  inline void clear_has_metrics();
  inline void set_has_client_config();
  inline void clear_has_client_config();
  inline void set_has_server_config();
  inline void clear_has_server_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr access_token_;
  ::google::protobuf::internal::ArenaStringPtr test_name_;
  ::google::protobuf::internal::ArenaStringPtr sys_info_;
  ::grpc::testing::Metrics* metrics_;
  ::grpc::testing::ClientConfig* client_config_;
  ::grpc::testing::ServerConfig* server_config_;
  friend void  protobuf_AddDesc_user_5fdata_2eproto();
  friend void protobuf_AssignDesc_user_5fdata_2eproto();
  friend void protobuf_ShutdownFile_user_5fdata_2eproto();

  void InitAsDefaultInstance();
  static SingleUserRecordRequest* default_instance_;
};
// -------------------------------------------------------------------

class SingleUserRecordReply : public ::google::protobuf::Message {
 public:
  SingleUserRecordReply();
  virtual ~SingleUserRecordReply();

  SingleUserRecordReply(const SingleUserRecordReply& from);

  inline SingleUserRecordReply& operator=(const SingleUserRecordReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleUserRecordReply& default_instance();

  void Swap(SingleUserRecordReply* other);

  // implements Message ----------------------------------------------

  inline SingleUserRecordReply* New() const { return New(NULL); }

  SingleUserRecordReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleUserRecordReply& from);
  void MergeFrom(const SingleUserRecordReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SingleUserRecordReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grpc.testing.SingleUserRecordReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_user_5fdata_2eproto();
  friend void protobuf_AssignDesc_user_5fdata_2eproto();
  friend void protobuf_ShutdownFile_user_5fdata_2eproto();

  void InitAsDefaultInstance();
  static SingleUserRecordReply* default_instance_;
};
// -------------------------------------------------------------------

class SingleUserRetrieveRequest : public ::google::protobuf::Message {
 public:
  SingleUserRetrieveRequest();
  virtual ~SingleUserRetrieveRequest();

  SingleUserRetrieveRequest(const SingleUserRetrieveRequest& from);

  inline SingleUserRetrieveRequest& operator=(const SingleUserRetrieveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleUserRetrieveRequest& default_instance();

  void Swap(SingleUserRetrieveRequest* other);

  // implements Message ----------------------------------------------

  inline SingleUserRetrieveRequest* New() const { return New(NULL); }

  SingleUserRetrieveRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleUserRetrieveRequest& from);
  void MergeFrom(const SingleUserRetrieveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SingleUserRetrieveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:grpc.testing.SingleUserRetrieveRequest)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  friend void  protobuf_AddDesc_user_5fdata_2eproto();
  friend void protobuf_AssignDesc_user_5fdata_2eproto();
  friend void protobuf_ShutdownFile_user_5fdata_2eproto();

  void InitAsDefaultInstance();
  static SingleUserRetrieveRequest* default_instance_;
};
// -------------------------------------------------------------------

class SingleUserRetrieveReply : public ::google::protobuf::Message {
 public:
  SingleUserRetrieveReply();
  virtual ~SingleUserRetrieveReply();

  SingleUserRetrieveReply(const SingleUserRetrieveReply& from);

  inline SingleUserRetrieveReply& operator=(const SingleUserRetrieveReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleUserRetrieveReply& default_instance();

  void Swap(SingleUserRetrieveReply* other);

  // implements Message ----------------------------------------------

  inline SingleUserRetrieveReply* New() const { return New(NULL); }

  SingleUserRetrieveReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleUserRetrieveReply& from);
  void MergeFrom(const SingleUserRetrieveReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SingleUserRetrieveReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .grpc.testing.SingleUserDetails details = 1;
  bool has_details() const;
  void clear_details();
  static const int kDetailsFieldNumber = 1;
  const ::grpc::testing::SingleUserDetails& details() const;
  ::grpc::testing::SingleUserDetails* mutable_details();
  ::grpc::testing::SingleUserDetails* release_details();
  void set_allocated_details(::grpc::testing::SingleUserDetails* details);

  // @@protoc_insertion_point(class_scope:grpc.testing.SingleUserRetrieveReply)
 private:
  inline void set_has_details();
  inline void clear_has_details();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::grpc::testing::SingleUserDetails* details_;
  friend void  protobuf_AddDesc_user_5fdata_2eproto();
  friend void protobuf_AssignDesc_user_5fdata_2eproto();
  friend void protobuf_ShutdownFile_user_5fdata_2eproto();

  void InitAsDefaultInstance();
  static SingleUserRetrieveReply* default_instance_;
};
// -------------------------------------------------------------------

class AllUsersRetrieveReply : public ::google::protobuf::Message {
 public:
  AllUsersRetrieveReply();
  virtual ~AllUsersRetrieveReply();

  AllUsersRetrieveReply(const AllUsersRetrieveReply& from);

  inline AllUsersRetrieveReply& operator=(const AllUsersRetrieveReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllUsersRetrieveReply& default_instance();

  void Swap(AllUsersRetrieveReply* other);

  // implements Message ----------------------------------------------

  inline AllUsersRetrieveReply* New() const { return New(NULL); }

  AllUsersRetrieveReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllUsersRetrieveReply& from);
  void MergeFrom(const AllUsersRetrieveReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllUsersRetrieveReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grpc.testing.SingleUserDetails user_data = 1;
  int user_data_size() const;
  void clear_user_data();
  static const int kUserDataFieldNumber = 1;
  const ::grpc::testing::SingleUserDetails& user_data(int index) const;
  ::grpc::testing::SingleUserDetails* mutable_user_data(int index);
  ::grpc::testing::SingleUserDetails* add_user_data();
  const ::google::protobuf::RepeatedPtrField< ::grpc::testing::SingleUserDetails >&
      user_data() const;
  ::google::protobuf::RepeatedPtrField< ::grpc::testing::SingleUserDetails >*
      mutable_user_data();

  // @@protoc_insertion_point(class_scope:grpc.testing.AllUsersRetrieveReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::grpc::testing::SingleUserDetails > user_data_;
  friend void  protobuf_AddDesc_user_5fdata_2eproto();
  friend void protobuf_AssignDesc_user_5fdata_2eproto();
  friend void protobuf_ShutdownFile_user_5fdata_2eproto();

  void InitAsDefaultInstance();
  static AllUsersRetrieveReply* default_instance_;
};
// -------------------------------------------------------------------

class AllUsersRetrieveRequest : public ::google::protobuf::Message {
 public:
  AllUsersRetrieveRequest();
  virtual ~AllUsersRetrieveRequest();

  AllUsersRetrieveRequest(const AllUsersRetrieveRequest& from);

  inline AllUsersRetrieveRequest& operator=(const AllUsersRetrieveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllUsersRetrieveRequest& default_instance();

  void Swap(AllUsersRetrieveRequest* other);

  // implements Message ----------------------------------------------

  inline AllUsersRetrieveRequest* New() const { return New(NULL); }

  AllUsersRetrieveRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllUsersRetrieveRequest& from);
  void MergeFrom(const AllUsersRetrieveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllUsersRetrieveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grpc.testing.AllUsersRetrieveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_user_5fdata_2eproto();
  friend void protobuf_AssignDesc_user_5fdata_2eproto();
  friend void protobuf_ShutdownFile_user_5fdata_2eproto();

  void InitAsDefaultInstance();
  static AllUsersRetrieveRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Metrics

// optional double qps = 1;
inline bool Metrics::has_qps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metrics::set_has_qps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metrics::clear_has_qps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metrics::clear_qps() {
  qps_ = 0;
  clear_has_qps();
}
inline double Metrics::qps() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.qps)
  return qps_;
}
inline void Metrics::set_qps(double value) {
  set_has_qps();
  qps_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.qps)
}

// optional double qps_per_core = 2;
inline bool Metrics::has_qps_per_core() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Metrics::set_has_qps_per_core() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Metrics::clear_has_qps_per_core() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Metrics::clear_qps_per_core() {
  qps_per_core_ = 0;
  clear_has_qps_per_core();
}
inline double Metrics::qps_per_core() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.qps_per_core)
  return qps_per_core_;
}
inline void Metrics::set_qps_per_core(double value) {
  set_has_qps_per_core();
  qps_per_core_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.qps_per_core)
}

// optional double perc_lat_50 = 3;
inline bool Metrics::has_perc_lat_50() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Metrics::set_has_perc_lat_50() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Metrics::clear_has_perc_lat_50() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Metrics::clear_perc_lat_50() {
  perc_lat_50_ = 0;
  clear_has_perc_lat_50();
}
inline double Metrics::perc_lat_50() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.perc_lat_50)
  return perc_lat_50_;
}
inline void Metrics::set_perc_lat_50(double value) {
  set_has_perc_lat_50();
  perc_lat_50_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.perc_lat_50)
}

// optional double perc_lat_90 = 4;
inline bool Metrics::has_perc_lat_90() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Metrics::set_has_perc_lat_90() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Metrics::clear_has_perc_lat_90() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Metrics::clear_perc_lat_90() {
  perc_lat_90_ = 0;
  clear_has_perc_lat_90();
}
inline double Metrics::perc_lat_90() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.perc_lat_90)
  return perc_lat_90_;
}
inline void Metrics::set_perc_lat_90(double value) {
  set_has_perc_lat_90();
  perc_lat_90_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.perc_lat_90)
}

// optional double perc_lat_95 = 5;
inline bool Metrics::has_perc_lat_95() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Metrics::set_has_perc_lat_95() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Metrics::clear_has_perc_lat_95() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Metrics::clear_perc_lat_95() {
  perc_lat_95_ = 0;
  clear_has_perc_lat_95();
}
inline double Metrics::perc_lat_95() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.perc_lat_95)
  return perc_lat_95_;
}
inline void Metrics::set_perc_lat_95(double value) {
  set_has_perc_lat_95();
  perc_lat_95_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.perc_lat_95)
}

// optional double perc_lat_99 = 6;
inline bool Metrics::has_perc_lat_99() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Metrics::set_has_perc_lat_99() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Metrics::clear_has_perc_lat_99() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Metrics::clear_perc_lat_99() {
  perc_lat_99_ = 0;
  clear_has_perc_lat_99();
}
inline double Metrics::perc_lat_99() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.perc_lat_99)
  return perc_lat_99_;
}
inline void Metrics::set_perc_lat_99(double value) {
  set_has_perc_lat_99();
  perc_lat_99_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.perc_lat_99)
}

// optional double perc_lat_99_point_9 = 7;
inline bool Metrics::has_perc_lat_99_point_9() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Metrics::set_has_perc_lat_99_point_9() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Metrics::clear_has_perc_lat_99_point_9() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Metrics::clear_perc_lat_99_point_9() {
  perc_lat_99_point_9_ = 0;
  clear_has_perc_lat_99_point_9();
}
inline double Metrics::perc_lat_99_point_9() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.perc_lat_99_point_9)
  return perc_lat_99_point_9_;
}
inline void Metrics::set_perc_lat_99_point_9(double value) {
  set_has_perc_lat_99_point_9();
  perc_lat_99_point_9_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.perc_lat_99_point_9)
}

// optional double server_system_time = 8;
inline bool Metrics::has_server_system_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Metrics::set_has_server_system_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Metrics::clear_has_server_system_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Metrics::clear_server_system_time() {
  server_system_time_ = 0;
  clear_has_server_system_time();
}
inline double Metrics::server_system_time() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.server_system_time)
  return server_system_time_;
}
inline void Metrics::set_server_system_time(double value) {
  set_has_server_system_time();
  server_system_time_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.server_system_time)
}

// optional double server_user_time = 9;
inline bool Metrics::has_server_user_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Metrics::set_has_server_user_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Metrics::clear_has_server_user_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Metrics::clear_server_user_time() {
  server_user_time_ = 0;
  clear_has_server_user_time();
}
inline double Metrics::server_user_time() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.server_user_time)
  return server_user_time_;
}
inline void Metrics::set_server_user_time(double value) {
  set_has_server_user_time();
  server_user_time_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.server_user_time)
}

// optional double client_system_time = 10;
inline bool Metrics::has_client_system_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Metrics::set_has_client_system_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Metrics::clear_has_client_system_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Metrics::clear_client_system_time() {
  client_system_time_ = 0;
  clear_has_client_system_time();
}
inline double Metrics::client_system_time() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.client_system_time)
  return client_system_time_;
}
inline void Metrics::set_client_system_time(double value) {
  set_has_client_system_time();
  client_system_time_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.client_system_time)
}

// optional double client_user_time = 11;
inline bool Metrics::has_client_user_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Metrics::set_has_client_user_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Metrics::clear_has_client_user_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Metrics::clear_client_user_time() {
  client_user_time_ = 0;
  clear_has_client_user_time();
}
inline double Metrics::client_user_time() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.client_user_time)
  return client_user_time_;
}
inline void Metrics::set_client_user_time(double value) {
  set_has_client_user_time();
  client_user_time_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.client_user_time)
}

// -------------------------------------------------------------------

// DataDetails

// optional string timestamp = 1;
inline bool DataDetails::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataDetails::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataDetails::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataDetails::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
inline const ::std::string& DataDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:grpc.testing.DataDetails.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataDetails::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.DataDetails.timestamp)
}
inline void DataDetails::set_timestamp(const char* value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.DataDetails.timestamp)
}
inline void DataDetails::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.DataDetails.timestamp)
}
inline ::std::string* DataDetails::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:grpc.testing.DataDetails.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataDetails::release_timestamp() {
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataDetails::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.DataDetails.timestamp)
}

// optional string test_name = 2;
inline bool DataDetails::has_test_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataDetails::set_has_test_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataDetails::clear_has_test_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataDetails::clear_test_name() {
  test_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_test_name();
}
inline const ::std::string& DataDetails::test_name() const {
  // @@protoc_insertion_point(field_get:grpc.testing.DataDetails.test_name)
  return test_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataDetails::set_test_name(const ::std::string& value) {
  set_has_test_name();
  test_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.DataDetails.test_name)
}
inline void DataDetails::set_test_name(const char* value) {
  set_has_test_name();
  test_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.DataDetails.test_name)
}
inline void DataDetails::set_test_name(const char* value, size_t size) {
  set_has_test_name();
  test_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.DataDetails.test_name)
}
inline ::std::string* DataDetails::mutable_test_name() {
  set_has_test_name();
  // @@protoc_insertion_point(field_mutable:grpc.testing.DataDetails.test_name)
  return test_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataDetails::release_test_name() {
  clear_has_test_name();
  return test_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataDetails::set_allocated_test_name(::std::string* test_name) {
  if (test_name != NULL) {
    set_has_test_name();
  } else {
    clear_has_test_name();
  }
  test_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_name);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.DataDetails.test_name)
}

// optional string sys_info = 3;
inline bool DataDetails::has_sys_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataDetails::set_has_sys_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataDetails::clear_has_sys_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataDetails::clear_sys_info() {
  sys_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sys_info();
}
inline const ::std::string& DataDetails::sys_info() const {
  // @@protoc_insertion_point(field_get:grpc.testing.DataDetails.sys_info)
  return sys_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataDetails::set_sys_info(const ::std::string& value) {
  set_has_sys_info();
  sys_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.DataDetails.sys_info)
}
inline void DataDetails::set_sys_info(const char* value) {
  set_has_sys_info();
  sys_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.DataDetails.sys_info)
}
inline void DataDetails::set_sys_info(const char* value, size_t size) {
  set_has_sys_info();
  sys_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.DataDetails.sys_info)
}
inline ::std::string* DataDetails::mutable_sys_info() {
  set_has_sys_info();
  // @@protoc_insertion_point(field_mutable:grpc.testing.DataDetails.sys_info)
  return sys_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataDetails::release_sys_info() {
  clear_has_sys_info();
  return sys_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataDetails::set_allocated_sys_info(::std::string* sys_info) {
  if (sys_info != NULL) {
    set_has_sys_info();
  } else {
    clear_has_sys_info();
  }
  sys_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sys_info);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.DataDetails.sys_info)
}

// optional .grpc.testing.Metrics metrics = 4;
inline bool DataDetails::has_metrics() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataDetails::set_has_metrics() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataDetails::clear_has_metrics() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataDetails::clear_metrics() {
  if (metrics_ != NULL) metrics_->::grpc::testing::Metrics::Clear();
  clear_has_metrics();
}
inline const ::grpc::testing::Metrics& DataDetails::metrics() const {
  // @@protoc_insertion_point(field_get:grpc.testing.DataDetails.metrics)
  return metrics_ != NULL ? *metrics_ : *default_instance_->metrics_;
}
inline ::grpc::testing::Metrics* DataDetails::mutable_metrics() {
  set_has_metrics();
  if (metrics_ == NULL) {
    metrics_ = new ::grpc::testing::Metrics;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.DataDetails.metrics)
  return metrics_;
}
inline ::grpc::testing::Metrics* DataDetails::release_metrics() {
  clear_has_metrics();
  ::grpc::testing::Metrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
inline void DataDetails::set_allocated_metrics(::grpc::testing::Metrics* metrics) {
  delete metrics_;
  metrics_ = metrics;
  if (metrics) {
    set_has_metrics();
  } else {
    clear_has_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.DataDetails.metrics)
}

// optional .grpc.testing.ClientConfig client_config = 5;
inline bool DataDetails::has_client_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataDetails::set_has_client_config() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataDetails::clear_has_client_config() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataDetails::clear_client_config() {
  if (client_config_ != NULL) client_config_->::grpc::testing::ClientConfig::Clear();
  clear_has_client_config();
}
inline const ::grpc::testing::ClientConfig& DataDetails::client_config() const {
  // @@protoc_insertion_point(field_get:grpc.testing.DataDetails.client_config)
  return client_config_ != NULL ? *client_config_ : *default_instance_->client_config_;
}
inline ::grpc::testing::ClientConfig* DataDetails::mutable_client_config() {
  set_has_client_config();
  if (client_config_ == NULL) {
    client_config_ = new ::grpc::testing::ClientConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.DataDetails.client_config)
  return client_config_;
}
inline ::grpc::testing::ClientConfig* DataDetails::release_client_config() {
  clear_has_client_config();
  ::grpc::testing::ClientConfig* temp = client_config_;
  client_config_ = NULL;
  return temp;
}
inline void DataDetails::set_allocated_client_config(::grpc::testing::ClientConfig* client_config) {
  delete client_config_;
  client_config_ = client_config;
  if (client_config) {
    set_has_client_config();
  } else {
    clear_has_client_config();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.DataDetails.client_config)
}

// optional .grpc.testing.ServerConfig server_config = 6;
inline bool DataDetails::has_server_config() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataDetails::set_has_server_config() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataDetails::clear_has_server_config() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataDetails::clear_server_config() {
  if (server_config_ != NULL) server_config_->::grpc::testing::ServerConfig::Clear();
  clear_has_server_config();
}
inline const ::grpc::testing::ServerConfig& DataDetails::server_config() const {
  // @@protoc_insertion_point(field_get:grpc.testing.DataDetails.server_config)
  return server_config_ != NULL ? *server_config_ : *default_instance_->server_config_;
}
inline ::grpc::testing::ServerConfig* DataDetails::mutable_server_config() {
  set_has_server_config();
  if (server_config_ == NULL) {
    server_config_ = new ::grpc::testing::ServerConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.DataDetails.server_config)
  return server_config_;
}
inline ::grpc::testing::ServerConfig* DataDetails::release_server_config() {
  clear_has_server_config();
  ::grpc::testing::ServerConfig* temp = server_config_;
  server_config_ = NULL;
  return temp;
}
inline void DataDetails::set_allocated_server_config(::grpc::testing::ServerConfig* server_config) {
  delete server_config_;
  server_config_ = server_config;
  if (server_config) {
    set_has_server_config();
  } else {
    clear_has_server_config();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.DataDetails.server_config)
}

// -------------------------------------------------------------------

// UserDetails

// optional string id = 1;
inline bool UserDetails::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDetails::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDetails::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& UserDetails::id() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.id)
}
inline void UserDetails::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.id)
}
inline void UserDetails::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.id)
}
inline ::std::string* UserDetails::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDetails::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.id)
}

// optional string email = 2;
inline bool UserDetails::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserDetails::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserDetails::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserDetails::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& UserDetails::email() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.email)
}
inline void UserDetails::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.email)
}
inline void UserDetails::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.email)
}
inline ::std::string* UserDetails::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDetails::release_email() {
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.email)
}

// optional bool verified_email = 3;
inline bool UserDetails::has_verified_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserDetails::set_has_verified_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserDetails::clear_has_verified_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserDetails::clear_verified_email() {
  verified_email_ = false;
  clear_has_verified_email();
}
inline bool UserDetails::verified_email() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.verified_email)
  return verified_email_;
}
inline void UserDetails::set_verified_email(bool value) {
  set_has_verified_email();
  verified_email_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.verified_email)
}

// optional string name = 4;
inline bool UserDetails::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserDetails::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& UserDetails::name() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.name)
}
inline void UserDetails::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.name)
}
inline void UserDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.name)
}
inline ::std::string* UserDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDetails::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.name)
}

// optional string given_name = 5;
inline bool UserDetails::has_given_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserDetails::set_has_given_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserDetails::clear_has_given_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserDetails::clear_given_name() {
  given_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_given_name();
}
inline const ::std::string& UserDetails::given_name() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.given_name)
  return given_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_given_name(const ::std::string& value) {
  set_has_given_name();
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.given_name)
}
inline void UserDetails::set_given_name(const char* value) {
  set_has_given_name();
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.given_name)
}
inline void UserDetails::set_given_name(const char* value, size_t size) {
  set_has_given_name();
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.given_name)
}
inline ::std::string* UserDetails::mutable_given_name() {
  set_has_given_name();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.given_name)
  return given_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDetails::release_given_name() {
  clear_has_given_name();
  return given_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_allocated_given_name(::std::string* given_name) {
  if (given_name != NULL) {
    set_has_given_name();
  } else {
    clear_has_given_name();
  }
  given_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), given_name);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.given_name)
}

// optional string family_name = 6;
inline bool UserDetails::has_family_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserDetails::set_has_family_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserDetails::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserDetails::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_family_name();
}
inline const ::std::string& UserDetails::family_name() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.family_name)
  return family_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_family_name(const ::std::string& value) {
  set_has_family_name();
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.family_name)
}
inline void UserDetails::set_family_name(const char* value) {
  set_has_family_name();
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.family_name)
}
inline void UserDetails::set_family_name(const char* value, size_t size) {
  set_has_family_name();
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.family_name)
}
inline ::std::string* UserDetails::mutable_family_name() {
  set_has_family_name();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDetails::release_family_name() {
  clear_has_family_name();
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    set_has_family_name();
  } else {
    clear_has_family_name();
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.family_name)
}

// optional string link = 7;
inline bool UserDetails::has_link() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserDetails::set_has_link() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserDetails::clear_has_link() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserDetails::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link();
}
inline const ::std::string& UserDetails::link() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.link)
  return link_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_link(const ::std::string& value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.link)
}
inline void UserDetails::set_link(const char* value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.link)
}
inline void UserDetails::set_link(const char* value, size_t size) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.link)
}
inline ::std::string* UserDetails::mutable_link() {
  set_has_link();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDetails::release_link() {
  clear_has_link();
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_allocated_link(::std::string* link) {
  if (link != NULL) {
    set_has_link();
  } else {
    clear_has_link();
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.link)
}

// optional string picture = 8;
inline bool UserDetails::has_picture() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserDetails::set_has_picture() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserDetails::clear_has_picture() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserDetails::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_picture();
}
inline const ::std::string& UserDetails::picture() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.picture)
  return picture_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_picture(const ::std::string& value) {
  set_has_picture();
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.picture)
}
inline void UserDetails::set_picture(const char* value) {
  set_has_picture();
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.picture)
}
inline void UserDetails::set_picture(const char* value, size_t size) {
  set_has_picture();
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.picture)
}
inline ::std::string* UserDetails::mutable_picture() {
  set_has_picture();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDetails::release_picture() {
  clear_has_picture();
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_allocated_picture(::std::string* picture) {
  if (picture != NULL) {
    set_has_picture();
  } else {
    clear_has_picture();
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.picture)
}

// optional string gender = 9;
inline bool UserDetails::has_gender() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserDetails::set_has_gender() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserDetails::clear_has_gender() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserDetails::clear_gender() {
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gender();
}
inline const ::std::string& UserDetails::gender() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.gender)
  return gender_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_gender(const ::std::string& value) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.gender)
}
inline void UserDetails::set_gender(const char* value) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.gender)
}
inline void UserDetails::set_gender(const char* value, size_t size) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.gender)
}
inline ::std::string* UserDetails::mutable_gender() {
  set_has_gender();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.gender)
  return gender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDetails::release_gender() {
  clear_has_gender();
  return gender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_allocated_gender(::std::string* gender) {
  if (gender != NULL) {
    set_has_gender();
  } else {
    clear_has_gender();
  }
  gender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gender);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.gender)
}

// optional string locale = 10;
inline bool UserDetails::has_locale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserDetails::set_has_locale() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserDetails::clear_has_locale() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserDetails::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locale();
}
inline const ::std::string& UserDetails::locale() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.locale)
  return locale_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_locale(const ::std::string& value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.locale)
}
inline void UserDetails::set_locale(const char* value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.locale)
}
inline void UserDetails::set_locale(const char* value, size_t size) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.locale)
}
inline ::std::string* UserDetails::mutable_locale() {
  set_has_locale();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDetails::release_locale() {
  clear_has_locale();
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    set_has_locale();
  } else {
    clear_has_locale();
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.locale)
}

// optional string hd = 11;
inline bool UserDetails::has_hd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserDetails::set_has_hd() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserDetails::clear_has_hd() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserDetails::clear_hd() {
  hd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hd();
}
inline const ::std::string& UserDetails::hd() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.hd)
  return hd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_hd(const ::std::string& value) {
  set_has_hd();
  hd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.hd)
}
inline void UserDetails::set_hd(const char* value) {
  set_has_hd();
  hd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.hd)
}
inline void UserDetails::set_hd(const char* value, size_t size) {
  set_has_hd();
  hd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.hd)
}
inline ::std::string* UserDetails::mutable_hd() {
  set_has_hd();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.hd)
  return hd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserDetails::release_hd() {
  clear_has_hd();
  return hd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserDetails::set_allocated_hd(::std::string* hd) {
  if (hd != NULL) {
    set_has_hd();
  } else {
    clear_has_hd();
  }
  hd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hd);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.hd)
}

// -------------------------------------------------------------------

// SingleUserDetails

// repeated .grpc.testing.DataDetails data_details = 1;
inline int SingleUserDetails::data_details_size() const {
  return data_details_.size();
}
inline void SingleUserDetails::clear_data_details() {
  data_details_.Clear();
}
inline const ::grpc::testing::DataDetails& SingleUserDetails::data_details(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserDetails.data_details)
  return data_details_.Get(index);
}
inline ::grpc::testing::DataDetails* SingleUserDetails::mutable_data_details(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserDetails.data_details)
  return data_details_.Mutable(index);
}
inline ::grpc::testing::DataDetails* SingleUserDetails::add_data_details() {
  // @@protoc_insertion_point(field_add:grpc.testing.SingleUserDetails.data_details)
  return data_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grpc::testing::DataDetails >&
SingleUserDetails::data_details() const {
  // @@protoc_insertion_point(field_list:grpc.testing.SingleUserDetails.data_details)
  return data_details_;
}
inline ::google::protobuf::RepeatedPtrField< ::grpc::testing::DataDetails >*
SingleUserDetails::mutable_data_details() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.SingleUserDetails.data_details)
  return &data_details_;
}

// optional .grpc.testing.UserDetails user_details = 2;
inline bool SingleUserDetails::has_user_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleUserDetails::set_has_user_details() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleUserDetails::clear_has_user_details() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleUserDetails::clear_user_details() {
  if (user_details_ != NULL) user_details_->::grpc::testing::UserDetails::Clear();
  clear_has_user_details();
}
inline const ::grpc::testing::UserDetails& SingleUserDetails::user_details() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserDetails.user_details)
  return user_details_ != NULL ? *user_details_ : *default_instance_->user_details_;
}
inline ::grpc::testing::UserDetails* SingleUserDetails::mutable_user_details() {
  set_has_user_details();
  if (user_details_ == NULL) {
    user_details_ = new ::grpc::testing::UserDetails;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserDetails.user_details)
  return user_details_;
}
inline ::grpc::testing::UserDetails* SingleUserDetails::release_user_details() {
  clear_has_user_details();
  ::grpc::testing::UserDetails* temp = user_details_;
  user_details_ = NULL;
  return temp;
}
inline void SingleUserDetails::set_allocated_user_details(::grpc::testing::UserDetails* user_details) {
  delete user_details_;
  user_details_ = user_details;
  if (user_details) {
    set_has_user_details();
  } else {
    clear_has_user_details();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserDetails.user_details)
}

// -------------------------------------------------------------------

// SingleUserRecordRequest

// optional string access_token = 1;
inline bool SingleUserRecordRequest::has_access_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleUserRecordRequest::set_has_access_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleUserRecordRequest::clear_has_access_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleUserRecordRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_access_token();
}
inline const ::std::string& SingleUserRecordRequest::access_token() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRecordRequest.access_token)
  return access_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleUserRecordRequest::set_access_token(const ::std::string& value) {
  set_has_access_token();
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.SingleUserRecordRequest.access_token)
}
inline void SingleUserRecordRequest::set_access_token(const char* value) {
  set_has_access_token();
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.SingleUserRecordRequest.access_token)
}
inline void SingleUserRecordRequest::set_access_token(const char* value, size_t size) {
  set_has_access_token();
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.SingleUserRecordRequest.access_token)
}
inline ::std::string* SingleUserRecordRequest::mutable_access_token() {
  set_has_access_token();
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRecordRequest.access_token)
  return access_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleUserRecordRequest::release_access_token() {
  clear_has_access_token();
  return access_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleUserRecordRequest::set_allocated_access_token(::std::string* access_token) {
  if (access_token != NULL) {
    set_has_access_token();
  } else {
    clear_has_access_token();
  }
  access_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRecordRequest.access_token)
}

// optional string test_name = 2;
inline bool SingleUserRecordRequest::has_test_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleUserRecordRequest::set_has_test_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleUserRecordRequest::clear_has_test_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleUserRecordRequest::clear_test_name() {
  test_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_test_name();
}
inline const ::std::string& SingleUserRecordRequest::test_name() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRecordRequest.test_name)
  return test_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleUserRecordRequest::set_test_name(const ::std::string& value) {
  set_has_test_name();
  test_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.SingleUserRecordRequest.test_name)
}
inline void SingleUserRecordRequest::set_test_name(const char* value) {
  set_has_test_name();
  test_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.SingleUserRecordRequest.test_name)
}
inline void SingleUserRecordRequest::set_test_name(const char* value, size_t size) {
  set_has_test_name();
  test_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.SingleUserRecordRequest.test_name)
}
inline ::std::string* SingleUserRecordRequest::mutable_test_name() {
  set_has_test_name();
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRecordRequest.test_name)
  return test_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleUserRecordRequest::release_test_name() {
  clear_has_test_name();
  return test_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleUserRecordRequest::set_allocated_test_name(::std::string* test_name) {
  if (test_name != NULL) {
    set_has_test_name();
  } else {
    clear_has_test_name();
  }
  test_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_name);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRecordRequest.test_name)
}

// optional string sys_info = 3;
inline bool SingleUserRecordRequest::has_sys_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleUserRecordRequest::set_has_sys_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleUserRecordRequest::clear_has_sys_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleUserRecordRequest::clear_sys_info() {
  sys_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sys_info();
}
inline const ::std::string& SingleUserRecordRequest::sys_info() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRecordRequest.sys_info)
  return sys_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleUserRecordRequest::set_sys_info(const ::std::string& value) {
  set_has_sys_info();
  sys_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.SingleUserRecordRequest.sys_info)
}
inline void SingleUserRecordRequest::set_sys_info(const char* value) {
  set_has_sys_info();
  sys_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.SingleUserRecordRequest.sys_info)
}
inline void SingleUserRecordRequest::set_sys_info(const char* value, size_t size) {
  set_has_sys_info();
  sys_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.SingleUserRecordRequest.sys_info)
}
inline ::std::string* SingleUserRecordRequest::mutable_sys_info() {
  set_has_sys_info();
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRecordRequest.sys_info)
  return sys_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleUserRecordRequest::release_sys_info() {
  clear_has_sys_info();
  return sys_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleUserRecordRequest::set_allocated_sys_info(::std::string* sys_info) {
  if (sys_info != NULL) {
    set_has_sys_info();
  } else {
    clear_has_sys_info();
  }
  sys_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sys_info);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRecordRequest.sys_info)
}

// optional .grpc.testing.Metrics metrics = 4;
inline bool SingleUserRecordRequest::has_metrics() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SingleUserRecordRequest::set_has_metrics() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SingleUserRecordRequest::clear_has_metrics() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SingleUserRecordRequest::clear_metrics() {
  if (metrics_ != NULL) metrics_->::grpc::testing::Metrics::Clear();
  clear_has_metrics();
}
inline const ::grpc::testing::Metrics& SingleUserRecordRequest::metrics() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRecordRequest.metrics)
  return metrics_ != NULL ? *metrics_ : *default_instance_->metrics_;
}
inline ::grpc::testing::Metrics* SingleUserRecordRequest::mutable_metrics() {
  set_has_metrics();
  if (metrics_ == NULL) {
    metrics_ = new ::grpc::testing::Metrics;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRecordRequest.metrics)
  return metrics_;
}
inline ::grpc::testing::Metrics* SingleUserRecordRequest::release_metrics() {
  clear_has_metrics();
  ::grpc::testing::Metrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
inline void SingleUserRecordRequest::set_allocated_metrics(::grpc::testing::Metrics* metrics) {
  delete metrics_;
  metrics_ = metrics;
  if (metrics) {
    set_has_metrics();
  } else {
    clear_has_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRecordRequest.metrics)
}

// optional .grpc.testing.ClientConfig client_config = 5;
inline bool SingleUserRecordRequest::has_client_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SingleUserRecordRequest::set_has_client_config() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SingleUserRecordRequest::clear_has_client_config() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SingleUserRecordRequest::clear_client_config() {
  if (client_config_ != NULL) client_config_->::grpc::testing::ClientConfig::Clear();
  clear_has_client_config();
}
inline const ::grpc::testing::ClientConfig& SingleUserRecordRequest::client_config() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRecordRequest.client_config)
  return client_config_ != NULL ? *client_config_ : *default_instance_->client_config_;
}
inline ::grpc::testing::ClientConfig* SingleUserRecordRequest::mutable_client_config() {
  set_has_client_config();
  if (client_config_ == NULL) {
    client_config_ = new ::grpc::testing::ClientConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRecordRequest.client_config)
  return client_config_;
}
inline ::grpc::testing::ClientConfig* SingleUserRecordRequest::release_client_config() {
  clear_has_client_config();
  ::grpc::testing::ClientConfig* temp = client_config_;
  client_config_ = NULL;
  return temp;
}
inline void SingleUserRecordRequest::set_allocated_client_config(::grpc::testing::ClientConfig* client_config) {
  delete client_config_;
  client_config_ = client_config;
  if (client_config) {
    set_has_client_config();
  } else {
    clear_has_client_config();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRecordRequest.client_config)
}

// optional .grpc.testing.ServerConfig server_config = 6;
inline bool SingleUserRecordRequest::has_server_config() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SingleUserRecordRequest::set_has_server_config() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SingleUserRecordRequest::clear_has_server_config() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SingleUserRecordRequest::clear_server_config() {
  if (server_config_ != NULL) server_config_->::grpc::testing::ServerConfig::Clear();
  clear_has_server_config();
}
inline const ::grpc::testing::ServerConfig& SingleUserRecordRequest::server_config() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRecordRequest.server_config)
  return server_config_ != NULL ? *server_config_ : *default_instance_->server_config_;
}
inline ::grpc::testing::ServerConfig* SingleUserRecordRequest::mutable_server_config() {
  set_has_server_config();
  if (server_config_ == NULL) {
    server_config_ = new ::grpc::testing::ServerConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRecordRequest.server_config)
  return server_config_;
}
inline ::grpc::testing::ServerConfig* SingleUserRecordRequest::release_server_config() {
  clear_has_server_config();
  ::grpc::testing::ServerConfig* temp = server_config_;
  server_config_ = NULL;
  return temp;
}
inline void SingleUserRecordRequest::set_allocated_server_config(::grpc::testing::ServerConfig* server_config) {
  delete server_config_;
  server_config_ = server_config;
  if (server_config) {
    set_has_server_config();
  } else {
    clear_has_server_config();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRecordRequest.server_config)
}

// -------------------------------------------------------------------

// SingleUserRecordReply

// -------------------------------------------------------------------

// SingleUserRetrieveRequest

// optional string user_id = 1;
inline bool SingleUserRetrieveRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleUserRetrieveRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleUserRetrieveRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleUserRetrieveRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& SingleUserRetrieveRequest::user_id() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRetrieveRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleUserRetrieveRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.SingleUserRetrieveRequest.user_id)
}
inline void SingleUserRetrieveRequest::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.SingleUserRetrieveRequest.user_id)
}
inline void SingleUserRetrieveRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.SingleUserRetrieveRequest.user_id)
}
inline ::std::string* SingleUserRetrieveRequest::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRetrieveRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleUserRetrieveRequest::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleUserRetrieveRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRetrieveRequest.user_id)
}

// -------------------------------------------------------------------

// SingleUserRetrieveReply

// optional .grpc.testing.SingleUserDetails details = 1;
inline bool SingleUserRetrieveReply::has_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleUserRetrieveReply::set_has_details() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleUserRetrieveReply::clear_has_details() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleUserRetrieveReply::clear_details() {
  if (details_ != NULL) details_->::grpc::testing::SingleUserDetails::Clear();
  clear_has_details();
}
inline const ::grpc::testing::SingleUserDetails& SingleUserRetrieveReply::details() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRetrieveReply.details)
  return details_ != NULL ? *details_ : *default_instance_->details_;
}
inline ::grpc::testing::SingleUserDetails* SingleUserRetrieveReply::mutable_details() {
  set_has_details();
  if (details_ == NULL) {
    details_ = new ::grpc::testing::SingleUserDetails;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRetrieveReply.details)
  return details_;
}
inline ::grpc::testing::SingleUserDetails* SingleUserRetrieveReply::release_details() {
  clear_has_details();
  ::grpc::testing::SingleUserDetails* temp = details_;
  details_ = NULL;
  return temp;
}
inline void SingleUserRetrieveReply::set_allocated_details(::grpc::testing::SingleUserDetails* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRetrieveReply.details)
}

// -------------------------------------------------------------------

// AllUsersRetrieveReply

// repeated .grpc.testing.SingleUserDetails user_data = 1;
inline int AllUsersRetrieveReply::user_data_size() const {
  return user_data_.size();
}
inline void AllUsersRetrieveReply::clear_user_data() {
  user_data_.Clear();
}
inline const ::grpc::testing::SingleUserDetails& AllUsersRetrieveReply::user_data(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.AllUsersRetrieveReply.user_data)
  return user_data_.Get(index);
}
inline ::grpc::testing::SingleUserDetails* AllUsersRetrieveReply::mutable_user_data(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.testing.AllUsersRetrieveReply.user_data)
  return user_data_.Mutable(index);
}
inline ::grpc::testing::SingleUserDetails* AllUsersRetrieveReply::add_user_data() {
  // @@protoc_insertion_point(field_add:grpc.testing.AllUsersRetrieveReply.user_data)
  return user_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::grpc::testing::SingleUserDetails >&
AllUsersRetrieveReply::user_data() const {
  // @@protoc_insertion_point(field_list:grpc.testing.AllUsersRetrieveReply.user_data)
  return user_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::grpc::testing::SingleUserDetails >*
AllUsersRetrieveReply::mutable_user_data() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.AllUsersRetrieveReply.user_data)
  return &user_data_;
}

// -------------------------------------------------------------------

// AllUsersRetrieveRequest

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace testing
}  // namespace grpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_5fdata_2eproto__INCLUDED
