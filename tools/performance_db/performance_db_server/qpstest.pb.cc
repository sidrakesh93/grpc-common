// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qpstest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qpstest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace grpc {
namespace testing {

namespace {

const ::google::protobuf::Descriptor* StatsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Payload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Payload_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistogramData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistogramData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoissonParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoissonParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniformParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniformParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeterministicParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeterministicParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParetoParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParetoParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadParams_reflection_ = NULL;
struct LoadParamsOneofInstance {
  const ::grpc::testing::PoissonParams* poisson_;
  const ::grpc::testing::UniformParams* uniform_;
  const ::grpc::testing::DeterministicParams* determ_;
  const ::grpc::testing::ParetoParams* pareto_;
}* LoadParams_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ClientConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mark_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientArgs_reflection_ = NULL;
struct ClientArgsOneofInstance {
  const ::grpc::testing::ClientConfig* setup_;
  const ::grpc::testing::Mark* mark_;
}* ClientArgs_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ClientStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerArgs_reflection_ = NULL;
struct ServerArgsOneofInstance {
  const ::grpc::testing::ServerConfig* setup_;
  const ::grpc::testing::Mark* mark_;
}* ServerArgs_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ServerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PayloadType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoadType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_qpstest_2eproto() {
  protobuf_AddDesc_qpstest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "qpstest.proto");
  GOOGLE_CHECK(file != NULL);
  StatsRequest_descriptor_ = file->message_type(0);
  static const int StatsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsRequest, test_num_),
  };
  StatsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatsRequest_descriptor_,
      StatsRequest::default_instance_,
      StatsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatsRequest, _is_default_instance_));
  ServerStats_descriptor_ = file->message_type(1);
  static const int ServerStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, time_elapsed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, time_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, time_system_),
  };
  ServerStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerStats_descriptor_,
      ServerStats::default_instance_,
      ServerStats_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, _is_default_instance_));
  Payload_descriptor_ = file->message_type(2);
  static const int Payload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, body_),
  };
  Payload_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Payload_descriptor_,
      Payload::default_instance_,
      Payload_offsets_,
      -1,
      -1,
      -1,
      sizeof(Payload),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, _is_default_instance_));
  HistogramData_descriptor_ = file->message_type(3);
  static const int HistogramData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramData, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramData, min_seen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramData, max_seen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramData, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramData, sum_of_squares_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramData, count_),
  };
  HistogramData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HistogramData_descriptor_,
      HistogramData::default_instance_,
      HistogramData_offsets_,
      -1,
      -1,
      -1,
      sizeof(HistogramData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramData, _is_default_instance_));
  PoissonParams_descriptor_ = file->message_type(4);
  static const int PoissonParams_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoissonParams, offered_load_),
  };
  PoissonParams_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PoissonParams_descriptor_,
      PoissonParams::default_instance_,
      PoissonParams_offsets_,
      -1,
      -1,
      -1,
      sizeof(PoissonParams),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoissonParams, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoissonParams, _is_default_instance_));
  UniformParams_descriptor_ = file->message_type(5);
  static const int UniformParams_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniformParams, interarrival_lo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniformParams, interarrival_hi_),
  };
  UniformParams_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UniformParams_descriptor_,
      UniformParams::default_instance_,
      UniformParams_offsets_,
      -1,
      -1,
      -1,
      sizeof(UniformParams),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniformParams, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniformParams, _is_default_instance_));
  DeterministicParams_descriptor_ = file->message_type(6);
  static const int DeterministicParams_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeterministicParams, offered_load_),
  };
  DeterministicParams_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeterministicParams_descriptor_,
      DeterministicParams::default_instance_,
      DeterministicParams_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeterministicParams),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeterministicParams, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeterministicParams, _is_default_instance_));
  ParetoParams_descriptor_ = file->message_type(7);
  static const int ParetoParams_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParetoParams, interarrival_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParetoParams, alpha_),
  };
  ParetoParams_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParetoParams_descriptor_,
      ParetoParams::default_instance_,
      ParetoParams_offsets_,
      -1,
      -1,
      -1,
      sizeof(ParetoParams),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParetoParams, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParetoParams, _is_default_instance_));
  LoadParams_descriptor_ = file->message_type(8);
  static const int LoadParams_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LoadParams_default_oneof_instance_, poisson_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LoadParams_default_oneof_instance_, uniform_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LoadParams_default_oneof_instance_, determ_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LoadParams_default_oneof_instance_, pareto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadParams, load_),
  };
  LoadParams_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoadParams_descriptor_,
      LoadParams::default_instance_,
      LoadParams_offsets_,
      -1,
      -1,
      -1,
      LoadParams_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadParams, _oneof_case_[0]),
      sizeof(LoadParams),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadParams, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadParams, _is_default_instance_));
  ClientConfig_descriptor_ = file->message_type(9);
  static const int ClientConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, server_targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, enable_ssl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, outstanding_rpcs_per_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, client_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, payload_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, async_client_threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, rpc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, load_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, load_params_),
  };
  ClientConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientConfig_descriptor_,
      ClientConfig::default_instance_,
      ClientConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfig, _is_default_instance_));
  Mark_descriptor_ = file->message_type(10);
  static const int Mark_offsets_[1] = {
  };
  Mark_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mark_descriptor_,
      Mark::default_instance_,
      Mark_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mark),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mark, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mark, _is_default_instance_));
  ClientArgs_descriptor_ = file->message_type(11);
  static const int ClientArgs_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientArgs_default_oneof_instance_, setup_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientArgs_default_oneof_instance_, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientArgs, argtype_),
  };
  ClientArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientArgs_descriptor_,
      ClientArgs::default_instance_,
      ClientArgs_offsets_,
      -1,
      -1,
      -1,
      ClientArgs_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientArgs, _oneof_case_[0]),
      sizeof(ClientArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientArgs, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientArgs, _is_default_instance_));
  ClientStats_descriptor_ = file->message_type(12);
  static const int ClientStats_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, latencies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, time_elapsed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, time_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, time_system_),
  };
  ClientStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientStats_descriptor_,
      ClientStats::default_instance_,
      ClientStats_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, _is_default_instance_));
  ClientStatus_descriptor_ = file->message_type(13);
  static const int ClientStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStatus, stats_),
  };
  ClientStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientStatus_descriptor_,
      ClientStatus::default_instance_,
      ClientStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStatus, _is_default_instance_));
  ServerConfig_descriptor_ = file->message_type(14);
  static const int ServerConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, enable_ssl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, host_),
  };
  ServerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerConfig_descriptor_,
      ServerConfig::default_instance_,
      ServerConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _is_default_instance_));
  ServerArgs_descriptor_ = file->message_type(15);
  static const int ServerArgs_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerArgs_default_oneof_instance_, setup_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerArgs_default_oneof_instance_, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerArgs, argtype_),
  };
  ServerArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerArgs_descriptor_,
      ServerArgs::default_instance_,
      ServerArgs_offsets_,
      -1,
      -1,
      -1,
      ServerArgs_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerArgs, _oneof_case_[0]),
      sizeof(ServerArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerArgs, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerArgs, _is_default_instance_));
  ServerStatus_descriptor_ = file->message_type(16);
  static const int ServerStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, port_),
  };
  ServerStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerStatus_descriptor_,
      ServerStatus::default_instance_,
      ServerStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatus, _is_default_instance_));
  SimpleRequest_descriptor_ = file->message_type(17);
  static const int SimpleRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, response_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, response_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, payload_),
  };
  SimpleRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleRequest_descriptor_,
      SimpleRequest::default_instance_,
      SimpleRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimpleRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, _is_default_instance_));
  SimpleResponse_descriptor_ = file->message_type(18);
  static const int SimpleResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleResponse, payload_),
  };
  SimpleResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleResponse_descriptor_,
      SimpleResponse::default_instance_,
      SimpleResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimpleResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleResponse, _is_default_instance_));
  PayloadType_descriptor_ = file->enum_type(0);
  ClientType_descriptor_ = file->enum_type(1);
  ServerType_descriptor_ = file->enum_type(2);
  RpcType_descriptor_ = file->enum_type(3);
  LoadType_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_qpstest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatsRequest_descriptor_, &StatsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerStats_descriptor_, &ServerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Payload_descriptor_, &Payload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HistogramData_descriptor_, &HistogramData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PoissonParams_descriptor_, &PoissonParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UniformParams_descriptor_, &UniformParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeterministicParams_descriptor_, &DeterministicParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParetoParams_descriptor_, &ParetoParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoadParams_descriptor_, &LoadParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientConfig_descriptor_, &ClientConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mark_descriptor_, &Mark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientArgs_descriptor_, &ClientArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientStats_descriptor_, &ClientStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientStatus_descriptor_, &ClientStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerConfig_descriptor_, &ServerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerArgs_descriptor_, &ServerArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerStatus_descriptor_, &ServerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleRequest_descriptor_, &SimpleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleResponse_descriptor_, &SimpleResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_qpstest_2eproto() {
  delete StatsRequest::default_instance_;
  delete StatsRequest_reflection_;
  delete ServerStats::default_instance_;
  delete ServerStats_reflection_;
  delete Payload::default_instance_;
  delete Payload_reflection_;
  delete HistogramData::default_instance_;
  delete HistogramData_reflection_;
  delete PoissonParams::default_instance_;
  delete PoissonParams_reflection_;
  delete UniformParams::default_instance_;
  delete UniformParams_reflection_;
  delete DeterministicParams::default_instance_;
  delete DeterministicParams_reflection_;
  delete ParetoParams::default_instance_;
  delete ParetoParams_reflection_;
  delete LoadParams::default_instance_;
  delete LoadParams_default_oneof_instance_;
  delete LoadParams_reflection_;
  delete ClientConfig::default_instance_;
  delete ClientConfig_reflection_;
  delete Mark::default_instance_;
  delete Mark_reflection_;
  delete ClientArgs::default_instance_;
  delete ClientArgs_default_oneof_instance_;
  delete ClientArgs_reflection_;
  delete ClientStats::default_instance_;
  delete ClientStats_reflection_;
  delete ClientStatus::default_instance_;
  delete ClientStatus_reflection_;
  delete ServerConfig::default_instance_;
  delete ServerConfig_reflection_;
  delete ServerArgs::default_instance_;
  delete ServerArgs_default_oneof_instance_;
  delete ServerArgs_reflection_;
  delete ServerStatus::default_instance_;
  delete ServerStatus_reflection_;
  delete SimpleRequest::default_instance_;
  delete SimpleRequest_reflection_;
  delete SimpleResponse::default_instance_;
  delete SimpleResponse_reflection_;
}

void protobuf_AddDesc_qpstest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rqpstest.proto\022\014grpc.testing\" \n\014StatsRe"
    "quest\022\020\n\010test_num\030\001 \001(\005\"K\n\013ServerStats\022\024"
    "\n\014time_elapsed\030\001 \001(\001\022\021\n\ttime_user\030\002 \001(\001\022"
    "\023\n\013time_system\030\003 \001(\001\"@\n\007Payload\022\'\n\004type\030"
    "\001 \001(\0162\031.grpc.testing.PayloadType\022\014\n\004body"
    "\030\002 \001(\014\"w\n\rHistogramData\022\016\n\006bucket\030\001 \003(\r\022"
    "\020\n\010min_seen\030\002 \001(\001\022\020\n\010max_seen\030\003 \001(\001\022\013\n\003s"
    "um\030\004 \001(\001\022\026\n\016sum_of_squares\030\005 \001(\001\022\r\n\005coun"
    "t\030\006 \001(\001\"%\n\rPoissonParams\022\024\n\014offered_load"
    "\030\001 \001(\001\"A\n\rUniformParams\022\027\n\017interarrival_"
    "lo\030\001 \001(\001\022\027\n\017interarrival_hi\030\002 \001(\001\"+\n\023Det"
    "erministicParams\022\024\n\014offered_load\030\001 \001(\001\"8"
    "\n\014ParetoParams\022\031\n\021interarrival_base\030\001 \001("
    "\001\022\r\n\005alpha\030\002 \001(\001\"\327\001\n\nLoadParams\022.\n\007poiss"
    "on\030\001 \001(\0132\033.grpc.testing.PoissonParamsH\000\022"
    ".\n\007uniform\030\002 \001(\0132\033.grpc.testing.UniformP"
    "aramsH\000\0223\n\006determ\030\003 \001(\0132!.grpc.testing.D"
    "eterministicParamsH\000\022,\n\006pareto\030\004 \001(\0132\032.g"
    "rpc.testing.ParetoParamsH\000B\006\n\004load\"\355\002\n\014C"
    "lientConfig\022\026\n\016server_targets\030\001 \003(\t\022-\n\013c"
    "lient_type\030\002 \001(\0162\030.grpc.testing.ClientTy"
    "pe\022\022\n\nenable_ssl\030\003 \001(\010\022$\n\034outstanding_rp"
    "cs_per_channel\030\004 \001(\005\022\027\n\017client_channels\030"
    "\005 \001(\005\022\024\n\014payload_size\030\006 \001(\005\022\034\n\024async_cli"
    "ent_threads\030\007 \001(\005\022\'\n\010rpc_type\030\010 \001(\0162\025.gr"
    "pc.testing.RpcType\022\014\n\004host\030\t \001(\t\022)\n\tload"
    "_type\030\n \001(\0162\026.grpc.testing.LoadType\022-\n\013l"
    "oad_params\030\013 \001(\0132\030.grpc.testing.LoadPara"
    "ms\"\006\n\004Mark\"h\n\nClientArgs\022+\n\005setup\030\001 \001(\0132"
    "\032.grpc.testing.ClientConfigH\000\022\"\n\004mark\030\002 "
    "\001(\0132\022.grpc.testing.MarkH\000B\t\n\007argtype\"{\n\013"
    "ClientStats\022.\n\tlatencies\030\001 \001(\0132\033.grpc.te"
    "sting.HistogramData\022\024\n\014time_elapsed\030\002 \001("
    "\001\022\021\n\ttime_user\030\003 \001(\001\022\023\n\013time_system\030\004 \001("
    "\001\"8\n\014ClientStatus\022(\n\005stats\030\001 \001(\0132\031.grpc."
    "testing.ClientStats\"p\n\014ServerConfig\022-\n\013s"
    "erver_type\030\001 \001(\0162\030.grpc.testing.ServerTy"
    "pe\022\017\n\007threads\030\002 \001(\005\022\022\n\nenable_ssl\030\003 \001(\010\022"
    "\014\n\004host\030\004 \001(\t\"h\n\nServerArgs\022+\n\005setup\030\001 \001"
    "(\0132\032.grpc.testing.ServerConfigH\000\022\"\n\004mark"
    "\030\002 \001(\0132\022.grpc.testing.MarkH\000B\t\n\007argtype\""
    "F\n\014ServerStatus\022(\n\005stats\030\001 \001(\0132\031.grpc.te"
    "sting.ServerStats\022\014\n\004port\030\002 \001(\005\"\200\001\n\rSimp"
    "leRequest\0220\n\rresponse_type\030\001 \001(\0162\031.grpc."
    "testing.PayloadType\022\025\n\rresponse_size\030\002 \001"
    "(\005\022&\n\007payload\030\003 \001(\0132\025.grpc.testing.Paylo"
    "ad\"8\n\016SimpleResponse\022&\n\007payload\030\001 \001(\0132\025."
    "grpc.testing.Payload*\?\n\013PayloadType\022\020\n\014C"
    "OMPRESSABLE\020\000\022\022\n\016UNCOMPRESSABLE\020\001\022\n\n\006RAN"
    "DOM\020\002*6\n\nClientType\022\026\n\022SYNCHRONOUS_CLIEN"
    "T\020\000\022\020\n\014ASYNC_CLIENT\020\001*6\n\nServerType\022\026\n\022S"
    "YNCHRONOUS_SERVER\020\000\022\020\n\014ASYNC_SERVER\020\001*#\n"
    "\007RpcType\022\t\n\005UNARY\020\000\022\r\n\tSTREAMING\020\001*T\n\010Lo"
    "adType\022\017\n\013CLOSED_LOOP\020\000\022\013\n\007POISSON\020\001\022\013\n\007"
    "UNIFORM\020\002\022\021\n\rDETERMINISTIC\020\003\022\n\n\006PARETO\020\004"
    "2\245\001\n\013TestService\022F\n\tUnaryCall\022\033.grpc.tes"
    "ting.SimpleRequest\032\034.grpc.testing.Simple"
    "Response\022N\n\rStreamingCall\022\033.grpc.testing"
    ".SimpleRequest\032\034.grpc.testing.SimpleResp"
    "onse(\0010\0012\224\001\n\006Worker\022C\n\007RunTest\022\030.grpc.te"
    "sting.ClientArgs\032\032.grpc.testing.ClientSt"
    "atus(\0010\001\022E\n\tRunServer\022\030.grpc.testing.Ser"
    "verArgs\032\032.grpc.testing.ServerStatus(\0010\001b"
    "\006proto3", 2527);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qpstest.proto", &protobuf_RegisterTypes);
  StatsRequest::default_instance_ = new StatsRequest();
  ServerStats::default_instance_ = new ServerStats();
  Payload::default_instance_ = new Payload();
  HistogramData::default_instance_ = new HistogramData();
  PoissonParams::default_instance_ = new PoissonParams();
  UniformParams::default_instance_ = new UniformParams();
  DeterministicParams::default_instance_ = new DeterministicParams();
  ParetoParams::default_instance_ = new ParetoParams();
  LoadParams::default_instance_ = new LoadParams();
  LoadParams_default_oneof_instance_ = new LoadParamsOneofInstance();
  ClientConfig::default_instance_ = new ClientConfig();
  Mark::default_instance_ = new Mark();
  ClientArgs::default_instance_ = new ClientArgs();
  ClientArgs_default_oneof_instance_ = new ClientArgsOneofInstance();
  ClientStats::default_instance_ = new ClientStats();
  ClientStatus::default_instance_ = new ClientStatus();
  ServerConfig::default_instance_ = new ServerConfig();
  ServerArgs::default_instance_ = new ServerArgs();
  ServerArgs_default_oneof_instance_ = new ServerArgsOneofInstance();
  ServerStatus::default_instance_ = new ServerStatus();
  SimpleRequest::default_instance_ = new SimpleRequest();
  SimpleResponse::default_instance_ = new SimpleResponse();
  StatsRequest::default_instance_->InitAsDefaultInstance();
  ServerStats::default_instance_->InitAsDefaultInstance();
  Payload::default_instance_->InitAsDefaultInstance();
  HistogramData::default_instance_->InitAsDefaultInstance();
  PoissonParams::default_instance_->InitAsDefaultInstance();
  UniformParams::default_instance_->InitAsDefaultInstance();
  DeterministicParams::default_instance_->InitAsDefaultInstance();
  ParetoParams::default_instance_->InitAsDefaultInstance();
  LoadParams::default_instance_->InitAsDefaultInstance();
  ClientConfig::default_instance_->InitAsDefaultInstance();
  Mark::default_instance_->InitAsDefaultInstance();
  ClientArgs::default_instance_->InitAsDefaultInstance();
  ClientStats::default_instance_->InitAsDefaultInstance();
  ClientStatus::default_instance_->InitAsDefaultInstance();
  ServerConfig::default_instance_->InitAsDefaultInstance();
  ServerArgs::default_instance_->InitAsDefaultInstance();
  ServerStatus::default_instance_->InitAsDefaultInstance();
  SimpleRequest::default_instance_->InitAsDefaultInstance();
  SimpleResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_qpstest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_qpstest_2eproto {
  StaticDescriptorInitializer_qpstest_2eproto() {
    protobuf_AddDesc_qpstest_2eproto();
  }
} static_descriptor_initializer_qpstest_2eproto_;
const ::google::protobuf::EnumDescriptor* PayloadType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayloadType_descriptor_;
}
bool PayloadType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientType_descriptor_;
}
bool ClientType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerType_descriptor_;
}
bool ServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RpcType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcType_descriptor_;
}
bool RpcType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoadType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadType_descriptor_;
}
bool LoadType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int StatsRequest::kTestNumFieldNumber;
#endif  // !_MSC_VER

StatsRequest::StatsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.StatsRequest)
}

void StatsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StatsRequest::StatsRequest(const StatsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.StatsRequest)
}

void StatsRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  test_num_ = 0;
}

StatsRequest::~StatsRequest() {
  // @@protoc_insertion_point(destructor:grpc.testing.StatsRequest)
  SharedDtor();
}

void StatsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatsRequest_descriptor_;
}

const StatsRequest& StatsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

StatsRequest* StatsRequest::default_instance_ = NULL;

StatsRequest* StatsRequest::New(::google::protobuf::Arena* arena) const {
  StatsRequest* n = new StatsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatsRequest::Clear() {
  test_num_ = 0;
}

bool StatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.StatsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 test_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.StatsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.StatsRequest)
  return false;
#undef DO_
}

void StatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.StatsRequest)
  // optional int32 test_num = 1;
  if (this->test_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->test_num(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.StatsRequest)
}

::google::protobuf::uint8* StatsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.StatsRequest)
  // optional int32 test_num = 1;
  if (this->test_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->test_num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.StatsRequest)
  return target;
}

int StatsRequest::ByteSize() const {
  int total_size = 0;

  // optional int32 test_num = 1;
  if (this->test_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->test_num());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatsRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatsRequest::MergeFrom(const StatsRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.test_num() != 0) {
    set_test_num(from.test_num());
  }
}

void StatsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsRequest::CopyFrom(const StatsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsRequest::IsInitialized() const {

  return true;
}

void StatsRequest::Swap(StatsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatsRequest::InternalSwap(StatsRequest* other) {
  std::swap(test_num_, other->test_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatsRequest_descriptor_;
  metadata.reflection = StatsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatsRequest

// optional int32 test_num = 1;
void StatsRequest::clear_test_num() {
  test_num_ = 0;
}
 ::google::protobuf::int32 StatsRequest::test_num() const {
  // @@protoc_insertion_point(field_get:grpc.testing.StatsRequest.test_num)
  return test_num_;
}
 void StatsRequest::set_test_num(::google::protobuf::int32 value) {
  
  test_num_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.StatsRequest.test_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ServerStats::kTimeElapsedFieldNumber;
const int ServerStats::kTimeUserFieldNumber;
const int ServerStats::kTimeSystemFieldNumber;
#endif  // !_MSC_VER

ServerStats::ServerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ServerStats)
}

void ServerStats::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ServerStats::ServerStats(const ServerStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ServerStats)
}

void ServerStats::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_elapsed_ = 0;
  time_user_ = 0;
  time_system_ = 0;
}

ServerStats::~ServerStats() {
  // @@protoc_insertion_point(destructor:grpc.testing.ServerStats)
  SharedDtor();
}

void ServerStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStats_descriptor_;
}

const ServerStats& ServerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

ServerStats* ServerStats::default_instance_ = NULL;

ServerStats* ServerStats::New(::google::protobuf::Arena* arena) const {
  ServerStats* n = new ServerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerStats::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerStats*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_elapsed_, time_system_);

#undef ZR_HELPER_
#undef ZR_

}

bool ServerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ServerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double time_elapsed = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_elapsed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_time_user;
        break;
      }

      // optional double time_user = 2;
      case 2: {
        if (tag == 17) {
         parse_time_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_user_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_time_system;
        break;
      }

      // optional double time_system = 3;
      case 3: {
        if (tag == 25) {
         parse_time_system:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_system_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ServerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ServerStats)
  return false;
#undef DO_
}

void ServerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ServerStats)
  // optional double time_elapsed = 1;
  if (this->time_elapsed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time_elapsed(), output);
  }

  // optional double time_user = 2;
  if (this->time_user() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time_user(), output);
  }

  // optional double time_system = 3;
  if (this->time_system() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time_system(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ServerStats)
}

::google::protobuf::uint8* ServerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ServerStats)
  // optional double time_elapsed = 1;
  if (this->time_elapsed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time_elapsed(), target);
  }

  // optional double time_user = 2;
  if (this->time_user() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time_user(), target);
  }

  // optional double time_system = 3;
  if (this->time_system() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time_system(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ServerStats)
  return target;
}

int ServerStats::ByteSize() const {
  int total_size = 0;

  // optional double time_elapsed = 1;
  if (this->time_elapsed() != 0) {
    total_size += 1 + 8;
  }

  // optional double time_user = 2;
  if (this->time_user() != 0) {
    total_size += 1 + 8;
  }

  // optional double time_system = 3;
  if (this->time_system() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerStats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStats::MergeFrom(const ServerStats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.time_elapsed() != 0) {
    set_time_elapsed(from.time_elapsed());
  }
  if (from.time_user() != 0) {
    set_time_user(from.time_user());
  }
  if (from.time_system() != 0) {
    set_time_system(from.time_system());
  }
}

void ServerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStats::CopyFrom(const ServerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStats::IsInitialized() const {

  return true;
}

void ServerStats::Swap(ServerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerStats::InternalSwap(ServerStats* other) {
  std::swap(time_elapsed_, other->time_elapsed_);
  std::swap(time_user_, other->time_user_);
  std::swap(time_system_, other->time_system_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStats_descriptor_;
  metadata.reflection = ServerStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerStats

// optional double time_elapsed = 1;
void ServerStats::clear_time_elapsed() {
  time_elapsed_ = 0;
}
 double ServerStats::time_elapsed() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerStats.time_elapsed)
  return time_elapsed_;
}
 void ServerStats::set_time_elapsed(double value) {
  
  time_elapsed_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerStats.time_elapsed)
}

// optional double time_user = 2;
void ServerStats::clear_time_user() {
  time_user_ = 0;
}
 double ServerStats::time_user() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerStats.time_user)
  return time_user_;
}
 void ServerStats::set_time_user(double value) {
  
  time_user_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerStats.time_user)
}

// optional double time_system = 3;
void ServerStats::clear_time_system() {
  time_system_ = 0;
}
 double ServerStats::time_system() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerStats.time_system)
  return time_system_;
}
 void ServerStats::set_time_system(double value) {
  
  time_system_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerStats.time_system)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Payload::kTypeFieldNumber;
const int Payload::kBodyFieldNumber;
#endif  // !_MSC_VER

Payload::Payload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.Payload)
}

void Payload::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Payload::Payload(const Payload& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.Payload)
}

void Payload::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Payload::~Payload() {
  // @@protoc_insertion_point(destructor:grpc.testing.Payload)
  SharedDtor();
}

void Payload::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Payload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Payload_descriptor_;
}

const Payload& Payload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

Payload* Payload::default_instance_ = NULL;

Payload* Payload::New(::google::protobuf::Arena* arena) const {
  Payload* n = new Payload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Payload::Clear() {
  type_ = 0;
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.Payload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .grpc.testing.PayloadType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::grpc::testing::PayloadType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.Payload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.Payload)
  return false;
#undef DO_
}

void Payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.Payload)
  // optional .grpc.testing.PayloadType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->body(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.Payload)
}

::google::protobuf::uint8* Payload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.Payload)
  // optional .grpc.testing.PayloadType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.Payload)
  return target;
}

int Payload::ByteSize() const {
  int total_size = 0;

  // optional .grpc.testing.PayloadType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Payload::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Payload* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Payload>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Payload::MergeFrom(const Payload& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
}

void Payload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payload::CopyFrom(const Payload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {

  return true;
}

void Payload::Swap(Payload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Payload::InternalSwap(Payload* other) {
  std::swap(type_, other->type_);
  body_.Swap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Payload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Payload_descriptor_;
  metadata.reflection = Payload_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Payload

// optional .grpc.testing.PayloadType type = 1;
void Payload::clear_type() {
  type_ = 0;
}
 ::grpc::testing::PayloadType Payload::type() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Payload.type)
  return static_cast< ::grpc::testing::PayloadType >(type_);
}
 void Payload::set_type(::grpc::testing::PayloadType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Payload.type)
}

// optional bytes body = 2;
void Payload::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Payload::body() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Payload.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Payload::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.Payload.body)
}
 void Payload::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.Payload.body)
}
 void Payload::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.Payload.body)
}
 ::std::string* Payload::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:grpc.testing.Payload.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Payload::release_body() {
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Payload::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.Payload.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int HistogramData::kBucketFieldNumber;
const int HistogramData::kMinSeenFieldNumber;
const int HistogramData::kMaxSeenFieldNumber;
const int HistogramData::kSumFieldNumber;
const int HistogramData::kSumOfSquaresFieldNumber;
const int HistogramData::kCountFieldNumber;
#endif  // !_MSC_VER

HistogramData::HistogramData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.HistogramData)
}

void HistogramData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HistogramData::HistogramData(const HistogramData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.HistogramData)
}

void HistogramData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  min_seen_ = 0;
  max_seen_ = 0;
  sum_ = 0;
  sum_of_squares_ = 0;
  count_ = 0;
}

HistogramData::~HistogramData() {
  // @@protoc_insertion_point(destructor:grpc.testing.HistogramData)
  SharedDtor();
}

void HistogramData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistogramData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistogramData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistogramData_descriptor_;
}

const HistogramData& HistogramData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

HistogramData* HistogramData::default_instance_ = NULL;

HistogramData* HistogramData::New(::google::protobuf::Arena* arena) const {
  HistogramData* n = new HistogramData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistogramData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HistogramData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(min_seen_, count_);

#undef ZR_HELPER_
#undef ZR_

  bucket_.Clear();
}

bool HistogramData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.HistogramData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 bucket = 1;
      case 1: {
        if (tag == 8) {
         parse_bucket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_bucket())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bucket())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_bucket;
        if (input->ExpectTag(17)) goto parse_min_seen;
        break;
      }

      // optional double min_seen = 2;
      case 2: {
        if (tag == 17) {
         parse_min_seen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_seen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_max_seen;
        break;
      }

      // optional double max_seen = 3;
      case 3: {
        if (tag == 25) {
         parse_max_seen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_seen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_sum;
        break;
      }

      // optional double sum = 4;
      case 4: {
        if (tag == 33) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_sum_of_squares;
        break;
      }

      // optional double sum_of_squares = 5;
      case 5: {
        if (tag == 41) {
         parse_sum_of_squares:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_of_squares_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_count;
        break;
      }

      // optional double count = 6;
      case 6: {
        if (tag == 49) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.HistogramData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.HistogramData)
  return false;
#undef DO_
}

void HistogramData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.HistogramData)
  // repeated uint32 bucket = 1;
  if (this->bucket_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bucket_cached_byte_size_);
  }
  for (int i = 0; i < this->bucket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->bucket(i), output);
  }

  // optional double min_seen = 2;
  if (this->min_seen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min_seen(), output);
  }

  // optional double max_seen = 3;
  if (this->max_seen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_seen(), output);
  }

  // optional double sum = 4;
  if (this->sum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sum(), output);
  }

  // optional double sum_of_squares = 5;
  if (this->sum_of_squares() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sum_of_squares(), output);
  }

  // optional double count = 6;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.HistogramData)
}

::google::protobuf::uint8* HistogramData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.HistogramData)
  // repeated uint32 bucket = 1;
  if (this->bucket_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _bucket_cached_byte_size_, target);
  }
  for (int i = 0; i < this->bucket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->bucket(i), target);
  }

  // optional double min_seen = 2;
  if (this->min_seen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min_seen(), target);
  }

  // optional double max_seen = 3;
  if (this->max_seen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_seen(), target);
  }

  // optional double sum = 4;
  if (this->sum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sum(), target);
  }

  // optional double sum_of_squares = 5;
  if (this->sum_of_squares() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->sum_of_squares(), target);
  }

  // optional double count = 6;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.HistogramData)
  return target;
}

int HistogramData::ByteSize() const {
  int total_size = 0;

  // optional double min_seen = 2;
  if (this->min_seen() != 0) {
    total_size += 1 + 8;
  }

  // optional double max_seen = 3;
  if (this->max_seen() != 0) {
    total_size += 1 + 8;
  }

  // optional double sum = 4;
  if (this->sum() != 0) {
    total_size += 1 + 8;
  }

  // optional double sum_of_squares = 5;
  if (this->sum_of_squares() != 0) {
    total_size += 1 + 8;
  }

  // optional double count = 6;
  if (this->count() != 0) {
    total_size += 1 + 8;
  }

  // repeated uint32 bucket = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->bucket_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bucket(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bucket_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistogramData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HistogramData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HistogramData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistogramData::MergeFrom(const HistogramData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  bucket_.MergeFrom(from.bucket_);
  if (from.min_seen() != 0) {
    set_min_seen(from.min_seen());
  }
  if (from.max_seen() != 0) {
    set_max_seen(from.max_seen());
  }
  if (from.sum() != 0) {
    set_sum(from.sum());
  }
  if (from.sum_of_squares() != 0) {
    set_sum_of_squares(from.sum_of_squares());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void HistogramData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistogramData::CopyFrom(const HistogramData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramData::IsInitialized() const {

  return true;
}

void HistogramData::Swap(HistogramData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistogramData::InternalSwap(HistogramData* other) {
  bucket_.UnsafeArenaSwap(&other->bucket_);
  std::swap(min_seen_, other->min_seen_);
  std::swap(max_seen_, other->max_seen_);
  std::swap(sum_, other->sum_);
  std::swap(sum_of_squares_, other->sum_of_squares_);
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistogramData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistogramData_descriptor_;
  metadata.reflection = HistogramData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistogramData

// repeated uint32 bucket = 1;
int HistogramData::bucket_size() const {
  return bucket_.size();
}
void HistogramData::clear_bucket() {
  bucket_.Clear();
}
 ::google::protobuf::uint32 HistogramData::bucket(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.HistogramData.bucket)
  return bucket_.Get(index);
}
 void HistogramData::set_bucket(int index, ::google::protobuf::uint32 value) {
  bucket_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc.testing.HistogramData.bucket)
}
 void HistogramData::add_bucket(::google::protobuf::uint32 value) {
  bucket_.Add(value);
  // @@protoc_insertion_point(field_add:grpc.testing.HistogramData.bucket)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HistogramData::bucket() const {
  // @@protoc_insertion_point(field_list:grpc.testing.HistogramData.bucket)
  return bucket_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HistogramData::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.HistogramData.bucket)
  return &bucket_;
}

// optional double min_seen = 2;
void HistogramData::clear_min_seen() {
  min_seen_ = 0;
}
 double HistogramData::min_seen() const {
  // @@protoc_insertion_point(field_get:grpc.testing.HistogramData.min_seen)
  return min_seen_;
}
 void HistogramData::set_min_seen(double value) {
  
  min_seen_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.HistogramData.min_seen)
}

// optional double max_seen = 3;
void HistogramData::clear_max_seen() {
  max_seen_ = 0;
}
 double HistogramData::max_seen() const {
  // @@protoc_insertion_point(field_get:grpc.testing.HistogramData.max_seen)
  return max_seen_;
}
 void HistogramData::set_max_seen(double value) {
  
  max_seen_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.HistogramData.max_seen)
}

// optional double sum = 4;
void HistogramData::clear_sum() {
  sum_ = 0;
}
 double HistogramData::sum() const {
  // @@protoc_insertion_point(field_get:grpc.testing.HistogramData.sum)
  return sum_;
}
 void HistogramData::set_sum(double value) {
  
  sum_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.HistogramData.sum)
}

// optional double sum_of_squares = 5;
void HistogramData::clear_sum_of_squares() {
  sum_of_squares_ = 0;
}
 double HistogramData::sum_of_squares() const {
  // @@protoc_insertion_point(field_get:grpc.testing.HistogramData.sum_of_squares)
  return sum_of_squares_;
}
 void HistogramData::set_sum_of_squares(double value) {
  
  sum_of_squares_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.HistogramData.sum_of_squares)
}

// optional double count = 6;
void HistogramData::clear_count() {
  count_ = 0;
}
 double HistogramData::count() const {
  // @@protoc_insertion_point(field_get:grpc.testing.HistogramData.count)
  return count_;
}
 void HistogramData::set_count(double value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.HistogramData.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PoissonParams::kOfferedLoadFieldNumber;
#endif  // !_MSC_VER

PoissonParams::PoissonParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.PoissonParams)
}

void PoissonParams::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PoissonParams::PoissonParams(const PoissonParams& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.PoissonParams)
}

void PoissonParams::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  offered_load_ = 0;
}

PoissonParams::~PoissonParams() {
  // @@protoc_insertion_point(destructor:grpc.testing.PoissonParams)
  SharedDtor();
}

void PoissonParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PoissonParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoissonParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoissonParams_descriptor_;
}

const PoissonParams& PoissonParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

PoissonParams* PoissonParams::default_instance_ = NULL;

PoissonParams* PoissonParams::New(::google::protobuf::Arena* arena) const {
  PoissonParams* n = new PoissonParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoissonParams::Clear() {
  offered_load_ = 0;
}

bool PoissonParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.PoissonParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double offered_load = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offered_load_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.PoissonParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.PoissonParams)
  return false;
#undef DO_
}

void PoissonParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.PoissonParams)
  // optional double offered_load = 1;
  if (this->offered_load() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->offered_load(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.PoissonParams)
}

::google::protobuf::uint8* PoissonParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.PoissonParams)
  // optional double offered_load = 1;
  if (this->offered_load() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->offered_load(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.PoissonParams)
  return target;
}

int PoissonParams::ByteSize() const {
  int total_size = 0;

  // optional double offered_load = 1;
  if (this->offered_load() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoissonParams::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PoissonParams* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PoissonParams>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoissonParams::MergeFrom(const PoissonParams& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.offered_load() != 0) {
    set_offered_load(from.offered_load());
  }
}

void PoissonParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoissonParams::CopyFrom(const PoissonParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoissonParams::IsInitialized() const {

  return true;
}

void PoissonParams::Swap(PoissonParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoissonParams::InternalSwap(PoissonParams* other) {
  std::swap(offered_load_, other->offered_load_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoissonParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoissonParams_descriptor_;
  metadata.reflection = PoissonParams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoissonParams

// optional double offered_load = 1;
void PoissonParams::clear_offered_load() {
  offered_load_ = 0;
}
 double PoissonParams::offered_load() const {
  // @@protoc_insertion_point(field_get:grpc.testing.PoissonParams.offered_load)
  return offered_load_;
}
 void PoissonParams::set_offered_load(double value) {
  
  offered_load_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.PoissonParams.offered_load)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UniformParams::kInterarrivalLoFieldNumber;
const int UniformParams::kInterarrivalHiFieldNumber;
#endif  // !_MSC_VER

UniformParams::UniformParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.UniformParams)
}

void UniformParams::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UniformParams::UniformParams(const UniformParams& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.UniformParams)
}

void UniformParams::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  interarrival_lo_ = 0;
  interarrival_hi_ = 0;
}

UniformParams::~UniformParams() {
  // @@protoc_insertion_point(destructor:grpc.testing.UniformParams)
  SharedDtor();
}

void UniformParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UniformParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniformParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniformParams_descriptor_;
}

const UniformParams& UniformParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

UniformParams* UniformParams::default_instance_ = NULL;

UniformParams* UniformParams::New(::google::protobuf::Arena* arena) const {
  UniformParams* n = new UniformParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UniformParams::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UniformParams*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(interarrival_lo_, interarrival_hi_);

#undef ZR_HELPER_
#undef ZR_

}

bool UniformParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.UniformParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double interarrival_lo = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interarrival_lo_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_interarrival_hi;
        break;
      }

      // optional double interarrival_hi = 2;
      case 2: {
        if (tag == 17) {
         parse_interarrival_hi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interarrival_hi_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.UniformParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.UniformParams)
  return false;
#undef DO_
}

void UniformParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.UniformParams)
  // optional double interarrival_lo = 1;
  if (this->interarrival_lo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->interarrival_lo(), output);
  }

  // optional double interarrival_hi = 2;
  if (this->interarrival_hi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->interarrival_hi(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.UniformParams)
}

::google::protobuf::uint8* UniformParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.UniformParams)
  // optional double interarrival_lo = 1;
  if (this->interarrival_lo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->interarrival_lo(), target);
  }

  // optional double interarrival_hi = 2;
  if (this->interarrival_hi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->interarrival_hi(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.UniformParams)
  return target;
}

int UniformParams::ByteSize() const {
  int total_size = 0;

  // optional double interarrival_lo = 1;
  if (this->interarrival_lo() != 0) {
    total_size += 1 + 8;
  }

  // optional double interarrival_hi = 2;
  if (this->interarrival_hi() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniformParams::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UniformParams* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UniformParams>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniformParams::MergeFrom(const UniformParams& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.interarrival_lo() != 0) {
    set_interarrival_lo(from.interarrival_lo());
  }
  if (from.interarrival_hi() != 0) {
    set_interarrival_hi(from.interarrival_hi());
  }
}

void UniformParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniformParams::CopyFrom(const UniformParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniformParams::IsInitialized() const {

  return true;
}

void UniformParams::Swap(UniformParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UniformParams::InternalSwap(UniformParams* other) {
  std::swap(interarrival_lo_, other->interarrival_lo_);
  std::swap(interarrival_hi_, other->interarrival_hi_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UniformParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniformParams_descriptor_;
  metadata.reflection = UniformParams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UniformParams

// optional double interarrival_lo = 1;
void UniformParams::clear_interarrival_lo() {
  interarrival_lo_ = 0;
}
 double UniformParams::interarrival_lo() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UniformParams.interarrival_lo)
  return interarrival_lo_;
}
 void UniformParams::set_interarrival_lo(double value) {
  
  interarrival_lo_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.UniformParams.interarrival_lo)
}

// optional double interarrival_hi = 2;
void UniformParams::clear_interarrival_hi() {
  interarrival_hi_ = 0;
}
 double UniformParams::interarrival_hi() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UniformParams.interarrival_hi)
  return interarrival_hi_;
}
 void UniformParams::set_interarrival_hi(double value) {
  
  interarrival_hi_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.UniformParams.interarrival_hi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DeterministicParams::kOfferedLoadFieldNumber;
#endif  // !_MSC_VER

DeterministicParams::DeterministicParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.DeterministicParams)
}

void DeterministicParams::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeterministicParams::DeterministicParams(const DeterministicParams& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.DeterministicParams)
}

void DeterministicParams::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  offered_load_ = 0;
}

DeterministicParams::~DeterministicParams() {
  // @@protoc_insertion_point(destructor:grpc.testing.DeterministicParams)
  SharedDtor();
}

void DeterministicParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeterministicParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeterministicParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeterministicParams_descriptor_;
}

const DeterministicParams& DeterministicParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

DeterministicParams* DeterministicParams::default_instance_ = NULL;

DeterministicParams* DeterministicParams::New(::google::protobuf::Arena* arena) const {
  DeterministicParams* n = new DeterministicParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeterministicParams::Clear() {
  offered_load_ = 0;
}

bool DeterministicParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.DeterministicParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double offered_load = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offered_load_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.DeterministicParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.DeterministicParams)
  return false;
#undef DO_
}

void DeterministicParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.DeterministicParams)
  // optional double offered_load = 1;
  if (this->offered_load() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->offered_load(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.DeterministicParams)
}

::google::protobuf::uint8* DeterministicParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.DeterministicParams)
  // optional double offered_load = 1;
  if (this->offered_load() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->offered_load(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.DeterministicParams)
  return target;
}

int DeterministicParams::ByteSize() const {
  int total_size = 0;

  // optional double offered_load = 1;
  if (this->offered_load() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeterministicParams::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeterministicParams* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeterministicParams>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeterministicParams::MergeFrom(const DeterministicParams& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.offered_load() != 0) {
    set_offered_load(from.offered_load());
  }
}

void DeterministicParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeterministicParams::CopyFrom(const DeterministicParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeterministicParams::IsInitialized() const {

  return true;
}

void DeterministicParams::Swap(DeterministicParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeterministicParams::InternalSwap(DeterministicParams* other) {
  std::swap(offered_load_, other->offered_load_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeterministicParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeterministicParams_descriptor_;
  metadata.reflection = DeterministicParams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeterministicParams

// optional double offered_load = 1;
void DeterministicParams::clear_offered_load() {
  offered_load_ = 0;
}
 double DeterministicParams::offered_load() const {
  // @@protoc_insertion_point(field_get:grpc.testing.DeterministicParams.offered_load)
  return offered_load_;
}
 void DeterministicParams::set_offered_load(double value) {
  
  offered_load_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.DeterministicParams.offered_load)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ParetoParams::kInterarrivalBaseFieldNumber;
const int ParetoParams::kAlphaFieldNumber;
#endif  // !_MSC_VER

ParetoParams::ParetoParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ParetoParams)
}

void ParetoParams::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ParetoParams::ParetoParams(const ParetoParams& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ParetoParams)
}

void ParetoParams::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  interarrival_base_ = 0;
  alpha_ = 0;
}

ParetoParams::~ParetoParams() {
  // @@protoc_insertion_point(destructor:grpc.testing.ParetoParams)
  SharedDtor();
}

void ParetoParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParetoParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParetoParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParetoParams_descriptor_;
}

const ParetoParams& ParetoParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

ParetoParams* ParetoParams::default_instance_ = NULL;

ParetoParams* ParetoParams::New(::google::protobuf::Arena* arena) const {
  ParetoParams* n = new ParetoParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParetoParams::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ParetoParams*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(interarrival_base_, alpha_);

#undef ZR_HELPER_
#undef ZR_

}

bool ParetoParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ParetoParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double interarrival_base = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interarrival_base_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_alpha;
        break;
      }

      // optional double alpha = 2;
      case 2: {
        if (tag == 17) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alpha_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ParetoParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ParetoParams)
  return false;
#undef DO_
}

void ParetoParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ParetoParams)
  // optional double interarrival_base = 1;
  if (this->interarrival_base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->interarrival_base(), output);
  }

  // optional double alpha = 2;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->alpha(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ParetoParams)
}

::google::protobuf::uint8* ParetoParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ParetoParams)
  // optional double interarrival_base = 1;
  if (this->interarrival_base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->interarrival_base(), target);
  }

  // optional double alpha = 2;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->alpha(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ParetoParams)
  return target;
}

int ParetoParams::ByteSize() const {
  int total_size = 0;

  // optional double interarrival_base = 1;
  if (this->interarrival_base() != 0) {
    total_size += 1 + 8;
  }

  // optional double alpha = 2;
  if (this->alpha() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParetoParams::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ParetoParams* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ParetoParams>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParetoParams::MergeFrom(const ParetoParams& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.interarrival_base() != 0) {
    set_interarrival_base(from.interarrival_base());
  }
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
}

void ParetoParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParetoParams::CopyFrom(const ParetoParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParetoParams::IsInitialized() const {

  return true;
}

void ParetoParams::Swap(ParetoParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParetoParams::InternalSwap(ParetoParams* other) {
  std::swap(interarrival_base_, other->interarrival_base_);
  std::swap(alpha_, other->alpha_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParetoParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParetoParams_descriptor_;
  metadata.reflection = ParetoParams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParetoParams

// optional double interarrival_base = 1;
void ParetoParams::clear_interarrival_base() {
  interarrival_base_ = 0;
}
 double ParetoParams::interarrival_base() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ParetoParams.interarrival_base)
  return interarrival_base_;
}
 void ParetoParams::set_interarrival_base(double value) {
  
  interarrival_base_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ParetoParams.interarrival_base)
}

// optional double alpha = 2;
void ParetoParams::clear_alpha() {
  alpha_ = 0;
}
 double ParetoParams::alpha() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ParetoParams.alpha)
  return alpha_;
}
 void ParetoParams::set_alpha(double value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ParetoParams.alpha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LoadParams::kPoissonFieldNumber;
const int LoadParams::kUniformFieldNumber;
const int LoadParams::kDetermFieldNumber;
const int LoadParams::kParetoFieldNumber;
#endif  // !_MSC_VER

LoadParams::LoadParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.LoadParams)
}

void LoadParams::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  LoadParams_default_oneof_instance_->poisson_ = const_cast< ::grpc::testing::PoissonParams*>(&::grpc::testing::PoissonParams::default_instance());
  LoadParams_default_oneof_instance_->uniform_ = const_cast< ::grpc::testing::UniformParams*>(&::grpc::testing::UniformParams::default_instance());
  LoadParams_default_oneof_instance_->determ_ = const_cast< ::grpc::testing::DeterministicParams*>(&::grpc::testing::DeterministicParams::default_instance());
  LoadParams_default_oneof_instance_->pareto_ = const_cast< ::grpc::testing::ParetoParams*>(&::grpc::testing::ParetoParams::default_instance());
}

LoadParams::LoadParams(const LoadParams& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.LoadParams)
}

void LoadParams::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_load();
}

LoadParams::~LoadParams() {
  // @@protoc_insertion_point(destructor:grpc.testing.LoadParams)
  SharedDtor();
}

void LoadParams::SharedDtor() {
  if (has_load()) {
    clear_load();
  }
  if (this != default_instance_) {
  }
}

void LoadParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadParams_descriptor_;
}

const LoadParams& LoadParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

LoadParams* LoadParams::default_instance_ = NULL;

LoadParams* LoadParams::New(::google::protobuf::Arena* arena) const {
  LoadParams* n = new LoadParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadParams::clear_load() {
  switch(load_case()) {
    case kPoisson: {
      delete load_.poisson_;
      break;
    }
    case kUniform: {
      delete load_.uniform_;
      break;
    }
    case kDeterm: {
      delete load_.determ_;
      break;
    }
    case kPareto: {
      delete load_.pareto_;
      break;
    }
    case LOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOAD_NOT_SET;
}


void LoadParams::Clear() {
  clear_load();
}

bool LoadParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.LoadParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .grpc.testing.PoissonParams poisson = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poisson()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uniform;
        break;
      }

      // optional .grpc.testing.UniformParams uniform = 2;
      case 2: {
        if (tag == 18) {
         parse_uniform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uniform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_determ;
        break;
      }

      // optional .grpc.testing.DeterministicParams determ = 3;
      case 3: {
        if (tag == 26) {
         parse_determ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_determ()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pareto;
        break;
      }

      // optional .grpc.testing.ParetoParams pareto = 4;
      case 4: {
        if (tag == 34) {
         parse_pareto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pareto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.LoadParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.LoadParams)
  return false;
#undef DO_
}

void LoadParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.LoadParams)
  // optional .grpc.testing.PoissonParams poisson = 1;
  if (has_poisson()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *load_.poisson_, output);
  }

  // optional .grpc.testing.UniformParams uniform = 2;
  if (has_uniform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *load_.uniform_, output);
  }

  // optional .grpc.testing.DeterministicParams determ = 3;
  if (has_determ()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *load_.determ_, output);
  }

  // optional .grpc.testing.ParetoParams pareto = 4;
  if (has_pareto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *load_.pareto_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.LoadParams)
}

::google::protobuf::uint8* LoadParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.LoadParams)
  // optional .grpc.testing.PoissonParams poisson = 1;
  if (has_poisson()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *load_.poisson_, target);
  }

  // optional .grpc.testing.UniformParams uniform = 2;
  if (has_uniform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *load_.uniform_, target);
  }

  // optional .grpc.testing.DeterministicParams determ = 3;
  if (has_determ()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *load_.determ_, target);
  }

  // optional .grpc.testing.ParetoParams pareto = 4;
  if (has_pareto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *load_.pareto_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.LoadParams)
  return target;
}

int LoadParams::ByteSize() const {
  int total_size = 0;

  switch (load_case()) {
    // optional .grpc.testing.PoissonParams poisson = 1;
    case kPoisson: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *load_.poisson_);
      break;
    }
    // optional .grpc.testing.UniformParams uniform = 2;
    case kUniform: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *load_.uniform_);
      break;
    }
    // optional .grpc.testing.DeterministicParams determ = 3;
    case kDeterm: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *load_.determ_);
      break;
    }
    // optional .grpc.testing.ParetoParams pareto = 4;
    case kPareto: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *load_.pareto_);
      break;
    }
    case LOAD_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadParams::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoadParams* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadParams>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadParams::MergeFrom(const LoadParams& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.load_case()) {
    case kPoisson: {
      mutable_poisson()->::grpc::testing::PoissonParams::MergeFrom(from.poisson());
      break;
    }
    case kUniform: {
      mutable_uniform()->::grpc::testing::UniformParams::MergeFrom(from.uniform());
      break;
    }
    case kDeterm: {
      mutable_determ()->::grpc::testing::DeterministicParams::MergeFrom(from.determ());
      break;
    }
    case kPareto: {
      mutable_pareto()->::grpc::testing::ParetoParams::MergeFrom(from.pareto());
      break;
    }
    case LOAD_NOT_SET: {
      break;
    }
  }
}

void LoadParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadParams::CopyFrom(const LoadParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadParams::IsInitialized() const {

  return true;
}

void LoadParams::Swap(LoadParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadParams::InternalSwap(LoadParams* other) {
  std::swap(load_, other->load_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadParams_descriptor_;
  metadata.reflection = LoadParams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadParams

// optional .grpc.testing.PoissonParams poisson = 1;
bool LoadParams::has_poisson() const {
  return load_case() == kPoisson;
}
void LoadParams::set_has_poisson() {
  _oneof_case_[0] = kPoisson;
}
void LoadParams::clear_poisson() {
  if (has_poisson()) {
    delete load_.poisson_;
    clear_has_load();
  }
}
 const ::grpc::testing::PoissonParams& LoadParams::poisson() const {
  // @@protoc_insertion_point(field_get:grpc.testing.LoadParams.poisson)
  return has_poisson() ? *load_.poisson_
                      : ::grpc::testing::PoissonParams::default_instance();
}
 ::grpc::testing::PoissonParams* LoadParams::mutable_poisson() {
  if (!has_poisson()) {
    clear_load();
    set_has_poisson();
    load_.poisson_ = new ::grpc::testing::PoissonParams;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.LoadParams.poisson)
  return load_.poisson_;
}
 ::grpc::testing::PoissonParams* LoadParams::release_poisson() {
  if (has_poisson()) {
    clear_has_load();
    ::grpc::testing::PoissonParams* temp = load_.poisson_;
    load_.poisson_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void LoadParams::set_allocated_poisson(::grpc::testing::PoissonParams* poisson) {
  clear_load();
  if (poisson) {
    set_has_poisson();
    load_.poisson_ = poisson;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.LoadParams.poisson)
}

// optional .grpc.testing.UniformParams uniform = 2;
bool LoadParams::has_uniform() const {
  return load_case() == kUniform;
}
void LoadParams::set_has_uniform() {
  _oneof_case_[0] = kUniform;
}
void LoadParams::clear_uniform() {
  if (has_uniform()) {
    delete load_.uniform_;
    clear_has_load();
  }
}
 const ::grpc::testing::UniformParams& LoadParams::uniform() const {
  // @@protoc_insertion_point(field_get:grpc.testing.LoadParams.uniform)
  return has_uniform() ? *load_.uniform_
                      : ::grpc::testing::UniformParams::default_instance();
}
 ::grpc::testing::UniformParams* LoadParams::mutable_uniform() {
  if (!has_uniform()) {
    clear_load();
    set_has_uniform();
    load_.uniform_ = new ::grpc::testing::UniformParams;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.LoadParams.uniform)
  return load_.uniform_;
}
 ::grpc::testing::UniformParams* LoadParams::release_uniform() {
  if (has_uniform()) {
    clear_has_load();
    ::grpc::testing::UniformParams* temp = load_.uniform_;
    load_.uniform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void LoadParams::set_allocated_uniform(::grpc::testing::UniformParams* uniform) {
  clear_load();
  if (uniform) {
    set_has_uniform();
    load_.uniform_ = uniform;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.LoadParams.uniform)
}

// optional .grpc.testing.DeterministicParams determ = 3;
bool LoadParams::has_determ() const {
  return load_case() == kDeterm;
}
void LoadParams::set_has_determ() {
  _oneof_case_[0] = kDeterm;
}
void LoadParams::clear_determ() {
  if (has_determ()) {
    delete load_.determ_;
    clear_has_load();
  }
}
 const ::grpc::testing::DeterministicParams& LoadParams::determ() const {
  // @@protoc_insertion_point(field_get:grpc.testing.LoadParams.determ)
  return has_determ() ? *load_.determ_
                      : ::grpc::testing::DeterministicParams::default_instance();
}
 ::grpc::testing::DeterministicParams* LoadParams::mutable_determ() {
  if (!has_determ()) {
    clear_load();
    set_has_determ();
    load_.determ_ = new ::grpc::testing::DeterministicParams;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.LoadParams.determ)
  return load_.determ_;
}
 ::grpc::testing::DeterministicParams* LoadParams::release_determ() {
  if (has_determ()) {
    clear_has_load();
    ::grpc::testing::DeterministicParams* temp = load_.determ_;
    load_.determ_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void LoadParams::set_allocated_determ(::grpc::testing::DeterministicParams* determ) {
  clear_load();
  if (determ) {
    set_has_determ();
    load_.determ_ = determ;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.LoadParams.determ)
}

// optional .grpc.testing.ParetoParams pareto = 4;
bool LoadParams::has_pareto() const {
  return load_case() == kPareto;
}
void LoadParams::set_has_pareto() {
  _oneof_case_[0] = kPareto;
}
void LoadParams::clear_pareto() {
  if (has_pareto()) {
    delete load_.pareto_;
    clear_has_load();
  }
}
 const ::grpc::testing::ParetoParams& LoadParams::pareto() const {
  // @@protoc_insertion_point(field_get:grpc.testing.LoadParams.pareto)
  return has_pareto() ? *load_.pareto_
                      : ::grpc::testing::ParetoParams::default_instance();
}
 ::grpc::testing::ParetoParams* LoadParams::mutable_pareto() {
  if (!has_pareto()) {
    clear_load();
    set_has_pareto();
    load_.pareto_ = new ::grpc::testing::ParetoParams;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.LoadParams.pareto)
  return load_.pareto_;
}
 ::grpc::testing::ParetoParams* LoadParams::release_pareto() {
  if (has_pareto()) {
    clear_has_load();
    ::grpc::testing::ParetoParams* temp = load_.pareto_;
    load_.pareto_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void LoadParams::set_allocated_pareto(::grpc::testing::ParetoParams* pareto) {
  clear_load();
  if (pareto) {
    set_has_pareto();
    load_.pareto_ = pareto;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.LoadParams.pareto)
}

bool LoadParams::has_load() const {
  return load_case() != LOAD_NOT_SET;
}
void LoadParams::clear_has_load() {
  _oneof_case_[0] = LOAD_NOT_SET;
}
LoadParams::LoadCase LoadParams::load_case() const {
  return LoadParams::LoadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ClientConfig::kServerTargetsFieldNumber;
const int ClientConfig::kClientTypeFieldNumber;
const int ClientConfig::kEnableSslFieldNumber;
const int ClientConfig::kOutstandingRpcsPerChannelFieldNumber;
const int ClientConfig::kClientChannelsFieldNumber;
const int ClientConfig::kPayloadSizeFieldNumber;
const int ClientConfig::kAsyncClientThreadsFieldNumber;
const int ClientConfig::kRpcTypeFieldNumber;
const int ClientConfig::kHostFieldNumber;
const int ClientConfig::kLoadTypeFieldNumber;
const int ClientConfig::kLoadParamsFieldNumber;
#endif  // !_MSC_VER

ClientConfig::ClientConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ClientConfig)
}

void ClientConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  load_params_ = const_cast< ::grpc::testing::LoadParams*>(&::grpc::testing::LoadParams::default_instance());
}

ClientConfig::ClientConfig(const ClientConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ClientConfig)
}

void ClientConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_type_ = 0;
  enable_ssl_ = false;
  outstanding_rpcs_per_channel_ = 0;
  client_channels_ = 0;
  payload_size_ = 0;
  async_client_threads_ = 0;
  rpc_type_ = 0;
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  load_type_ = 0;
  load_params_ = NULL;
}

ClientConfig::~ClientConfig() {
  // @@protoc_insertion_point(destructor:grpc.testing.ClientConfig)
  SharedDtor();
}

void ClientConfig::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete load_params_;
  }
}

void ClientConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientConfig_descriptor_;
}

const ClientConfig& ClientConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

ClientConfig* ClientConfig::default_instance_ = NULL;

ClientConfig* ClientConfig::New(::google::protobuf::Arena* arena) const {
  ClientConfig* n = new ClientConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientConfig::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClientConfig*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(client_type_, async_client_threads_);
  rpc_type_ = 0;
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  load_type_ = 0;
  if (GetArenaNoVirtual() == NULL && load_params_ != NULL) delete load_params_;
  load_params_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  server_targets_.Clear();
}

bool ClientConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ClientConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string server_targets = 1;
      case 1: {
        if (tag == 10) {
         parse_server_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_server_targets()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_targets(this->server_targets_size() - 1).data(),
            this->server_targets(this->server_targets_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.ClientConfig.server_targets");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_server_targets;
        if (input->ExpectTag(16)) goto parse_client_type;
        break;
      }

      // optional .grpc.testing.ClientType client_type = 2;
      case 2: {
        if (tag == 16) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_client_type(static_cast< ::grpc::testing::ClientType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enable_ssl;
        break;
      }

      // optional bool enable_ssl = 3;
      case 3: {
        if (tag == 24) {
         parse_enable_ssl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ssl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_outstanding_rpcs_per_channel;
        break;
      }

      // optional int32 outstanding_rpcs_per_channel = 4;
      case 4: {
        if (tag == 32) {
         parse_outstanding_rpcs_per_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outstanding_rpcs_per_channel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_client_channels;
        break;
      }

      // optional int32 client_channels = 5;
      case 5: {
        if (tag == 40) {
         parse_client_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_channels_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_payload_size;
        break;
      }

      // optional int32 payload_size = 6;
      case 6: {
        if (tag == 48) {
         parse_payload_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payload_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_async_client_threads;
        break;
      }

      // optional int32 async_client_threads = 7;
      case 7: {
        if (tag == 56) {
         parse_async_client_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &async_client_threads_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rpc_type;
        break;
      }

      // optional .grpc.testing.RpcType rpc_type = 8;
      case 8: {
        if (tag == 64) {
         parse_rpc_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rpc_type(static_cast< ::grpc::testing::RpcType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_host;
        break;
      }

      // optional string host = 9;
      case 9: {
        if (tag == 74) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.ClientConfig.host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_load_type;
        break;
      }

      // optional .grpc.testing.LoadType load_type = 10;
      case 10: {
        if (tag == 80) {
         parse_load_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_load_type(static_cast< ::grpc::testing::LoadType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_load_params;
        break;
      }

      // optional .grpc.testing.LoadParams load_params = 11;
      case 11: {
        if (tag == 90) {
         parse_load_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ClientConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ClientConfig)
  return false;
#undef DO_
}

void ClientConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ClientConfig)
  // repeated string server_targets = 1;
  for (int i = 0; i < this->server_targets_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->server_targets(i).data(), this->server_targets(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "grpc.testing.ClientConfig.server_targets");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_targets(i), output);
  }

  // optional .grpc.testing.ClientType client_type = 2;
  if (this->client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->client_type(), output);
  }

  // optional bool enable_ssl = 3;
  if (this->enable_ssl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_ssl(), output);
  }

  // optional int32 outstanding_rpcs_per_channel = 4;
  if (this->outstanding_rpcs_per_channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outstanding_rpcs_per_channel(), output);
  }

  // optional int32 client_channels = 5;
  if (this->client_channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->client_channels(), output);
  }

  // optional int32 payload_size = 6;
  if (this->payload_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->payload_size(), output);
  }

  // optional int32 async_client_threads = 7;
  if (this->async_client_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->async_client_threads(), output);
  }

  // optional .grpc.testing.RpcType rpc_type = 8;
  if (this->rpc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->rpc_type(), output);
  }

  // optional string host = 9;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.ClientConfig.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->host(), output);
  }

  // optional .grpc.testing.LoadType load_type = 10;
  if (this->load_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->load_type(), output);
  }

  // optional .grpc.testing.LoadParams load_params = 11;
  if (this->has_load_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->load_params_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ClientConfig)
}

::google::protobuf::uint8* ClientConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ClientConfig)
  // repeated string server_targets = 1;
  for (int i = 0; i < this->server_targets_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_targets(i).data(), this->server_targets(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.ClientConfig.server_targets");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->server_targets(i), target);
  }

  // optional .grpc.testing.ClientType client_type = 2;
  if (this->client_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->client_type(), target);
  }

  // optional bool enable_ssl = 3;
  if (this->enable_ssl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_ssl(), target);
  }

  // optional int32 outstanding_rpcs_per_channel = 4;
  if (this->outstanding_rpcs_per_channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outstanding_rpcs_per_channel(), target);
  }

  // optional int32 client_channels = 5;
  if (this->client_channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->client_channels(), target);
  }

  // optional int32 payload_size = 6;
  if (this->payload_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->payload_size(), target);
  }

  // optional int32 async_client_threads = 7;
  if (this->async_client_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->async_client_threads(), target);
  }

  // optional .grpc.testing.RpcType rpc_type = 8;
  if (this->rpc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->rpc_type(), target);
  }

  // optional string host = 9;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.ClientConfig.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->host(), target);
  }

  // optional .grpc.testing.LoadType load_type = 10;
  if (this->load_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->load_type(), target);
  }

  // optional .grpc.testing.LoadParams load_params = 11;
  if (this->has_load_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->load_params_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ClientConfig)
  return target;
}

int ClientConfig::ByteSize() const {
  int total_size = 0;

  // optional .grpc.testing.ClientType client_type = 2;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
  }

  // optional bool enable_ssl = 3;
  if (this->enable_ssl() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 outstanding_rpcs_per_channel = 4;
  if (this->outstanding_rpcs_per_channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->outstanding_rpcs_per_channel());
  }

  // optional int32 client_channels = 5;
  if (this->client_channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->client_channels());
  }

  // optional int32 payload_size = 6;
  if (this->payload_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->payload_size());
  }

  // optional int32 async_client_threads = 7;
  if (this->async_client_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->async_client_threads());
  }

  // optional .grpc.testing.RpcType rpc_type = 8;
  if (this->rpc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rpc_type());
  }

  // optional string host = 9;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // optional .grpc.testing.LoadType load_type = 10;
  if (this->load_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->load_type());
  }

  // optional .grpc.testing.LoadParams load_params = 11;
  if (this->has_load_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->load_params_);
  }

  // repeated string server_targets = 1;
  total_size += 1 * this->server_targets_size();
  for (int i = 0; i < this->server_targets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->server_targets(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientConfig::MergeFrom(const ClientConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  server_targets_.MergeFrom(from.server_targets_);
  if (from.client_type() != 0) {
    set_client_type(from.client_type());
  }
  if (from.enable_ssl() != 0) {
    set_enable_ssl(from.enable_ssl());
  }
  if (from.outstanding_rpcs_per_channel() != 0) {
    set_outstanding_rpcs_per_channel(from.outstanding_rpcs_per_channel());
  }
  if (from.client_channels() != 0) {
    set_client_channels(from.client_channels());
  }
  if (from.payload_size() != 0) {
    set_payload_size(from.payload_size());
  }
  if (from.async_client_threads() != 0) {
    set_async_client_threads(from.async_client_threads());
  }
  if (from.rpc_type() != 0) {
    set_rpc_type(from.rpc_type());
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.load_type() != 0) {
    set_load_type(from.load_type());
  }
  if (from.has_load_params()) {
    mutable_load_params()->::grpc::testing::LoadParams::MergeFrom(from.load_params());
  }
}

void ClientConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientConfig::CopyFrom(const ClientConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConfig::IsInitialized() const {

  return true;
}

void ClientConfig::Swap(ClientConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientConfig::InternalSwap(ClientConfig* other) {
  server_targets_.UnsafeArenaSwap(&other->server_targets_);
  std::swap(client_type_, other->client_type_);
  std::swap(enable_ssl_, other->enable_ssl_);
  std::swap(outstanding_rpcs_per_channel_, other->outstanding_rpcs_per_channel_);
  std::swap(client_channels_, other->client_channels_);
  std::swap(payload_size_, other->payload_size_);
  std::swap(async_client_threads_, other->async_client_threads_);
  std::swap(rpc_type_, other->rpc_type_);
  host_.Swap(&other->host_);
  std::swap(load_type_, other->load_type_);
  std::swap(load_params_, other->load_params_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientConfig_descriptor_;
  metadata.reflection = ClientConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientConfig

// repeated string server_targets = 1;
int ClientConfig::server_targets_size() const {
  return server_targets_.size();
}
void ClientConfig::clear_server_targets() {
  server_targets_.Clear();
}
 const ::std::string& ClientConfig::server_targets(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.server_targets)
  return server_targets_.Get(index);
}
 ::std::string* ClientConfig::mutable_server_targets(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientConfig.server_targets)
  return server_targets_.Mutable(index);
}
 void ClientConfig::set_server_targets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.server_targets)
  server_targets_.Mutable(index)->assign(value);
}
 void ClientConfig::set_server_targets(int index, const char* value) {
  server_targets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grpc.testing.ClientConfig.server_targets)
}
 void ClientConfig::set_server_targets(int index, const char* value, size_t size) {
  server_targets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.ClientConfig.server_targets)
}
 ::std::string* ClientConfig::add_server_targets() {
  return server_targets_.Add();
}
 void ClientConfig::add_server_targets(const ::std::string& value) {
  server_targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grpc.testing.ClientConfig.server_targets)
}
 void ClientConfig::add_server_targets(const char* value) {
  server_targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grpc.testing.ClientConfig.server_targets)
}
 void ClientConfig::add_server_targets(const char* value, size_t size) {
  server_targets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grpc.testing.ClientConfig.server_targets)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClientConfig::server_targets() const {
  // @@protoc_insertion_point(field_list:grpc.testing.ClientConfig.server_targets)
  return server_targets_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ClientConfig::mutable_server_targets() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.ClientConfig.server_targets)
  return &server_targets_;
}

// optional .grpc.testing.ClientType client_type = 2;
void ClientConfig::clear_client_type() {
  client_type_ = 0;
}
 ::grpc::testing::ClientType ClientConfig::client_type() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.client_type)
  return static_cast< ::grpc::testing::ClientType >(client_type_);
}
 void ClientConfig::set_client_type(::grpc::testing::ClientType value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.client_type)
}

// optional bool enable_ssl = 3;
void ClientConfig::clear_enable_ssl() {
  enable_ssl_ = false;
}
 bool ClientConfig::enable_ssl() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.enable_ssl)
  return enable_ssl_;
}
 void ClientConfig::set_enable_ssl(bool value) {
  
  enable_ssl_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.enable_ssl)
}

// optional int32 outstanding_rpcs_per_channel = 4;
void ClientConfig::clear_outstanding_rpcs_per_channel() {
  outstanding_rpcs_per_channel_ = 0;
}
 ::google::protobuf::int32 ClientConfig::outstanding_rpcs_per_channel() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.outstanding_rpcs_per_channel)
  return outstanding_rpcs_per_channel_;
}
 void ClientConfig::set_outstanding_rpcs_per_channel(::google::protobuf::int32 value) {
  
  outstanding_rpcs_per_channel_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.outstanding_rpcs_per_channel)
}

// optional int32 client_channels = 5;
void ClientConfig::clear_client_channels() {
  client_channels_ = 0;
}
 ::google::protobuf::int32 ClientConfig::client_channels() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.client_channels)
  return client_channels_;
}
 void ClientConfig::set_client_channels(::google::protobuf::int32 value) {
  
  client_channels_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.client_channels)
}

// optional int32 payload_size = 6;
void ClientConfig::clear_payload_size() {
  payload_size_ = 0;
}
 ::google::protobuf::int32 ClientConfig::payload_size() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.payload_size)
  return payload_size_;
}
 void ClientConfig::set_payload_size(::google::protobuf::int32 value) {
  
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.payload_size)
}

// optional int32 async_client_threads = 7;
void ClientConfig::clear_async_client_threads() {
  async_client_threads_ = 0;
}
 ::google::protobuf::int32 ClientConfig::async_client_threads() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.async_client_threads)
  return async_client_threads_;
}
 void ClientConfig::set_async_client_threads(::google::protobuf::int32 value) {
  
  async_client_threads_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.async_client_threads)
}

// optional .grpc.testing.RpcType rpc_type = 8;
void ClientConfig::clear_rpc_type() {
  rpc_type_ = 0;
}
 ::grpc::testing::RpcType ClientConfig::rpc_type() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.rpc_type)
  return static_cast< ::grpc::testing::RpcType >(rpc_type_);
}
 void ClientConfig::set_rpc_type(::grpc::testing::RpcType value) {
  
  rpc_type_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.rpc_type)
}

// optional string host = 9;
void ClientConfig::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClientConfig::host() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.host)
  return host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientConfig::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.host)
}
 void ClientConfig::set_host(const char* value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.ClientConfig.host)
}
 void ClientConfig::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.ClientConfig.host)
}
 ::std::string* ClientConfig::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientConfig.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientConfig::release_host() {
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientConfig::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientConfig.host)
}

// optional .grpc.testing.LoadType load_type = 10;
void ClientConfig::clear_load_type() {
  load_type_ = 0;
}
 ::grpc::testing::LoadType ClientConfig::load_type() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.load_type)
  return static_cast< ::grpc::testing::LoadType >(load_type_);
}
 void ClientConfig::set_load_type(::grpc::testing::LoadType value) {
  
  load_type_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientConfig.load_type)
}

// optional .grpc.testing.LoadParams load_params = 11;
bool ClientConfig::has_load_params() const {
  return !_is_default_instance_ && load_params_ != NULL;
}
void ClientConfig::clear_load_params() {
  if (GetArenaNoVirtual() == NULL && load_params_ != NULL) delete load_params_;
  load_params_ = NULL;
}
 const ::grpc::testing::LoadParams& ClientConfig::load_params() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientConfig.load_params)
  return load_params_ != NULL ? *load_params_ : *default_instance_->load_params_;
}
 ::grpc::testing::LoadParams* ClientConfig::mutable_load_params() {
  
  if (load_params_ == NULL) {
    load_params_ = new ::grpc::testing::LoadParams;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientConfig.load_params)
  return load_params_;
}
 ::grpc::testing::LoadParams* ClientConfig::release_load_params() {
  
  ::grpc::testing::LoadParams* temp = load_params_;
  load_params_ = NULL;
  return temp;
}
 void ClientConfig::set_allocated_load_params(::grpc::testing::LoadParams* load_params) {
  delete load_params_;
  load_params_ = load_params;
  if (load_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientConfig.load_params)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Mark::Mark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.Mark)
}

void Mark::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Mark::Mark(const Mark& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.Mark)
}

void Mark::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Mark::~Mark() {
  // @@protoc_insertion_point(destructor:grpc.testing.Mark)
  SharedDtor();
}

void Mark::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mark_descriptor_;
}

const Mark& Mark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

Mark* Mark::default_instance_ = NULL;

Mark* Mark::New(::google::protobuf::Arena* arena) const {
  Mark* n = new Mark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mark::Clear() {
}

bool Mark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.Mark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.Mark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.Mark)
  return false;
#undef DO_
}

void Mark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.Mark)
  // @@protoc_insertion_point(serialize_end:grpc.testing.Mark)
}

::google::protobuf::uint8* Mark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.Mark)
  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.Mark)
  return target;
}

int Mark::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mark::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mark* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mark>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mark::MergeFrom(const Mark& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void Mark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mark::CopyFrom(const Mark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mark::IsInitialized() const {

  return true;
}

void Mark::Swap(Mark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mark::InternalSwap(Mark* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mark_descriptor_;
  metadata.reflection = Mark_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mark

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ClientArgs::kSetupFieldNumber;
const int ClientArgs::kMarkFieldNumber;
#endif  // !_MSC_VER

ClientArgs::ClientArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ClientArgs)
}

void ClientArgs::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ClientArgs_default_oneof_instance_->setup_ = const_cast< ::grpc::testing::ClientConfig*>(&::grpc::testing::ClientConfig::default_instance());
  ClientArgs_default_oneof_instance_->mark_ = const_cast< ::grpc::testing::Mark*>(&::grpc::testing::Mark::default_instance());
}

ClientArgs::ClientArgs(const ClientArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ClientArgs)
}

void ClientArgs::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_argtype();
}

ClientArgs::~ClientArgs() {
  // @@protoc_insertion_point(destructor:grpc.testing.ClientArgs)
  SharedDtor();
}

void ClientArgs::SharedDtor() {
  if (has_argtype()) {
    clear_argtype();
  }
  if (this != default_instance_) {
  }
}

void ClientArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientArgs_descriptor_;
}

const ClientArgs& ClientArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

ClientArgs* ClientArgs::default_instance_ = NULL;

ClientArgs* ClientArgs::New(::google::protobuf::Arena* arena) const {
  ClientArgs* n = new ClientArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientArgs::clear_argtype() {
  switch(argtype_case()) {
    case kSetup: {
      delete argtype_.setup_;
      break;
    }
    case kMark: {
      delete argtype_.mark_;
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ARGTYPE_NOT_SET;
}


void ClientArgs::Clear() {
  clear_argtype();
}

bool ClientArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ClientArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .grpc.testing.ClientConfig setup = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mark;
        break;
      }

      // optional .grpc.testing.Mark mark = 2;
      case 2: {
        if (tag == 18) {
         parse_mark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ClientArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ClientArgs)
  return false;
#undef DO_
}

void ClientArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ClientArgs)
  // optional .grpc.testing.ClientConfig setup = 1;
  if (has_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *argtype_.setup_, output);
  }

  // optional .grpc.testing.Mark mark = 2;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *argtype_.mark_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ClientArgs)
}

::google::protobuf::uint8* ClientArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ClientArgs)
  // optional .grpc.testing.ClientConfig setup = 1;
  if (has_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *argtype_.setup_, target);
  }

  // optional .grpc.testing.Mark mark = 2;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *argtype_.mark_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ClientArgs)
  return target;
}

int ClientArgs::ByteSize() const {
  int total_size = 0;

  switch (argtype_case()) {
    // optional .grpc.testing.ClientConfig setup = 1;
    case kSetup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *argtype_.setup_);
      break;
    }
    // optional .grpc.testing.Mark mark = 2;
    case kMark: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *argtype_.mark_);
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientArgs::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientArgs>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientArgs::MergeFrom(const ClientArgs& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.argtype_case()) {
    case kSetup: {
      mutable_setup()->::grpc::testing::ClientConfig::MergeFrom(from.setup());
      break;
    }
    case kMark: {
      mutable_mark()->::grpc::testing::Mark::MergeFrom(from.mark());
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
}

void ClientArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientArgs::CopyFrom(const ClientArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientArgs::IsInitialized() const {

  return true;
}

void ClientArgs::Swap(ClientArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientArgs::InternalSwap(ClientArgs* other) {
  std::swap(argtype_, other->argtype_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientArgs_descriptor_;
  metadata.reflection = ClientArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientArgs

// optional .grpc.testing.ClientConfig setup = 1;
bool ClientArgs::has_setup() const {
  return argtype_case() == kSetup;
}
void ClientArgs::set_has_setup() {
  _oneof_case_[0] = kSetup;
}
void ClientArgs::clear_setup() {
  if (has_setup()) {
    delete argtype_.setup_;
    clear_has_argtype();
  }
}
 const ::grpc::testing::ClientConfig& ClientArgs::setup() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientArgs.setup)
  return has_setup() ? *argtype_.setup_
                      : ::grpc::testing::ClientConfig::default_instance();
}
 ::grpc::testing::ClientConfig* ClientArgs::mutable_setup() {
  if (!has_setup()) {
    clear_argtype();
    set_has_setup();
    argtype_.setup_ = new ::grpc::testing::ClientConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientArgs.setup)
  return argtype_.setup_;
}
 ::grpc::testing::ClientConfig* ClientArgs::release_setup() {
  if (has_setup()) {
    clear_has_argtype();
    ::grpc::testing::ClientConfig* temp = argtype_.setup_;
    argtype_.setup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ClientArgs::set_allocated_setup(::grpc::testing::ClientConfig* setup) {
  clear_argtype();
  if (setup) {
    set_has_setup();
    argtype_.setup_ = setup;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientArgs.setup)
}

// optional .grpc.testing.Mark mark = 2;
bool ClientArgs::has_mark() const {
  return argtype_case() == kMark;
}
void ClientArgs::set_has_mark() {
  _oneof_case_[0] = kMark;
}
void ClientArgs::clear_mark() {
  if (has_mark()) {
    delete argtype_.mark_;
    clear_has_argtype();
  }
}
 const ::grpc::testing::Mark& ClientArgs::mark() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientArgs.mark)
  return has_mark() ? *argtype_.mark_
                      : ::grpc::testing::Mark::default_instance();
}
 ::grpc::testing::Mark* ClientArgs::mutable_mark() {
  if (!has_mark()) {
    clear_argtype();
    set_has_mark();
    argtype_.mark_ = new ::grpc::testing::Mark;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientArgs.mark)
  return argtype_.mark_;
}
 ::grpc::testing::Mark* ClientArgs::release_mark() {
  if (has_mark()) {
    clear_has_argtype();
    ::grpc::testing::Mark* temp = argtype_.mark_;
    argtype_.mark_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ClientArgs::set_allocated_mark(::grpc::testing::Mark* mark) {
  clear_argtype();
  if (mark) {
    set_has_mark();
    argtype_.mark_ = mark;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientArgs.mark)
}

bool ClientArgs::has_argtype() const {
  return argtype_case() != ARGTYPE_NOT_SET;
}
void ClientArgs::clear_has_argtype() {
  _oneof_case_[0] = ARGTYPE_NOT_SET;
}
ClientArgs::ArgtypeCase ClientArgs::argtype_case() const {
  return ClientArgs::ArgtypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ClientStats::kLatenciesFieldNumber;
const int ClientStats::kTimeElapsedFieldNumber;
const int ClientStats::kTimeUserFieldNumber;
const int ClientStats::kTimeSystemFieldNumber;
#endif  // !_MSC_VER

ClientStats::ClientStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ClientStats)
}

void ClientStats::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  latencies_ = const_cast< ::grpc::testing::HistogramData*>(&::grpc::testing::HistogramData::default_instance());
}

ClientStats::ClientStats(const ClientStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ClientStats)
}

void ClientStats::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  latencies_ = NULL;
  time_elapsed_ = 0;
  time_user_ = 0;
  time_system_ = 0;
}

ClientStats::~ClientStats() {
  // @@protoc_insertion_point(destructor:grpc.testing.ClientStats)
  SharedDtor();
}

void ClientStats::SharedDtor() {
  if (this != default_instance_) {
    delete latencies_;
  }
}

void ClientStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientStats_descriptor_;
}

const ClientStats& ClientStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

ClientStats* ClientStats::default_instance_ = NULL;

ClientStats* ClientStats::New(::google::protobuf::Arena* arena) const {
  ClientStats* n = new ClientStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientStats::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClientStats*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_elapsed_, time_system_);
  if (GetArenaNoVirtual() == NULL && latencies_ != NULL) delete latencies_;
  latencies_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ClientStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ClientStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .grpc.testing.HistogramData latencies = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latencies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_time_elapsed;
        break;
      }

      // optional double time_elapsed = 2;
      case 2: {
        if (tag == 17) {
         parse_time_elapsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_elapsed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_time_user;
        break;
      }

      // optional double time_user = 3;
      case 3: {
        if (tag == 25) {
         parse_time_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_user_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_time_system;
        break;
      }

      // optional double time_system = 4;
      case 4: {
        if (tag == 33) {
         parse_time_system:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_system_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ClientStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ClientStats)
  return false;
#undef DO_
}

void ClientStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ClientStats)
  // optional .grpc.testing.HistogramData latencies = 1;
  if (this->has_latencies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->latencies_, output);
  }

  // optional double time_elapsed = 2;
  if (this->time_elapsed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time_elapsed(), output);
  }

  // optional double time_user = 3;
  if (this->time_user() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time_user(), output);
  }

  // optional double time_system = 4;
  if (this->time_system() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time_system(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ClientStats)
}

::google::protobuf::uint8* ClientStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ClientStats)
  // optional .grpc.testing.HistogramData latencies = 1;
  if (this->has_latencies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->latencies_, target);
  }

  // optional double time_elapsed = 2;
  if (this->time_elapsed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time_elapsed(), target);
  }

  // optional double time_user = 3;
  if (this->time_user() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time_user(), target);
  }

  // optional double time_system = 4;
  if (this->time_system() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time_system(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ClientStats)
  return target;
}

int ClientStats::ByteSize() const {
  int total_size = 0;

  // optional .grpc.testing.HistogramData latencies = 1;
  if (this->has_latencies()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->latencies_);
  }

  // optional double time_elapsed = 2;
  if (this->time_elapsed() != 0) {
    total_size += 1 + 8;
  }

  // optional double time_user = 3;
  if (this->time_user() != 0) {
    total_size += 1 + 8;
  }

  // optional double time_system = 4;
  if (this->time_system() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientStats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientStats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientStats::MergeFrom(const ClientStats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_latencies()) {
    mutable_latencies()->::grpc::testing::HistogramData::MergeFrom(from.latencies());
  }
  if (from.time_elapsed() != 0) {
    set_time_elapsed(from.time_elapsed());
  }
  if (from.time_user() != 0) {
    set_time_user(from.time_user());
  }
  if (from.time_system() != 0) {
    set_time_system(from.time_system());
  }
}

void ClientStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientStats::CopyFrom(const ClientStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStats::IsInitialized() const {

  return true;
}

void ClientStats::Swap(ClientStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientStats::InternalSwap(ClientStats* other) {
  std::swap(latencies_, other->latencies_);
  std::swap(time_elapsed_, other->time_elapsed_);
  std::swap(time_user_, other->time_user_);
  std::swap(time_system_, other->time_system_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientStats_descriptor_;
  metadata.reflection = ClientStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientStats

// optional .grpc.testing.HistogramData latencies = 1;
bool ClientStats::has_latencies() const {
  return !_is_default_instance_ && latencies_ != NULL;
}
void ClientStats::clear_latencies() {
  if (GetArenaNoVirtual() == NULL && latencies_ != NULL) delete latencies_;
  latencies_ = NULL;
}
 const ::grpc::testing::HistogramData& ClientStats::latencies() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientStats.latencies)
  return latencies_ != NULL ? *latencies_ : *default_instance_->latencies_;
}
 ::grpc::testing::HistogramData* ClientStats::mutable_latencies() {
  
  if (latencies_ == NULL) {
    latencies_ = new ::grpc::testing::HistogramData;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientStats.latencies)
  return latencies_;
}
 ::grpc::testing::HistogramData* ClientStats::release_latencies() {
  
  ::grpc::testing::HistogramData* temp = latencies_;
  latencies_ = NULL;
  return temp;
}
 void ClientStats::set_allocated_latencies(::grpc::testing::HistogramData* latencies) {
  delete latencies_;
  latencies_ = latencies;
  if (latencies) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientStats.latencies)
}

// optional double time_elapsed = 2;
void ClientStats::clear_time_elapsed() {
  time_elapsed_ = 0;
}
 double ClientStats::time_elapsed() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientStats.time_elapsed)
  return time_elapsed_;
}
 void ClientStats::set_time_elapsed(double value) {
  
  time_elapsed_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientStats.time_elapsed)
}

// optional double time_user = 3;
void ClientStats::clear_time_user() {
  time_user_ = 0;
}
 double ClientStats::time_user() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientStats.time_user)
  return time_user_;
}
 void ClientStats::set_time_user(double value) {
  
  time_user_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientStats.time_user)
}

// optional double time_system = 4;
void ClientStats::clear_time_system() {
  time_system_ = 0;
}
 double ClientStats::time_system() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientStats.time_system)
  return time_system_;
}
 void ClientStats::set_time_system(double value) {
  
  time_system_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ClientStats.time_system)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ClientStatus::kStatsFieldNumber;
#endif  // !_MSC_VER

ClientStatus::ClientStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ClientStatus)
}

void ClientStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  stats_ = const_cast< ::grpc::testing::ClientStats*>(&::grpc::testing::ClientStats::default_instance());
}

ClientStatus::ClientStatus(const ClientStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ClientStatus)
}

void ClientStatus::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  stats_ = NULL;
}

ClientStatus::~ClientStatus() {
  // @@protoc_insertion_point(destructor:grpc.testing.ClientStatus)
  SharedDtor();
}

void ClientStatus::SharedDtor() {
  if (this != default_instance_) {
    delete stats_;
  }
}

void ClientStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientStatus_descriptor_;
}

const ClientStatus& ClientStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

ClientStatus* ClientStatus::default_instance_ = NULL;

ClientStatus* ClientStatus::New(::google::protobuf::Arena* arena) const {
  ClientStatus* n = new ClientStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientStatus::Clear() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}

bool ClientStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ClientStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .grpc.testing.ClientStats stats = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ClientStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ClientStatus)
  return false;
#undef DO_
}

void ClientStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ClientStatus)
  // optional .grpc.testing.ClientStats stats = 1;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stats_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ClientStatus)
}

::google::protobuf::uint8* ClientStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ClientStatus)
  // optional .grpc.testing.ClientStats stats = 1;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->stats_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ClientStatus)
  return target;
}

int ClientStatus::ByteSize() const {
  int total_size = 0;

  // optional .grpc.testing.ClientStats stats = 1;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientStatus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientStatus>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientStatus::MergeFrom(const ClientStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_stats()) {
    mutable_stats()->::grpc::testing::ClientStats::MergeFrom(from.stats());
  }
}

void ClientStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientStatus::CopyFrom(const ClientStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStatus::IsInitialized() const {

  return true;
}

void ClientStatus::Swap(ClientStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientStatus::InternalSwap(ClientStatus* other) {
  std::swap(stats_, other->stats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientStatus_descriptor_;
  metadata.reflection = ClientStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientStatus

// optional .grpc.testing.ClientStats stats = 1;
bool ClientStatus::has_stats() const {
  return !_is_default_instance_ && stats_ != NULL;
}
void ClientStatus::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
 const ::grpc::testing::ClientStats& ClientStatus::stats() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ClientStatus.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
 ::grpc::testing::ClientStats* ClientStatus::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::grpc::testing::ClientStats;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ClientStatus.stats)
  return stats_;
}
 ::grpc::testing::ClientStats* ClientStatus::release_stats() {
  
  ::grpc::testing::ClientStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
 void ClientStatus::set_allocated_stats(::grpc::testing::ClientStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ClientStatus.stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ServerConfig::kServerTypeFieldNumber;
const int ServerConfig::kThreadsFieldNumber;
const int ServerConfig::kEnableSslFieldNumber;
const int ServerConfig::kHostFieldNumber;
#endif  // !_MSC_VER

ServerConfig::ServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ServerConfig)
}

void ServerConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ServerConfig::ServerConfig(const ServerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ServerConfig)
}

void ServerConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_type_ = 0;
  threads_ = 0;
  enable_ssl_ = false;
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ServerConfig::~ServerConfig() {
  // @@protoc_insertion_point(destructor:grpc.testing.ServerConfig)
  SharedDtor();
}

void ServerConfig::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerConfig_descriptor_;
}

const ServerConfig& ServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

ServerConfig* ServerConfig::default_instance_ = NULL;

ServerConfig* ServerConfig::New(::google::protobuf::Arena* arena) const {
  ServerConfig* n = new ServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerConfig::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerConfig*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(server_type_, threads_);
  enable_ssl_ = false;
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .grpc.testing.ServerType server_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_server_type(static_cast< ::grpc::testing::ServerType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_threads;
        break;
      }

      // optional int32 threads = 2;
      case 2: {
        if (tag == 16) {
         parse_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threads_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enable_ssl;
        break;
      }

      // optional bool enable_ssl = 3;
      case 3: {
        if (tag == 24) {
         parse_enable_ssl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ssl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_host;
        break;
      }

      // optional string host = 4;
      case 4: {
        if (tag == 34) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.ServerConfig.host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ServerConfig)
  return false;
#undef DO_
}

void ServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ServerConfig)
  // optional .grpc.testing.ServerType server_type = 1;
  if (this->server_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->server_type(), output);
  }

  // optional int32 threads = 2;
  if (this->threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->threads(), output);
  }

  // optional bool enable_ssl = 3;
  if (this->enable_ssl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_ssl(), output);
  }

  // optional string host = 4;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.ServerConfig.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->host(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ServerConfig)
}

::google::protobuf::uint8* ServerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ServerConfig)
  // optional .grpc.testing.ServerType server_type = 1;
  if (this->server_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->server_type(), target);
  }

  // optional int32 threads = 2;
  if (this->threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->threads(), target);
  }

  // optional bool enable_ssl = 3;
  if (this->enable_ssl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_ssl(), target);
  }

  // optional string host = 4;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.ServerConfig.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->host(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ServerConfig)
  return target;
}

int ServerConfig::ByteSize() const {
  int total_size = 0;

  // optional .grpc.testing.ServerType server_type = 1;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
  }

  // optional int32 threads = 2;
  if (this->threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threads());
  }

  // optional bool enable_ssl = 3;
  if (this->enable_ssl() != 0) {
    total_size += 1 + 1;
  }

  // optional string host = 4;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.server_type() != 0) {
    set_server_type(from.server_type());
  }
  if (from.threads() != 0) {
    set_threads(from.threads());
  }
  if (from.enable_ssl() != 0) {
    set_enable_ssl(from.enable_ssl());
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
}

void ServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {

  return true;
}

void ServerConfig::Swap(ServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerConfig::InternalSwap(ServerConfig* other) {
  std::swap(server_type_, other->server_type_);
  std::swap(threads_, other->threads_);
  std::swap(enable_ssl_, other->enable_ssl_);
  host_.Swap(&other->host_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerConfig_descriptor_;
  metadata.reflection = ServerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerConfig

// optional .grpc.testing.ServerType server_type = 1;
void ServerConfig::clear_server_type() {
  server_type_ = 0;
}
 ::grpc::testing::ServerType ServerConfig::server_type() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerConfig.server_type)
  return static_cast< ::grpc::testing::ServerType >(server_type_);
}
 void ServerConfig::set_server_type(::grpc::testing::ServerType value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerConfig.server_type)
}

// optional int32 threads = 2;
void ServerConfig::clear_threads() {
  threads_ = 0;
}
 ::google::protobuf::int32 ServerConfig::threads() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerConfig.threads)
  return threads_;
}
 void ServerConfig::set_threads(::google::protobuf::int32 value) {
  
  threads_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerConfig.threads)
}

// optional bool enable_ssl = 3;
void ServerConfig::clear_enable_ssl() {
  enable_ssl_ = false;
}
 bool ServerConfig::enable_ssl() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerConfig.enable_ssl)
  return enable_ssl_;
}
 void ServerConfig::set_enable_ssl(bool value) {
  
  enable_ssl_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerConfig.enable_ssl)
}

// optional string host = 4;
void ServerConfig::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ServerConfig::host() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerConfig.host)
  return host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.ServerConfig.host)
}
 void ServerConfig::set_host(const char* value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.ServerConfig.host)
}
 void ServerConfig::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.ServerConfig.host)
}
 ::std::string* ServerConfig::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:grpc.testing.ServerConfig.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerConfig::release_host() {
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ServerConfig.host)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ServerArgs::kSetupFieldNumber;
const int ServerArgs::kMarkFieldNumber;
#endif  // !_MSC_VER

ServerArgs::ServerArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ServerArgs)
}

void ServerArgs::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ServerArgs_default_oneof_instance_->setup_ = const_cast< ::grpc::testing::ServerConfig*>(&::grpc::testing::ServerConfig::default_instance());
  ServerArgs_default_oneof_instance_->mark_ = const_cast< ::grpc::testing::Mark*>(&::grpc::testing::Mark::default_instance());
}

ServerArgs::ServerArgs(const ServerArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ServerArgs)
}

void ServerArgs::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_argtype();
}

ServerArgs::~ServerArgs() {
  // @@protoc_insertion_point(destructor:grpc.testing.ServerArgs)
  SharedDtor();
}

void ServerArgs::SharedDtor() {
  if (has_argtype()) {
    clear_argtype();
  }
  if (this != default_instance_) {
  }
}

void ServerArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerArgs_descriptor_;
}

const ServerArgs& ServerArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

ServerArgs* ServerArgs::default_instance_ = NULL;

ServerArgs* ServerArgs::New(::google::protobuf::Arena* arena) const {
  ServerArgs* n = new ServerArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerArgs::clear_argtype() {
  switch(argtype_case()) {
    case kSetup: {
      delete argtype_.setup_;
      break;
    }
    case kMark: {
      delete argtype_.mark_;
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ARGTYPE_NOT_SET;
}


void ServerArgs::Clear() {
  clear_argtype();
}

bool ServerArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ServerArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .grpc.testing.ServerConfig setup = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mark;
        break;
      }

      // optional .grpc.testing.Mark mark = 2;
      case 2: {
        if (tag == 18) {
         parse_mark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ServerArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ServerArgs)
  return false;
#undef DO_
}

void ServerArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ServerArgs)
  // optional .grpc.testing.ServerConfig setup = 1;
  if (has_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *argtype_.setup_, output);
  }

  // optional .grpc.testing.Mark mark = 2;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *argtype_.mark_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ServerArgs)
}

::google::protobuf::uint8* ServerArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ServerArgs)
  // optional .grpc.testing.ServerConfig setup = 1;
  if (has_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *argtype_.setup_, target);
  }

  // optional .grpc.testing.Mark mark = 2;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *argtype_.mark_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ServerArgs)
  return target;
}

int ServerArgs::ByteSize() const {
  int total_size = 0;

  switch (argtype_case()) {
    // optional .grpc.testing.ServerConfig setup = 1;
    case kSetup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *argtype_.setup_);
      break;
    }
    // optional .grpc.testing.Mark mark = 2;
    case kMark: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *argtype_.mark_);
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerArgs::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerArgs>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerArgs::MergeFrom(const ServerArgs& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.argtype_case()) {
    case kSetup: {
      mutable_setup()->::grpc::testing::ServerConfig::MergeFrom(from.setup());
      break;
    }
    case kMark: {
      mutable_mark()->::grpc::testing::Mark::MergeFrom(from.mark());
      break;
    }
    case ARGTYPE_NOT_SET: {
      break;
    }
  }
}

void ServerArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerArgs::CopyFrom(const ServerArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerArgs::IsInitialized() const {

  return true;
}

void ServerArgs::Swap(ServerArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerArgs::InternalSwap(ServerArgs* other) {
  std::swap(argtype_, other->argtype_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerArgs_descriptor_;
  metadata.reflection = ServerArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerArgs

// optional .grpc.testing.ServerConfig setup = 1;
bool ServerArgs::has_setup() const {
  return argtype_case() == kSetup;
}
void ServerArgs::set_has_setup() {
  _oneof_case_[0] = kSetup;
}
void ServerArgs::clear_setup() {
  if (has_setup()) {
    delete argtype_.setup_;
    clear_has_argtype();
  }
}
 const ::grpc::testing::ServerConfig& ServerArgs::setup() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerArgs.setup)
  return has_setup() ? *argtype_.setup_
                      : ::grpc::testing::ServerConfig::default_instance();
}
 ::grpc::testing::ServerConfig* ServerArgs::mutable_setup() {
  if (!has_setup()) {
    clear_argtype();
    set_has_setup();
    argtype_.setup_ = new ::grpc::testing::ServerConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ServerArgs.setup)
  return argtype_.setup_;
}
 ::grpc::testing::ServerConfig* ServerArgs::release_setup() {
  if (has_setup()) {
    clear_has_argtype();
    ::grpc::testing::ServerConfig* temp = argtype_.setup_;
    argtype_.setup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ServerArgs::set_allocated_setup(::grpc::testing::ServerConfig* setup) {
  clear_argtype();
  if (setup) {
    set_has_setup();
    argtype_.setup_ = setup;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ServerArgs.setup)
}

// optional .grpc.testing.Mark mark = 2;
bool ServerArgs::has_mark() const {
  return argtype_case() == kMark;
}
void ServerArgs::set_has_mark() {
  _oneof_case_[0] = kMark;
}
void ServerArgs::clear_mark() {
  if (has_mark()) {
    delete argtype_.mark_;
    clear_has_argtype();
  }
}
 const ::grpc::testing::Mark& ServerArgs::mark() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerArgs.mark)
  return has_mark() ? *argtype_.mark_
                      : ::grpc::testing::Mark::default_instance();
}
 ::grpc::testing::Mark* ServerArgs::mutable_mark() {
  if (!has_mark()) {
    clear_argtype();
    set_has_mark();
    argtype_.mark_ = new ::grpc::testing::Mark;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ServerArgs.mark)
  return argtype_.mark_;
}
 ::grpc::testing::Mark* ServerArgs::release_mark() {
  if (has_mark()) {
    clear_has_argtype();
    ::grpc::testing::Mark* temp = argtype_.mark_;
    argtype_.mark_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ServerArgs::set_allocated_mark(::grpc::testing::Mark* mark) {
  clear_argtype();
  if (mark) {
    set_has_mark();
    argtype_.mark_ = mark;
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ServerArgs.mark)
}

bool ServerArgs::has_argtype() const {
  return argtype_case() != ARGTYPE_NOT_SET;
}
void ServerArgs::clear_has_argtype() {
  _oneof_case_[0] = ARGTYPE_NOT_SET;
}
ServerArgs::ArgtypeCase ServerArgs::argtype_case() const {
  return ServerArgs::ArgtypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ServerStatus::kStatsFieldNumber;
const int ServerStatus::kPortFieldNumber;
#endif  // !_MSC_VER

ServerStatus::ServerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.ServerStatus)
}

void ServerStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  stats_ = const_cast< ::grpc::testing::ServerStats*>(&::grpc::testing::ServerStats::default_instance());
}

ServerStatus::ServerStatus(const ServerStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.ServerStatus)
}

void ServerStatus::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  stats_ = NULL;
  port_ = 0;
}

ServerStatus::~ServerStatus() {
  // @@protoc_insertion_point(destructor:grpc.testing.ServerStatus)
  SharedDtor();
}

void ServerStatus::SharedDtor() {
  if (this != default_instance_) {
    delete stats_;
  }
}

void ServerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatus_descriptor_;
}

const ServerStatus& ServerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

ServerStatus* ServerStatus::default_instance_ = NULL;

ServerStatus* ServerStatus::New(::google::protobuf::Arena* arena) const {
  ServerStatus* n = new ServerStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerStatus::Clear() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
  port_ = 0;
}

bool ServerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.ServerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .grpc.testing.ServerStats stats = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.ServerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.ServerStatus)
  return false;
#undef DO_
}

void ServerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.ServerStatus)
  // optional .grpc.testing.ServerStats stats = 1;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stats_, output);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.ServerStatus)
}

::google::protobuf::uint8* ServerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.ServerStatus)
  // optional .grpc.testing.ServerStats stats = 1;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->stats_, target);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.ServerStatus)
  return target;
}

int ServerStatus::ByteSize() const {
  int total_size = 0;

  // optional .grpc.testing.ServerStats stats = 1;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerStatus>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatus::MergeFrom(const ServerStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_stats()) {
    mutable_stats()->::grpc::testing::ServerStats::MergeFrom(from.stats());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void ServerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatus::CopyFrom(const ServerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatus::IsInitialized() const {

  return true;
}

void ServerStatus::Swap(ServerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerStatus::InternalSwap(ServerStatus* other) {
  std::swap(stats_, other->stats_);
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatus_descriptor_;
  metadata.reflection = ServerStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerStatus

// optional .grpc.testing.ServerStats stats = 1;
bool ServerStatus::has_stats() const {
  return !_is_default_instance_ && stats_ != NULL;
}
void ServerStatus::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
 const ::grpc::testing::ServerStats& ServerStatus::stats() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerStatus.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
 ::grpc::testing::ServerStats* ServerStatus::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::grpc::testing::ServerStats;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.ServerStatus.stats)
  return stats_;
}
 ::grpc::testing::ServerStats* ServerStatus::release_stats() {
  
  ::grpc::testing::ServerStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
 void ServerStatus::set_allocated_stats(::grpc::testing::ServerStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.ServerStatus.stats)
}

// optional int32 port = 2;
void ServerStatus::clear_port() {
  port_ = 0;
}
 ::google::protobuf::int32 ServerStatus::port() const {
  // @@protoc_insertion_point(field_get:grpc.testing.ServerStatus.port)
  return port_;
}
 void ServerStatus::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.ServerStatus.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SimpleRequest::kResponseTypeFieldNumber;
const int SimpleRequest::kResponseSizeFieldNumber;
const int SimpleRequest::kPayloadFieldNumber;
#endif  // !_MSC_VER

SimpleRequest::SimpleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.SimpleRequest)
}

void SimpleRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  payload_ = const_cast< ::grpc::testing::Payload*>(&::grpc::testing::Payload::default_instance());
}

SimpleRequest::SimpleRequest(const SimpleRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.SimpleRequest)
}

void SimpleRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  response_type_ = 0;
  response_size_ = 0;
  payload_ = NULL;
}

SimpleRequest::~SimpleRequest() {
  // @@protoc_insertion_point(destructor:grpc.testing.SimpleRequest)
  SharedDtor();
}

void SimpleRequest::SharedDtor() {
  if (this != default_instance_) {
    delete payload_;
  }
}

void SimpleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleRequest_descriptor_;
}

const SimpleRequest& SimpleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

SimpleRequest* SimpleRequest::default_instance_ = NULL;

SimpleRequest* SimpleRequest::New(::google::protobuf::Arena* arena) const {
  SimpleRequest* n = new SimpleRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SimpleRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(response_type_, response_size_);
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool SimpleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.SimpleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .grpc.testing.PayloadType response_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_response_type(static_cast< ::grpc::testing::PayloadType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_response_size;
        break;
      }

      // optional int32 response_size = 2;
      case 2: {
        if (tag == 16) {
         parse_response_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }

      // optional .grpc.testing.Payload payload = 3;
      case 3: {
        if (tag == 26) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.SimpleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.SimpleRequest)
  return false;
#undef DO_
}

void SimpleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.SimpleRequest)
  // optional .grpc.testing.PayloadType response_type = 1;
  if (this->response_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response_type(), output);
  }

  // optional int32 response_size = 2;
  if (this->response_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->response_size(), output);
  }

  // optional .grpc.testing.Payload payload = 3;
  if (this->has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->payload_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.SimpleRequest)
}

::google::protobuf::uint8* SimpleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.SimpleRequest)
  // optional .grpc.testing.PayloadType response_type = 1;
  if (this->response_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response_type(), target);
  }

  // optional int32 response_size = 2;
  if (this->response_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->response_size(), target);
  }

  // optional .grpc.testing.Payload payload = 3;
  if (this->has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->payload_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.SimpleRequest)
  return target;
}

int SimpleRequest::ByteSize() const {
  int total_size = 0;

  // optional .grpc.testing.PayloadType response_type = 1;
  if (this->response_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
  }

  // optional int32 response_size = 2;
  if (this->response_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->response_size());
  }

  // optional .grpc.testing.Payload payload = 3;
  if (this->has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SimpleRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleRequest::MergeFrom(const SimpleRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.response_type() != 0) {
    set_response_type(from.response_type());
  }
  if (from.response_size() != 0) {
    set_response_size(from.response_size());
  }
  if (from.has_payload()) {
    mutable_payload()->::grpc::testing::Payload::MergeFrom(from.payload());
  }
}

void SimpleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleRequest::CopyFrom(const SimpleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleRequest::IsInitialized() const {

  return true;
}

void SimpleRequest::Swap(SimpleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleRequest::InternalSwap(SimpleRequest* other) {
  std::swap(response_type_, other->response_type_);
  std::swap(response_size_, other->response_size_);
  std::swap(payload_, other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleRequest_descriptor_;
  metadata.reflection = SimpleRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleRequest

// optional .grpc.testing.PayloadType response_type = 1;
void SimpleRequest::clear_response_type() {
  response_type_ = 0;
}
 ::grpc::testing::PayloadType SimpleRequest::response_type() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleRequest.response_type)
  return static_cast< ::grpc::testing::PayloadType >(response_type_);
}
 void SimpleRequest::set_response_type(::grpc::testing::PayloadType value) {
  
  response_type_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.SimpleRequest.response_type)
}

// optional int32 response_size = 2;
void SimpleRequest::clear_response_size() {
  response_size_ = 0;
}
 ::google::protobuf::int32 SimpleRequest::response_size() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleRequest.response_size)
  return response_size_;
}
 void SimpleRequest::set_response_size(::google::protobuf::int32 value) {
  
  response_size_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.SimpleRequest.response_size)
}

// optional .grpc.testing.Payload payload = 3;
bool SimpleRequest::has_payload() const {
  return !_is_default_instance_ && payload_ != NULL;
}
void SimpleRequest::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}
 const ::grpc::testing::Payload& SimpleRequest::payload() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleRequest.payload)
  return payload_ != NULL ? *payload_ : *default_instance_->payload_;
}
 ::grpc::testing::Payload* SimpleRequest::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::grpc::testing::Payload;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SimpleRequest.payload)
  return payload_;
}
 ::grpc::testing::Payload* SimpleRequest::release_payload() {
  
  ::grpc::testing::Payload* temp = payload_;
  payload_ = NULL;
  return temp;
}
 void SimpleRequest::set_allocated_payload(::grpc::testing::Payload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SimpleRequest.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SimpleResponse::kPayloadFieldNumber;
#endif  // !_MSC_VER

SimpleResponse::SimpleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.SimpleResponse)
}

void SimpleResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  payload_ = const_cast< ::grpc::testing::Payload*>(&::grpc::testing::Payload::default_instance());
}

SimpleResponse::SimpleResponse(const SimpleResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.SimpleResponse)
}

void SimpleResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  payload_ = NULL;
}

SimpleResponse::~SimpleResponse() {
  // @@protoc_insertion_point(destructor:grpc.testing.SimpleResponse)
  SharedDtor();
}

void SimpleResponse::SharedDtor() {
  if (this != default_instance_) {
    delete payload_;
  }
}

void SimpleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleResponse_descriptor_;
}

const SimpleResponse& SimpleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpstest_2eproto();
  return *default_instance_;
}

SimpleResponse* SimpleResponse::default_instance_ = NULL;

SimpleResponse* SimpleResponse::New(::google::protobuf::Arena* arena) const {
  SimpleResponse* n = new SimpleResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}

bool SimpleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.SimpleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .grpc.testing.Payload payload = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.SimpleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.SimpleResponse)
  return false;
#undef DO_
}

void SimpleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.SimpleResponse)
  // optional .grpc.testing.Payload payload = 1;
  if (this->has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->payload_, output);
  }

  // @@protoc_insertion_point(serialize_end:grpc.testing.SimpleResponse)
}

::google::protobuf::uint8* SimpleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.SimpleResponse)
  // optional .grpc.testing.Payload payload = 1;
  if (this->has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->payload_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.SimpleResponse)
  return target;
}

int SimpleResponse::ByteSize() const {
  int total_size = 0;

  // optional .grpc.testing.Payload payload = 1;
  if (this->has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SimpleResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleResponse::MergeFrom(const SimpleResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_payload()) {
    mutable_payload()->::grpc::testing::Payload::MergeFrom(from.payload());
  }
}

void SimpleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleResponse::CopyFrom(const SimpleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleResponse::IsInitialized() const {

  return true;
}

void SimpleResponse::Swap(SimpleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleResponse::InternalSwap(SimpleResponse* other) {
  std::swap(payload_, other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleResponse_descriptor_;
  metadata.reflection = SimpleResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleResponse

// optional .grpc.testing.Payload payload = 1;
bool SimpleResponse::has_payload() const {
  return !_is_default_instance_ && payload_ != NULL;
}
void SimpleResponse::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}
 const ::grpc::testing::Payload& SimpleResponse::payload() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SimpleResponse.payload)
  return payload_ != NULL ? *payload_ : *default_instance_->payload_;
}
 ::grpc::testing::Payload* SimpleResponse::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::grpc::testing::Payload;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SimpleResponse.payload)
  return payload_;
}
 ::grpc::testing::Payload* SimpleResponse::release_payload() {
  
  ::grpc::testing::Payload* temp = payload_;
  payload_ = NULL;
  return temp;
}
 void SimpleResponse::set_allocated_payload(::grpc::testing::Payload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SimpleResponse.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace testing
}  // namespace grpc

// @@protoc_insertion_point(global_scope)
