// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace grpc {
namespace testing {

namespace {

const ::google::protobuf::Descriptor* Metrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleUserDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleUserDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleUserRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleUserRecordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleUserRecordReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleUserRecordReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleUserRetrieveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleUserRetrieveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleUserRetrieveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleUserRetrieveReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllUsersRetrieveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllUsersRetrieveReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllUsersRetrieveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllUsersRetrieveRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_5fdata_2eproto() {
  protobuf_AddDesc_user_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user_data.proto");
  GOOGLE_CHECK(file != NULL);
  Metrics_descriptor_ = file->message_type(0);
  static const int Metrics_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, qps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, qps_per_core_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, perc_lat_50_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, perc_lat_90_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, perc_lat_95_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, perc_lat_99_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, perc_lat_99_point_9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, server_system_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, server_user_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, client_system_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, client_user_time_),
  };
  Metrics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Metrics_descriptor_,
      Metrics::default_instance_,
      Metrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, _has_bits_[0]),
      -1,
      -1,
      sizeof(Metrics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, _internal_metadata_),
      -1);
  DataDetails_descriptor_ = file->message_type(1);
  static const int DataDetails_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDetails, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDetails, test_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDetails, sys_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDetails, metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDetails, client_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDetails, server_config_),
  };
  DataDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataDetails_descriptor_,
      DataDetails::default_instance_,
      DataDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(DataDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDetails, _internal_metadata_),
      -1);
  UserDetails_descriptor_ = file->message_type(2);
  static const int UserDetails_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetails, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetails, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetails, verified_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetails, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetails, given_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetails, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetails, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetails, picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetails, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetails, locale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetails, hd_),
  };
  UserDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserDetails_descriptor_,
      UserDetails::default_instance_,
      UserDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDetails, _internal_metadata_),
      -1);
  SingleUserDetails_descriptor_ = file->message_type(3);
  static const int SingleUserDetails_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserDetails, data_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserDetails, user_details_),
  };
  SingleUserDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SingleUserDetails_descriptor_,
      SingleUserDetails::default_instance_,
      SingleUserDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(SingleUserDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserDetails, _internal_metadata_),
      -1);
  SingleUserRecordRequest_descriptor_ = file->message_type(4);
  static const int SingleUserRecordRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRecordRequest, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRecordRequest, test_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRecordRequest, sys_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRecordRequest, metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRecordRequest, client_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRecordRequest, server_config_),
  };
  SingleUserRecordRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SingleUserRecordRequest_descriptor_,
      SingleUserRecordRequest::default_instance_,
      SingleUserRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRecordRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(SingleUserRecordRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRecordRequest, _internal_metadata_),
      -1);
  SingleUserRecordReply_descriptor_ = file->message_type(5);
  static const int SingleUserRecordReply_offsets_[1] = {
  };
  SingleUserRecordReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SingleUserRecordReply_descriptor_,
      SingleUserRecordReply::default_instance_,
      SingleUserRecordReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRecordReply, _has_bits_[0]),
      -1,
      -1,
      sizeof(SingleUserRecordReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRecordReply, _internal_metadata_),
      -1);
  SingleUserRetrieveRequest_descriptor_ = file->message_type(6);
  static const int SingleUserRetrieveRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRetrieveRequest, user_id_),
  };
  SingleUserRetrieveRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SingleUserRetrieveRequest_descriptor_,
      SingleUserRetrieveRequest::default_instance_,
      SingleUserRetrieveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRetrieveRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(SingleUserRetrieveRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRetrieveRequest, _internal_metadata_),
      -1);
  SingleUserRetrieveReply_descriptor_ = file->message_type(7);
  static const int SingleUserRetrieveReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRetrieveReply, details_),
  };
  SingleUserRetrieveReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SingleUserRetrieveReply_descriptor_,
      SingleUserRetrieveReply::default_instance_,
      SingleUserRetrieveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRetrieveReply, _has_bits_[0]),
      -1,
      -1,
      sizeof(SingleUserRetrieveReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserRetrieveReply, _internal_metadata_),
      -1);
  AllUsersRetrieveReply_descriptor_ = file->message_type(8);
  static const int AllUsersRetrieveReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUsersRetrieveReply, user_data_),
  };
  AllUsersRetrieveReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllUsersRetrieveReply_descriptor_,
      AllUsersRetrieveReply::default_instance_,
      AllUsersRetrieveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUsersRetrieveReply, _has_bits_[0]),
      -1,
      -1,
      sizeof(AllUsersRetrieveReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUsersRetrieveReply, _internal_metadata_),
      -1);
  AllUsersRetrieveRequest_descriptor_ = file->message_type(9);
  static const int AllUsersRetrieveRequest_offsets_[1] = {
  };
  AllUsersRetrieveRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllUsersRetrieveRequest_descriptor_,
      AllUsersRetrieveRequest::default_instance_,
      AllUsersRetrieveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUsersRetrieveRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(AllUsersRetrieveRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllUsersRetrieveRequest, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Metrics_descriptor_, &Metrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataDetails_descriptor_, &DataDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserDetails_descriptor_, &UserDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SingleUserDetails_descriptor_, &SingleUserDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SingleUserRecordRequest_descriptor_, &SingleUserRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SingleUserRecordReply_descriptor_, &SingleUserRecordReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SingleUserRetrieveRequest_descriptor_, &SingleUserRetrieveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SingleUserRetrieveReply_descriptor_, &SingleUserRetrieveReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllUsersRetrieveReply_descriptor_, &AllUsersRetrieveReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllUsersRetrieveRequest_descriptor_, &AllUsersRetrieveRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_5fdata_2eproto() {
  delete Metrics::default_instance_;
  delete Metrics_reflection_;
  delete DataDetails::default_instance_;
  delete DataDetails_reflection_;
  delete UserDetails::default_instance_;
  delete UserDetails_reflection_;
  delete SingleUserDetails::default_instance_;
  delete SingleUserDetails_reflection_;
  delete SingleUserRecordRequest::default_instance_;
  delete SingleUserRecordRequest_reflection_;
  delete SingleUserRecordReply::default_instance_;
  delete SingleUserRecordReply_reflection_;
  delete SingleUserRetrieveRequest::default_instance_;
  delete SingleUserRetrieveRequest_reflection_;
  delete SingleUserRetrieveReply::default_instance_;
  delete SingleUserRetrieveReply_reflection_;
  delete AllUsersRetrieveReply::default_instance_;
  delete AllUsersRetrieveReply_reflection_;
  delete AllUsersRetrieveRequest::default_instance_;
  delete AllUsersRetrieveRequest_reflection_;
}

void protobuf_AddDesc_user_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::grpc::testing::protobuf_AddDesc_qpstest_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017user_data.proto\022\014grpc.testing\032\rqpstest"
    ".proto\"\211\002\n\007Metrics\022\013\n\003qps\030\001 \001(\001\022\024\n\014qps_p"
    "er_core\030\002 \001(\001\022\023\n\013perc_lat_50\030\003 \001(\001\022\023\n\013pe"
    "rc_lat_90\030\004 \001(\001\022\023\n\013perc_lat_95\030\005 \001(\001\022\023\n\013"
    "perc_lat_99\030\006 \001(\001\022\033\n\023perc_lat_99_point_9"
    "\030\007 \001(\001\022\032\n\022server_system_time\030\010 \001(\001\022\030\n\020se"
    "rver_user_time\030\t \001(\001\022\032\n\022client_system_ti"
    "me\030\n \001(\001\022\030\n\020client_user_time\030\013 \001(\001\"\323\001\n\013D"
    "ataDetails\022\021\n\ttimestamp\030\001 \001(\t\022\021\n\ttest_na"
    "me\030\002 \001(\t\022\020\n\010sys_info\030\003 \001(\t\022&\n\007metrics\030\004 "
    "\001(\0132\025.grpc.testing.Metrics\0221\n\rclient_con"
    "fig\030\005 \001(\0132\032.grpc.testing.ClientConfig\0221\n"
    "\rserver_config\030\006 \001(\0132\032.grpc.testing.Serv"
    "erConfig\"\302\001\n\013UserDetails\022\n\n\002id\030\001 \001(\t\022\r\n\005"
    "email\030\002 \001(\t\022\026\n\016verified_email\030\003 \001(\010\022\014\n\004n"
    "ame\030\004 \001(\t\022\022\n\ngiven_name\030\005 \001(\t\022\023\n\013family_"
    "name\030\006 \001(\t\022\014\n\004link\030\007 \001(\t\022\017\n\007picture\030\010 \001("
    "\t\022\016\n\006gender\030\t \001(\t\022\016\n\006locale\030\n \001(\t\022\n\n\002hd\030"
    "\013 \001(\t\"u\n\021SingleUserDetails\022/\n\014data_detai"
    "ls\030\001 \003(\0132\031.grpc.testing.DataDetails\022/\n\014u"
    "ser_details\030\002 \001(\0132\031.grpc.testing.UserDet"
    "ails\"\342\001\n\027SingleUserRecordRequest\022\024\n\014acce"
    "ss_token\030\001 \001(\t\022\021\n\ttest_name\030\002 \001(\t\022\020\n\010sys"
    "_info\030\003 \001(\t\022&\n\007metrics\030\004 \001(\0132\025.grpc.test"
    "ing.Metrics\0221\n\rclient_config\030\005 \001(\0132\032.grp"
    "c.testing.ClientConfig\0221\n\rserver_config\030"
    "\006 \001(\0132\032.grpc.testing.ServerConfig\"\027\n\025Sin"
    "gleUserRecordReply\",\n\031SingleUserRetrieve"
    "Request\022\017\n\007user_id\030\001 \001(\t\"K\n\027SingleUserRe"
    "trieveReply\0220\n\007details\030\001 \001(\0132\037.grpc.test"
    "ing.SingleUserDetails\"K\n\025AllUsersRetriev"
    "eReply\0222\n\tuser_data\030\001 \003(\0132\037.grpc.testing"
    ".SingleUserDetails\"\031\n\027AllUsersRetrieveRe"
    "quest2\314\002\n\020UserDataTransfer\022f\n\026RecordSing"
    "leClientData\022%.grpc.testing.SingleUserRe"
    "cordRequest\032#.grpc.testing.SingleUserRec"
    "ordReply\"\000\022j\n\026RetrieveSingleUserData\022\'.g"
    "rpc.testing.SingleUserRetrieveRequest\032%."
    "grpc.testing.SingleUserRetrieveReply\"\000\022d"
    "\n\024RetrieveAllUsersData\022%.grpc.testing.Al"
    "lUsersRetrieveRequest\032#.grpc.testing.All"
    "UsersRetrieveReply\"\000", 1660);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user_data.proto", &protobuf_RegisterTypes);
  Metrics::default_instance_ = new Metrics();
  DataDetails::default_instance_ = new DataDetails();
  UserDetails::default_instance_ = new UserDetails();
  SingleUserDetails::default_instance_ = new SingleUserDetails();
  SingleUserRecordRequest::default_instance_ = new SingleUserRecordRequest();
  SingleUserRecordReply::default_instance_ = new SingleUserRecordReply();
  SingleUserRetrieveRequest::default_instance_ = new SingleUserRetrieveRequest();
  SingleUserRetrieveReply::default_instance_ = new SingleUserRetrieveReply();
  AllUsersRetrieveReply::default_instance_ = new AllUsersRetrieveReply();
  AllUsersRetrieveRequest::default_instance_ = new AllUsersRetrieveRequest();
  Metrics::default_instance_->InitAsDefaultInstance();
  DataDetails::default_instance_->InitAsDefaultInstance();
  UserDetails::default_instance_->InitAsDefaultInstance();
  SingleUserDetails::default_instance_->InitAsDefaultInstance();
  SingleUserRecordRequest::default_instance_->InitAsDefaultInstance();
  SingleUserRecordReply::default_instance_->InitAsDefaultInstance();
  SingleUserRetrieveRequest::default_instance_->InitAsDefaultInstance();
  SingleUserRetrieveReply::default_instance_->InitAsDefaultInstance();
  AllUsersRetrieveReply::default_instance_->InitAsDefaultInstance();
  AllUsersRetrieveRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_5fdata_2eproto {
  StaticDescriptorInitializer_user_5fdata_2eproto() {
    protobuf_AddDesc_user_5fdata_2eproto();
  }
} static_descriptor_initializer_user_5fdata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Metrics::kQpsFieldNumber;
const int Metrics::kQpsPerCoreFieldNumber;
const int Metrics::kPercLat50FieldNumber;
const int Metrics::kPercLat90FieldNumber;
const int Metrics::kPercLat95FieldNumber;
const int Metrics::kPercLat99FieldNumber;
const int Metrics::kPercLat99Point9FieldNumber;
const int Metrics::kServerSystemTimeFieldNumber;
const int Metrics::kServerUserTimeFieldNumber;
const int Metrics::kClientSystemTimeFieldNumber;
const int Metrics::kClientUserTimeFieldNumber;
#endif  // !_MSC_VER

Metrics::Metrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.Metrics)
}

void Metrics::InitAsDefaultInstance() {
}

Metrics::Metrics(const Metrics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.Metrics)
}

void Metrics::SharedCtor() {
  _cached_size_ = 0;
  qps_ = 0;
  qps_per_core_ = 0;
  perc_lat_50_ = 0;
  perc_lat_90_ = 0;
  perc_lat_95_ = 0;
  perc_lat_99_ = 0;
  perc_lat_99_point_9_ = 0;
  server_system_time_ = 0;
  server_user_time_ = 0;
  client_system_time_ = 0;
  client_user_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metrics::~Metrics() {
  // @@protoc_insertion_point(destructor:grpc.testing.Metrics)
  SharedDtor();
}

void Metrics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metrics_descriptor_;
}

const Metrics& Metrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fdata_2eproto();
  return *default_instance_;
}

Metrics* Metrics::default_instance_ = NULL;

Metrics* Metrics::New(::google::protobuf::Arena* arena) const {
  Metrics* n = new Metrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metrics::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Metrics*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(qps_, server_system_time_);
  }
  ZR_(server_user_time_, client_user_time_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Metrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.Metrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double qps = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qps_)));
          set_has_qps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_qps_per_core;
        break;
      }

      // optional double qps_per_core = 2;
      case 2: {
        if (tag == 17) {
         parse_qps_per_core:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qps_per_core_)));
          set_has_qps_per_core();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_perc_lat_50;
        break;
      }

      // optional double perc_lat_50 = 3;
      case 3: {
        if (tag == 25) {
         parse_perc_lat_50:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perc_lat_50_)));
          set_has_perc_lat_50();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_perc_lat_90;
        break;
      }

      // optional double perc_lat_90 = 4;
      case 4: {
        if (tag == 33) {
         parse_perc_lat_90:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perc_lat_90_)));
          set_has_perc_lat_90();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_perc_lat_95;
        break;
      }

      // optional double perc_lat_95 = 5;
      case 5: {
        if (tag == 41) {
         parse_perc_lat_95:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perc_lat_95_)));
          set_has_perc_lat_95();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_perc_lat_99;
        break;
      }

      // optional double perc_lat_99 = 6;
      case 6: {
        if (tag == 49) {
         parse_perc_lat_99:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perc_lat_99_)));
          set_has_perc_lat_99();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_perc_lat_99_point_9;
        break;
      }

      // optional double perc_lat_99_point_9 = 7;
      case 7: {
        if (tag == 57) {
         parse_perc_lat_99_point_9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perc_lat_99_point_9_)));
          set_has_perc_lat_99_point_9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_server_system_time;
        break;
      }

      // optional double server_system_time = 8;
      case 8: {
        if (tag == 65) {
         parse_server_system_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &server_system_time_)));
          set_has_server_system_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_server_user_time;
        break;
      }

      // optional double server_user_time = 9;
      case 9: {
        if (tag == 73) {
         parse_server_user_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &server_user_time_)));
          set_has_server_user_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_client_system_time;
        break;
      }

      // optional double client_system_time = 10;
      case 10: {
        if (tag == 81) {
         parse_client_system_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &client_system_time_)));
          set_has_client_system_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_client_user_time;
        break;
      }

      // optional double client_user_time = 11;
      case 11: {
        if (tag == 89) {
         parse_client_user_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &client_user_time_)));
          set_has_client_user_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.Metrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.Metrics)
  return false;
#undef DO_
}

void Metrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.Metrics)
  // optional double qps = 1;
  if (has_qps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->qps(), output);
  }

  // optional double qps_per_core = 2;
  if (has_qps_per_core()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->qps_per_core(), output);
  }

  // optional double perc_lat_50 = 3;
  if (has_perc_lat_50()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->perc_lat_50(), output);
  }

  // optional double perc_lat_90 = 4;
  if (has_perc_lat_90()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->perc_lat_90(), output);
  }

  // optional double perc_lat_95 = 5;
  if (has_perc_lat_95()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->perc_lat_95(), output);
  }

  // optional double perc_lat_99 = 6;
  if (has_perc_lat_99()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->perc_lat_99(), output);
  }

  // optional double perc_lat_99_point_9 = 7;
  if (has_perc_lat_99_point_9()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->perc_lat_99_point_9(), output);
  }

  // optional double server_system_time = 8;
  if (has_server_system_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->server_system_time(), output);
  }

  // optional double server_user_time = 9;
  if (has_server_user_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->server_user_time(), output);
  }

  // optional double client_system_time = 10;
  if (has_client_system_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->client_system_time(), output);
  }

  // optional double client_user_time = 11;
  if (has_client_user_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->client_user_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.testing.Metrics)
}

::google::protobuf::uint8* Metrics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.Metrics)
  // optional double qps = 1;
  if (has_qps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->qps(), target);
  }

  // optional double qps_per_core = 2;
  if (has_qps_per_core()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->qps_per_core(), target);
  }

  // optional double perc_lat_50 = 3;
  if (has_perc_lat_50()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->perc_lat_50(), target);
  }

  // optional double perc_lat_90 = 4;
  if (has_perc_lat_90()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->perc_lat_90(), target);
  }

  // optional double perc_lat_95 = 5;
  if (has_perc_lat_95()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->perc_lat_95(), target);
  }

  // optional double perc_lat_99 = 6;
  if (has_perc_lat_99()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->perc_lat_99(), target);
  }

  // optional double perc_lat_99_point_9 = 7;
  if (has_perc_lat_99_point_9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->perc_lat_99_point_9(), target);
  }

  // optional double server_system_time = 8;
  if (has_server_system_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->server_system_time(), target);
  }

  // optional double server_user_time = 9;
  if (has_server_user_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->server_user_time(), target);
  }

  // optional double client_system_time = 10;
  if (has_client_system_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->client_system_time(), target);
  }

  // optional double client_user_time = 11;
  if (has_client_user_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->client_user_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.Metrics)
  return target;
}

int Metrics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional double qps = 1;
    if (has_qps()) {
      total_size += 1 + 8;
    }

    // optional double qps_per_core = 2;
    if (has_qps_per_core()) {
      total_size += 1 + 8;
    }

    // optional double perc_lat_50 = 3;
    if (has_perc_lat_50()) {
      total_size += 1 + 8;
    }

    // optional double perc_lat_90 = 4;
    if (has_perc_lat_90()) {
      total_size += 1 + 8;
    }

    // optional double perc_lat_95 = 5;
    if (has_perc_lat_95()) {
      total_size += 1 + 8;
    }

    // optional double perc_lat_99 = 6;
    if (has_perc_lat_99()) {
      total_size += 1 + 8;
    }

    // optional double perc_lat_99_point_9 = 7;
    if (has_perc_lat_99_point_9()) {
      total_size += 1 + 8;
    }

    // optional double server_system_time = 8;
    if (has_server_system_time()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792) {
    // optional double server_user_time = 9;
    if (has_server_user_time()) {
      total_size += 1 + 8;
    }

    // optional double client_system_time = 10;
    if (has_client_system_time()) {
      total_size += 1 + 8;
    }

    // optional double client_user_time = 11;
    if (has_client_user_time()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metrics::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Metrics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Metrics>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metrics::MergeFrom(const Metrics& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qps()) {
      set_qps(from.qps());
    }
    if (from.has_qps_per_core()) {
      set_qps_per_core(from.qps_per_core());
    }
    if (from.has_perc_lat_50()) {
      set_perc_lat_50(from.perc_lat_50());
    }
    if (from.has_perc_lat_90()) {
      set_perc_lat_90(from.perc_lat_90());
    }
    if (from.has_perc_lat_95()) {
      set_perc_lat_95(from.perc_lat_95());
    }
    if (from.has_perc_lat_99()) {
      set_perc_lat_99(from.perc_lat_99());
    }
    if (from.has_perc_lat_99_point_9()) {
      set_perc_lat_99_point_9(from.perc_lat_99_point_9());
    }
    if (from.has_server_system_time()) {
      set_server_system_time(from.server_system_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_server_user_time()) {
      set_server_user_time(from.server_user_time());
    }
    if (from.has_client_system_time()) {
      set_client_system_time(from.client_system_time());
    }
    if (from.has_client_user_time()) {
      set_client_user_time(from.client_user_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Metrics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metrics::CopyFrom(const Metrics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metrics::IsInitialized() const {

  return true;
}

void Metrics::Swap(Metrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metrics::InternalSwap(Metrics* other) {
  std::swap(qps_, other->qps_);
  std::swap(qps_per_core_, other->qps_per_core_);
  std::swap(perc_lat_50_, other->perc_lat_50_);
  std::swap(perc_lat_90_, other->perc_lat_90_);
  std::swap(perc_lat_95_, other->perc_lat_95_);
  std::swap(perc_lat_99_, other->perc_lat_99_);
  std::swap(perc_lat_99_point_9_, other->perc_lat_99_point_9_);
  std::swap(server_system_time_, other->server_system_time_);
  std::swap(server_user_time_, other->server_user_time_);
  std::swap(client_system_time_, other->client_system_time_);
  std::swap(client_user_time_, other->client_user_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metrics_descriptor_;
  metadata.reflection = Metrics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metrics

// optional double qps = 1;
bool Metrics::has_qps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Metrics::set_has_qps() {
  _has_bits_[0] |= 0x00000001u;
}
void Metrics::clear_has_qps() {
  _has_bits_[0] &= ~0x00000001u;
}
void Metrics::clear_qps() {
  qps_ = 0;
  clear_has_qps();
}
 double Metrics::qps() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.qps)
  return qps_;
}
 void Metrics::set_qps(double value) {
  set_has_qps();
  qps_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.qps)
}

// optional double qps_per_core = 2;
bool Metrics::has_qps_per_core() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Metrics::set_has_qps_per_core() {
  _has_bits_[0] |= 0x00000002u;
}
void Metrics::clear_has_qps_per_core() {
  _has_bits_[0] &= ~0x00000002u;
}
void Metrics::clear_qps_per_core() {
  qps_per_core_ = 0;
  clear_has_qps_per_core();
}
 double Metrics::qps_per_core() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.qps_per_core)
  return qps_per_core_;
}
 void Metrics::set_qps_per_core(double value) {
  set_has_qps_per_core();
  qps_per_core_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.qps_per_core)
}

// optional double perc_lat_50 = 3;
bool Metrics::has_perc_lat_50() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Metrics::set_has_perc_lat_50() {
  _has_bits_[0] |= 0x00000004u;
}
void Metrics::clear_has_perc_lat_50() {
  _has_bits_[0] &= ~0x00000004u;
}
void Metrics::clear_perc_lat_50() {
  perc_lat_50_ = 0;
  clear_has_perc_lat_50();
}
 double Metrics::perc_lat_50() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.perc_lat_50)
  return perc_lat_50_;
}
 void Metrics::set_perc_lat_50(double value) {
  set_has_perc_lat_50();
  perc_lat_50_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.perc_lat_50)
}

// optional double perc_lat_90 = 4;
bool Metrics::has_perc_lat_90() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Metrics::set_has_perc_lat_90() {
  _has_bits_[0] |= 0x00000008u;
}
void Metrics::clear_has_perc_lat_90() {
  _has_bits_[0] &= ~0x00000008u;
}
void Metrics::clear_perc_lat_90() {
  perc_lat_90_ = 0;
  clear_has_perc_lat_90();
}
 double Metrics::perc_lat_90() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.perc_lat_90)
  return perc_lat_90_;
}
 void Metrics::set_perc_lat_90(double value) {
  set_has_perc_lat_90();
  perc_lat_90_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.perc_lat_90)
}

// optional double perc_lat_95 = 5;
bool Metrics::has_perc_lat_95() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Metrics::set_has_perc_lat_95() {
  _has_bits_[0] |= 0x00000010u;
}
void Metrics::clear_has_perc_lat_95() {
  _has_bits_[0] &= ~0x00000010u;
}
void Metrics::clear_perc_lat_95() {
  perc_lat_95_ = 0;
  clear_has_perc_lat_95();
}
 double Metrics::perc_lat_95() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.perc_lat_95)
  return perc_lat_95_;
}
 void Metrics::set_perc_lat_95(double value) {
  set_has_perc_lat_95();
  perc_lat_95_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.perc_lat_95)
}

// optional double perc_lat_99 = 6;
bool Metrics::has_perc_lat_99() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Metrics::set_has_perc_lat_99() {
  _has_bits_[0] |= 0x00000020u;
}
void Metrics::clear_has_perc_lat_99() {
  _has_bits_[0] &= ~0x00000020u;
}
void Metrics::clear_perc_lat_99() {
  perc_lat_99_ = 0;
  clear_has_perc_lat_99();
}
 double Metrics::perc_lat_99() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.perc_lat_99)
  return perc_lat_99_;
}
 void Metrics::set_perc_lat_99(double value) {
  set_has_perc_lat_99();
  perc_lat_99_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.perc_lat_99)
}

// optional double perc_lat_99_point_9 = 7;
bool Metrics::has_perc_lat_99_point_9() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Metrics::set_has_perc_lat_99_point_9() {
  _has_bits_[0] |= 0x00000040u;
}
void Metrics::clear_has_perc_lat_99_point_9() {
  _has_bits_[0] &= ~0x00000040u;
}
void Metrics::clear_perc_lat_99_point_9() {
  perc_lat_99_point_9_ = 0;
  clear_has_perc_lat_99_point_9();
}
 double Metrics::perc_lat_99_point_9() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.perc_lat_99_point_9)
  return perc_lat_99_point_9_;
}
 void Metrics::set_perc_lat_99_point_9(double value) {
  set_has_perc_lat_99_point_9();
  perc_lat_99_point_9_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.perc_lat_99_point_9)
}

// optional double server_system_time = 8;
bool Metrics::has_server_system_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Metrics::set_has_server_system_time() {
  _has_bits_[0] |= 0x00000080u;
}
void Metrics::clear_has_server_system_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void Metrics::clear_server_system_time() {
  server_system_time_ = 0;
  clear_has_server_system_time();
}
 double Metrics::server_system_time() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.server_system_time)
  return server_system_time_;
}
 void Metrics::set_server_system_time(double value) {
  set_has_server_system_time();
  server_system_time_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.server_system_time)
}

// optional double server_user_time = 9;
bool Metrics::has_server_user_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Metrics::set_has_server_user_time() {
  _has_bits_[0] |= 0x00000100u;
}
void Metrics::clear_has_server_user_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void Metrics::clear_server_user_time() {
  server_user_time_ = 0;
  clear_has_server_user_time();
}
 double Metrics::server_user_time() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.server_user_time)
  return server_user_time_;
}
 void Metrics::set_server_user_time(double value) {
  set_has_server_user_time();
  server_user_time_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.server_user_time)
}

// optional double client_system_time = 10;
bool Metrics::has_client_system_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Metrics::set_has_client_system_time() {
  _has_bits_[0] |= 0x00000200u;
}
void Metrics::clear_has_client_system_time() {
  _has_bits_[0] &= ~0x00000200u;
}
void Metrics::clear_client_system_time() {
  client_system_time_ = 0;
  clear_has_client_system_time();
}
 double Metrics::client_system_time() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.client_system_time)
  return client_system_time_;
}
 void Metrics::set_client_system_time(double value) {
  set_has_client_system_time();
  client_system_time_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.client_system_time)
}

// optional double client_user_time = 11;
bool Metrics::has_client_user_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Metrics::set_has_client_user_time() {
  _has_bits_[0] |= 0x00000400u;
}
void Metrics::clear_has_client_user_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void Metrics::clear_client_user_time() {
  client_user_time_ = 0;
  clear_has_client_user_time();
}
 double Metrics::client_user_time() const {
  // @@protoc_insertion_point(field_get:grpc.testing.Metrics.client_user_time)
  return client_user_time_;
}
 void Metrics::set_client_user_time(double value) {
  set_has_client_user_time();
  client_user_time_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.Metrics.client_user_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DataDetails::kTimestampFieldNumber;
const int DataDetails::kTestNameFieldNumber;
const int DataDetails::kSysInfoFieldNumber;
const int DataDetails::kMetricsFieldNumber;
const int DataDetails::kClientConfigFieldNumber;
const int DataDetails::kServerConfigFieldNumber;
#endif  // !_MSC_VER

DataDetails::DataDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.DataDetails)
}

void DataDetails::InitAsDefaultInstance() {
  metrics_ = const_cast< ::grpc::testing::Metrics*>(&::grpc::testing::Metrics::default_instance());
  client_config_ = const_cast< ::grpc::testing::ClientConfig*>(&::grpc::testing::ClientConfig::default_instance());
  server_config_ = const_cast< ::grpc::testing::ServerConfig*>(&::grpc::testing::ServerConfig::default_instance());
}

DataDetails::DataDetails(const DataDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.DataDetails)
}

void DataDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sys_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metrics_ = NULL;
  client_config_ = NULL;
  server_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataDetails::~DataDetails() {
  // @@protoc_insertion_point(destructor:grpc.testing.DataDetails)
  SharedDtor();
}

void DataDetails::SharedDtor() {
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sys_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete metrics_;
    delete client_config_;
    delete server_config_;
  }
}

void DataDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataDetails_descriptor_;
}

const DataDetails& DataDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fdata_2eproto();
  return *default_instance_;
}

DataDetails* DataDetails::default_instance_ = NULL;

DataDetails* DataDetails::New(::google::protobuf::Arena* arena) const {
  DataDetails* n = new DataDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataDetails::Clear() {
  if (_has_bits_[0 / 32] & 63u) {
    if (has_timestamp()) {
      timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_test_name()) {
      test_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sys_info()) {
      sys_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_metrics()) {
      if (metrics_ != NULL) metrics_->::grpc::testing::Metrics::Clear();
    }
    if (has_client_config()) {
      if (client_config_ != NULL) client_config_->::grpc::testing::ClientConfig::Clear();
    }
    if (has_server_config()) {
      if (server_config_ != NULL) server_config_->::grpc::testing::ServerConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DataDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.DataDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string timestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.DataDetails.timestamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_test_name;
        break;
      }

      // optional string test_name = 2;
      case 2: {
        if (tag == 18) {
         parse_test_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_name().data(), this->test_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.DataDetails.test_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sys_info;
        break;
      }

      // optional string sys_info = 3;
      case 3: {
        if (tag == 26) {
         parse_sys_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sys_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sys_info().data(), this->sys_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.DataDetails.sys_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_metrics;
        break;
      }

      // optional .grpc.testing.Metrics metrics = 4;
      case 4: {
        if (tag == 34) {
         parse_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_client_config;
        break;
      }

      // optional .grpc.testing.ClientConfig client_config = 5;
      case 5: {
        if (tag == 42) {
         parse_client_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_server_config;
        break;
      }

      // optional .grpc.testing.ServerConfig server_config = 6;
      case 6: {
        if (tag == 50) {
         parse_server_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.DataDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.DataDetails)
  return false;
#undef DO_
}

void DataDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.DataDetails)
  // optional string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.DataDetails.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->timestamp(), output);
  }

  // optional string test_name = 2;
  if (has_test_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_name().data(), this->test_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.DataDetails.test_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->test_name(), output);
  }

  // optional string sys_info = 3;
  if (has_sys_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sys_info().data(), this->sys_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.DataDetails.sys_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sys_info(), output);
  }

  // optional .grpc.testing.Metrics metrics = 4;
  if (has_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->metrics_, output);
  }

  // optional .grpc.testing.ClientConfig client_config = 5;
  if (has_client_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->client_config_, output);
  }

  // optional .grpc.testing.ServerConfig server_config = 6;
  if (has_server_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->server_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.testing.DataDetails)
}

::google::protobuf::uint8* DataDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.DataDetails)
  // optional string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.DataDetails.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timestamp(), target);
  }

  // optional string test_name = 2;
  if (has_test_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_name().data(), this->test_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.DataDetails.test_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->test_name(), target);
  }

  // optional string sys_info = 3;
  if (has_sys_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sys_info().data(), this->sys_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.DataDetails.sys_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sys_info(), target);
  }

  // optional .grpc.testing.Metrics metrics = 4;
  if (has_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->metrics_, target);
  }

  // optional .grpc.testing.ClientConfig client_config = 5;
  if (has_client_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->client_config_, target);
  }

  // optional .grpc.testing.ServerConfig server_config = 6;
  if (has_server_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->server_config_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.DataDetails)
  return target;
}

int DataDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63) {
    // optional string timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional string test_name = 2;
    if (has_test_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_name());
    }

    // optional string sys_info = 3;
    if (has_sys_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sys_info());
    }

    // optional .grpc.testing.Metrics metrics = 4;
    if (has_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metrics_);
    }

    // optional .grpc.testing.ClientConfig client_config = 5;
    if (has_client_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->client_config_);
    }

    // optional .grpc.testing.ServerConfig server_config = 6;
    if (has_server_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->server_config_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DataDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataDetails::MergeFrom(const DataDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_has_timestamp();
      timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
    }
    if (from.has_test_name()) {
      set_has_test_name();
      test_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.test_name_);
    }
    if (from.has_sys_info()) {
      set_has_sys_info();
      sys_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sys_info_);
    }
    if (from.has_metrics()) {
      mutable_metrics()->::grpc::testing::Metrics::MergeFrom(from.metrics());
    }
    if (from.has_client_config()) {
      mutable_client_config()->::grpc::testing::ClientConfig::MergeFrom(from.client_config());
    }
    if (from.has_server_config()) {
      mutable_server_config()->::grpc::testing::ServerConfig::MergeFrom(from.server_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DataDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataDetails::CopyFrom(const DataDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataDetails::IsInitialized() const {

  return true;
}

void DataDetails::Swap(DataDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataDetails::InternalSwap(DataDetails* other) {
  timestamp_.Swap(&other->timestamp_);
  test_name_.Swap(&other->test_name_);
  sys_info_.Swap(&other->sys_info_);
  std::swap(metrics_, other->metrics_);
  std::swap(client_config_, other->client_config_);
  std::swap(server_config_, other->server_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataDetails_descriptor_;
  metadata.reflection = DataDetails_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataDetails

// optional string timestamp = 1;
bool DataDetails::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataDetails::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void DataDetails::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataDetails::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
 const ::std::string& DataDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:grpc.testing.DataDetails.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataDetails::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.DataDetails.timestamp)
}
 void DataDetails::set_timestamp(const char* value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.DataDetails.timestamp)
}
 void DataDetails::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.DataDetails.timestamp)
}
 ::std::string* DataDetails::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:grpc.testing.DataDetails.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataDetails::release_timestamp() {
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataDetails::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.DataDetails.timestamp)
}

// optional string test_name = 2;
bool DataDetails::has_test_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataDetails::set_has_test_name() {
  _has_bits_[0] |= 0x00000002u;
}
void DataDetails::clear_has_test_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataDetails::clear_test_name() {
  test_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_test_name();
}
 const ::std::string& DataDetails::test_name() const {
  // @@protoc_insertion_point(field_get:grpc.testing.DataDetails.test_name)
  return test_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataDetails::set_test_name(const ::std::string& value) {
  set_has_test_name();
  test_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.DataDetails.test_name)
}
 void DataDetails::set_test_name(const char* value) {
  set_has_test_name();
  test_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.DataDetails.test_name)
}
 void DataDetails::set_test_name(const char* value, size_t size) {
  set_has_test_name();
  test_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.DataDetails.test_name)
}
 ::std::string* DataDetails::mutable_test_name() {
  set_has_test_name();
  // @@protoc_insertion_point(field_mutable:grpc.testing.DataDetails.test_name)
  return test_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataDetails::release_test_name() {
  clear_has_test_name();
  return test_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataDetails::set_allocated_test_name(::std::string* test_name) {
  if (test_name != NULL) {
    set_has_test_name();
  } else {
    clear_has_test_name();
  }
  test_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_name);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.DataDetails.test_name)
}

// optional string sys_info = 3;
bool DataDetails::has_sys_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataDetails::set_has_sys_info() {
  _has_bits_[0] |= 0x00000004u;
}
void DataDetails::clear_has_sys_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataDetails::clear_sys_info() {
  sys_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sys_info();
}
 const ::std::string& DataDetails::sys_info() const {
  // @@protoc_insertion_point(field_get:grpc.testing.DataDetails.sys_info)
  return sys_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataDetails::set_sys_info(const ::std::string& value) {
  set_has_sys_info();
  sys_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.DataDetails.sys_info)
}
 void DataDetails::set_sys_info(const char* value) {
  set_has_sys_info();
  sys_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.DataDetails.sys_info)
}
 void DataDetails::set_sys_info(const char* value, size_t size) {
  set_has_sys_info();
  sys_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.DataDetails.sys_info)
}
 ::std::string* DataDetails::mutable_sys_info() {
  set_has_sys_info();
  // @@protoc_insertion_point(field_mutable:grpc.testing.DataDetails.sys_info)
  return sys_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataDetails::release_sys_info() {
  clear_has_sys_info();
  return sys_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataDetails::set_allocated_sys_info(::std::string* sys_info) {
  if (sys_info != NULL) {
    set_has_sys_info();
  } else {
    clear_has_sys_info();
  }
  sys_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sys_info);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.DataDetails.sys_info)
}

// optional .grpc.testing.Metrics metrics = 4;
bool DataDetails::has_metrics() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataDetails::set_has_metrics() {
  _has_bits_[0] |= 0x00000008u;
}
void DataDetails::clear_has_metrics() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataDetails::clear_metrics() {
  if (metrics_ != NULL) metrics_->::grpc::testing::Metrics::Clear();
  clear_has_metrics();
}
 const ::grpc::testing::Metrics& DataDetails::metrics() const {
  // @@protoc_insertion_point(field_get:grpc.testing.DataDetails.metrics)
  return metrics_ != NULL ? *metrics_ : *default_instance_->metrics_;
}
 ::grpc::testing::Metrics* DataDetails::mutable_metrics() {
  set_has_metrics();
  if (metrics_ == NULL) {
    metrics_ = new ::grpc::testing::Metrics;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.DataDetails.metrics)
  return metrics_;
}
 ::grpc::testing::Metrics* DataDetails::release_metrics() {
  clear_has_metrics();
  ::grpc::testing::Metrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
 void DataDetails::set_allocated_metrics(::grpc::testing::Metrics* metrics) {
  delete metrics_;
  metrics_ = metrics;
  if (metrics) {
    set_has_metrics();
  } else {
    clear_has_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.DataDetails.metrics)
}

// optional .grpc.testing.ClientConfig client_config = 5;
bool DataDetails::has_client_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataDetails::set_has_client_config() {
  _has_bits_[0] |= 0x00000010u;
}
void DataDetails::clear_has_client_config() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataDetails::clear_client_config() {
  if (client_config_ != NULL) client_config_->::grpc::testing::ClientConfig::Clear();
  clear_has_client_config();
}
 const ::grpc::testing::ClientConfig& DataDetails::client_config() const {
  // @@protoc_insertion_point(field_get:grpc.testing.DataDetails.client_config)
  return client_config_ != NULL ? *client_config_ : *default_instance_->client_config_;
}
 ::grpc::testing::ClientConfig* DataDetails::mutable_client_config() {
  set_has_client_config();
  if (client_config_ == NULL) {
    client_config_ = new ::grpc::testing::ClientConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.DataDetails.client_config)
  return client_config_;
}
 ::grpc::testing::ClientConfig* DataDetails::release_client_config() {
  clear_has_client_config();
  ::grpc::testing::ClientConfig* temp = client_config_;
  client_config_ = NULL;
  return temp;
}
 void DataDetails::set_allocated_client_config(::grpc::testing::ClientConfig* client_config) {
  delete client_config_;
  client_config_ = client_config;
  if (client_config) {
    set_has_client_config();
  } else {
    clear_has_client_config();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.DataDetails.client_config)
}

// optional .grpc.testing.ServerConfig server_config = 6;
bool DataDetails::has_server_config() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DataDetails::set_has_server_config() {
  _has_bits_[0] |= 0x00000020u;
}
void DataDetails::clear_has_server_config() {
  _has_bits_[0] &= ~0x00000020u;
}
void DataDetails::clear_server_config() {
  if (server_config_ != NULL) server_config_->::grpc::testing::ServerConfig::Clear();
  clear_has_server_config();
}
 const ::grpc::testing::ServerConfig& DataDetails::server_config() const {
  // @@protoc_insertion_point(field_get:grpc.testing.DataDetails.server_config)
  return server_config_ != NULL ? *server_config_ : *default_instance_->server_config_;
}
 ::grpc::testing::ServerConfig* DataDetails::mutable_server_config() {
  set_has_server_config();
  if (server_config_ == NULL) {
    server_config_ = new ::grpc::testing::ServerConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.DataDetails.server_config)
  return server_config_;
}
 ::grpc::testing::ServerConfig* DataDetails::release_server_config() {
  clear_has_server_config();
  ::grpc::testing::ServerConfig* temp = server_config_;
  server_config_ = NULL;
  return temp;
}
 void DataDetails::set_allocated_server_config(::grpc::testing::ServerConfig* server_config) {
  delete server_config_;
  server_config_ = server_config;
  if (server_config) {
    set_has_server_config();
  } else {
    clear_has_server_config();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.DataDetails.server_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UserDetails::kIdFieldNumber;
const int UserDetails::kEmailFieldNumber;
const int UserDetails::kVerifiedEmailFieldNumber;
const int UserDetails::kNameFieldNumber;
const int UserDetails::kGivenNameFieldNumber;
const int UserDetails::kFamilyNameFieldNumber;
const int UserDetails::kLinkFieldNumber;
const int UserDetails::kPictureFieldNumber;
const int UserDetails::kGenderFieldNumber;
const int UserDetails::kLocaleFieldNumber;
const int UserDetails::kHdFieldNumber;
#endif  // !_MSC_VER

UserDetails::UserDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.UserDetails)
}

void UserDetails::InitAsDefaultInstance() {
}

UserDetails::UserDetails(const UserDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.UserDetails)
}

void UserDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verified_email_ = false;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  given_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDetails::~UserDetails() {
  // @@protoc_insertion_point(destructor:grpc.testing.UserDetails)
  SharedDtor();
}

void UserDetails::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  given_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDetails_descriptor_;
}

const UserDetails& UserDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fdata_2eproto();
  return *default_instance_;
}

UserDetails* UserDetails::default_instance_ = NULL;

UserDetails* UserDetails::New(::google::protobuf::Arena* arena) const {
  UserDetails* n = new UserDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserDetails::Clear() {
  if (_has_bits_[0 / 32] & 255u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_email()) {
      email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    verified_email_ = false;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_given_name()) {
      given_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_family_name()) {
      family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_link()) {
      link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_picture()) {
      picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_gender()) {
      gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_locale()) {
      locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hd()) {
      hd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.UserDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.UserDetails.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_email;
        break;
      }

      // optional string email = 2;
      case 2: {
        if (tag == 18) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.UserDetails.email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_verified_email;
        break;
      }

      // optional bool verified_email = 3;
      case 3: {
        if (tag == 24) {
         parse_verified_email:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verified_email_)));
          set_has_verified_email();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.UserDetails.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_given_name;
        break;
      }

      // optional string given_name = 5;
      case 5: {
        if (tag == 42) {
         parse_given_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_given_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->given_name().data(), this->given_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.UserDetails.given_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_family_name;
        break;
      }

      // optional string family_name = 6;
      case 6: {
        if (tag == 50) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.UserDetails.family_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_link;
        break;
      }

      // optional string link = 7;
      case 7: {
        if (tag == 58) {
         parse_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link().data(), this->link().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.UserDetails.link");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_picture;
        break;
      }

      // optional string picture = 8;
      case 8: {
        if (tag == 66) {
         parse_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picture().data(), this->picture().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.UserDetails.picture");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_gender;
        break;
      }

      // optional string gender = 9;
      case 9: {
        if (tag == 74) {
         parse_gender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gender().data(), this->gender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.UserDetails.gender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_locale;
        break;
      }

      // optional string locale = 10;
      case 10: {
        if (tag == 82) {
         parse_locale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->locale().data(), this->locale().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.UserDetails.locale");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_hd;
        break;
      }

      // optional string hd = 11;
      case 11: {
        if (tag == 90) {
         parse_hd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hd().data(), this->hd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.UserDetails.hd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.UserDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.UserDetails)
  return false;
#undef DO_
}

void UserDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.UserDetails)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string email = 2;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->email(), output);
  }

  // optional bool verified_email = 3;
  if (has_verified_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->verified_email(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string given_name = 5;
  if (has_given_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->given_name().data(), this->given_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.given_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->given_name(), output);
  }

  // optional string family_name = 6;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.family_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->family_name(), output);
  }

  // optional string link = 7;
  if (has_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), this->link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->link(), output);
  }

  // optional string picture = 8;
  if (has_picture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picture().data(), this->picture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.picture");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->picture(), output);
  }

  // optional string gender = 9;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.gender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->gender(), output);
  }

  // optional string locale = 10;
  if (has_locale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->locale().data(), this->locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.locale");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->locale(), output);
  }

  // optional string hd = 11;
  if (has_hd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hd().data(), this->hd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.hd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->hd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.testing.UserDetails)
}

::google::protobuf::uint8* UserDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.UserDetails)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string email = 2;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->email(), target);
  }

  // optional bool verified_email = 3;
  if (has_verified_email()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->verified_email(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string given_name = 5;
  if (has_given_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->given_name().data(), this->given_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.given_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->given_name(), target);
  }

  // optional string family_name = 6;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.family_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->family_name(), target);
  }

  // optional string link = 7;
  if (has_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), this->link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->link(), target);
  }

  // optional string picture = 8;
  if (has_picture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picture().data(), this->picture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.picture");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->picture(), target);
  }

  // optional string gender = 9;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.gender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->gender(), target);
  }

  // optional string locale = 10;
  if (has_locale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->locale().data(), this->locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.locale");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->locale(), target);
  }

  // optional string hd = 11;
  if (has_hd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hd().data(), this->hd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.UserDetails.hd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->hd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.UserDetails)
  return target;
}

int UserDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string email = 2;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional bool verified_email = 3;
    if (has_verified_email()) {
      total_size += 1 + 1;
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string given_name = 5;
    if (has_given_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->given_name());
    }

    // optional string family_name = 6;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

    // optional string link = 7;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link());
    }

    // optional string picture = 8;
    if (has_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picture());
    }

  }
  if (_has_bits_[8 / 32] & 1792) {
    // optional string gender = 9;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gender());
    }

    // optional string locale = 10;
    if (has_locale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locale());
    }

    // optional string hd = 11;
    if (has_hd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hd());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDetails::MergeFrom(const UserDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_email()) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (from.has_verified_email()) {
      set_verified_email(from.verified_email());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_given_name()) {
      set_has_given_name();
      given_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.given_name_);
    }
    if (from.has_family_name()) {
      set_has_family_name();
      family_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_name_);
    }
    if (from.has_link()) {
      set_has_link();
      link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
    }
    if (from.has_picture()) {
      set_has_picture();
      picture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.picture_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gender()) {
      set_has_gender();
      gender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gender_);
    }
    if (from.has_locale()) {
      set_has_locale();
      locale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locale_);
    }
    if (from.has_hd()) {
      set_has_hd();
      hd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hd_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDetails::CopyFrom(const UserDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDetails::IsInitialized() const {

  return true;
}

void UserDetails::Swap(UserDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDetails::InternalSwap(UserDetails* other) {
  id_.Swap(&other->id_);
  email_.Swap(&other->email_);
  std::swap(verified_email_, other->verified_email_);
  name_.Swap(&other->name_);
  given_name_.Swap(&other->given_name_);
  family_name_.Swap(&other->family_name_);
  link_.Swap(&other->link_);
  picture_.Swap(&other->picture_);
  gender_.Swap(&other->gender_);
  locale_.Swap(&other->locale_);
  hd_.Swap(&other->hd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDetails_descriptor_;
  metadata.reflection = UserDetails_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserDetails

// optional string id = 1;
bool UserDetails::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserDetails::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserDetails::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& UserDetails::id() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.id)
}
 void UserDetails::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.id)
}
 void UserDetails::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.id)
}
 ::std::string* UserDetails::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDetails::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.id)
}

// optional string email = 2;
bool UserDetails::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserDetails::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
void UserDetails::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserDetails::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
 const ::std::string& UserDetails::email() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.email)
}
 void UserDetails::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.email)
}
 void UserDetails::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.email)
}
 ::std::string* UserDetails::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDetails::release_email() {
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.email)
}

// optional bool verified_email = 3;
bool UserDetails::has_verified_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserDetails::set_has_verified_email() {
  _has_bits_[0] |= 0x00000004u;
}
void UserDetails::clear_has_verified_email() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserDetails::clear_verified_email() {
  verified_email_ = false;
  clear_has_verified_email();
}
 bool UserDetails::verified_email() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.verified_email)
  return verified_email_;
}
 void UserDetails::set_verified_email(bool value) {
  set_has_verified_email();
  verified_email_ = value;
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.verified_email)
}

// optional string name = 4;
bool UserDetails::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserDetails::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
void UserDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& UserDetails::name() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.name)
}
 void UserDetails::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.name)
}
 void UserDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.name)
}
 ::std::string* UserDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDetails::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.name)
}

// optional string given_name = 5;
bool UserDetails::has_given_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserDetails::set_has_given_name() {
  _has_bits_[0] |= 0x00000010u;
}
void UserDetails::clear_has_given_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserDetails::clear_given_name() {
  given_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_given_name();
}
 const ::std::string& UserDetails::given_name() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.given_name)
  return given_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_given_name(const ::std::string& value) {
  set_has_given_name();
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.given_name)
}
 void UserDetails::set_given_name(const char* value) {
  set_has_given_name();
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.given_name)
}
 void UserDetails::set_given_name(const char* value, size_t size) {
  set_has_given_name();
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.given_name)
}
 ::std::string* UserDetails::mutable_given_name() {
  set_has_given_name();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.given_name)
  return given_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDetails::release_given_name() {
  clear_has_given_name();
  return given_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_allocated_given_name(::std::string* given_name) {
  if (given_name != NULL) {
    set_has_given_name();
  } else {
    clear_has_given_name();
  }
  given_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), given_name);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.given_name)
}

// optional string family_name = 6;
bool UserDetails::has_family_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserDetails::set_has_family_name() {
  _has_bits_[0] |= 0x00000020u;
}
void UserDetails::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserDetails::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_family_name();
}
 const ::std::string& UserDetails::family_name() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.family_name)
  return family_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_family_name(const ::std::string& value) {
  set_has_family_name();
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.family_name)
}
 void UserDetails::set_family_name(const char* value) {
  set_has_family_name();
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.family_name)
}
 void UserDetails::set_family_name(const char* value, size_t size) {
  set_has_family_name();
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.family_name)
}
 ::std::string* UserDetails::mutable_family_name() {
  set_has_family_name();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDetails::release_family_name() {
  clear_has_family_name();
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    set_has_family_name();
  } else {
    clear_has_family_name();
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.family_name)
}

// optional string link = 7;
bool UserDetails::has_link() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserDetails::set_has_link() {
  _has_bits_[0] |= 0x00000040u;
}
void UserDetails::clear_has_link() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserDetails::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link();
}
 const ::std::string& UserDetails::link() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.link)
  return link_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_link(const ::std::string& value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.link)
}
 void UserDetails::set_link(const char* value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.link)
}
 void UserDetails::set_link(const char* value, size_t size) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.link)
}
 ::std::string* UserDetails::mutable_link() {
  set_has_link();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDetails::release_link() {
  clear_has_link();
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_allocated_link(::std::string* link) {
  if (link != NULL) {
    set_has_link();
  } else {
    clear_has_link();
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.link)
}

// optional string picture = 8;
bool UserDetails::has_picture() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserDetails::set_has_picture() {
  _has_bits_[0] |= 0x00000080u;
}
void UserDetails::clear_has_picture() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserDetails::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_picture();
}
 const ::std::string& UserDetails::picture() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.picture)
  return picture_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_picture(const ::std::string& value) {
  set_has_picture();
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.picture)
}
 void UserDetails::set_picture(const char* value) {
  set_has_picture();
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.picture)
}
 void UserDetails::set_picture(const char* value, size_t size) {
  set_has_picture();
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.picture)
}
 ::std::string* UserDetails::mutable_picture() {
  set_has_picture();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDetails::release_picture() {
  clear_has_picture();
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_allocated_picture(::std::string* picture) {
  if (picture != NULL) {
    set_has_picture();
  } else {
    clear_has_picture();
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.picture)
}

// optional string gender = 9;
bool UserDetails::has_gender() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserDetails::set_has_gender() {
  _has_bits_[0] |= 0x00000100u;
}
void UserDetails::clear_has_gender() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserDetails::clear_gender() {
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gender();
}
 const ::std::string& UserDetails::gender() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.gender)
  return gender_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_gender(const ::std::string& value) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.gender)
}
 void UserDetails::set_gender(const char* value) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.gender)
}
 void UserDetails::set_gender(const char* value, size_t size) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.gender)
}
 ::std::string* UserDetails::mutable_gender() {
  set_has_gender();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.gender)
  return gender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDetails::release_gender() {
  clear_has_gender();
  return gender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_allocated_gender(::std::string* gender) {
  if (gender != NULL) {
    set_has_gender();
  } else {
    clear_has_gender();
  }
  gender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gender);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.gender)
}

// optional string locale = 10;
bool UserDetails::has_locale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserDetails::set_has_locale() {
  _has_bits_[0] |= 0x00000200u;
}
void UserDetails::clear_has_locale() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserDetails::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locale();
}
 const ::std::string& UserDetails::locale() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.locale)
  return locale_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_locale(const ::std::string& value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.locale)
}
 void UserDetails::set_locale(const char* value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.locale)
}
 void UserDetails::set_locale(const char* value, size_t size) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.locale)
}
 ::std::string* UserDetails::mutable_locale() {
  set_has_locale();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDetails::release_locale() {
  clear_has_locale();
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    set_has_locale();
  } else {
    clear_has_locale();
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.locale)
}

// optional string hd = 11;
bool UserDetails::has_hd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserDetails::set_has_hd() {
  _has_bits_[0] |= 0x00000400u;
}
void UserDetails::clear_has_hd() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserDetails::clear_hd() {
  hd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hd();
}
 const ::std::string& UserDetails::hd() const {
  // @@protoc_insertion_point(field_get:grpc.testing.UserDetails.hd)
  return hd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_hd(const ::std::string& value) {
  set_has_hd();
  hd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.UserDetails.hd)
}
 void UserDetails::set_hd(const char* value) {
  set_has_hd();
  hd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.UserDetails.hd)
}
 void UserDetails::set_hd(const char* value, size_t size) {
  set_has_hd();
  hd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.UserDetails.hd)
}
 ::std::string* UserDetails::mutable_hd() {
  set_has_hd();
  // @@protoc_insertion_point(field_mutable:grpc.testing.UserDetails.hd)
  return hd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDetails::release_hd() {
  clear_has_hd();
  return hd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDetails::set_allocated_hd(::std::string* hd) {
  if (hd != NULL) {
    set_has_hd();
  } else {
    clear_has_hd();
  }
  hd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hd);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.UserDetails.hd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SingleUserDetails::kDataDetailsFieldNumber;
const int SingleUserDetails::kUserDetailsFieldNumber;
#endif  // !_MSC_VER

SingleUserDetails::SingleUserDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.SingleUserDetails)
}

void SingleUserDetails::InitAsDefaultInstance() {
  user_details_ = const_cast< ::grpc::testing::UserDetails*>(&::grpc::testing::UserDetails::default_instance());
}

SingleUserDetails::SingleUserDetails(const SingleUserDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.SingleUserDetails)
}

void SingleUserDetails::SharedCtor() {
  _cached_size_ = 0;
  user_details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleUserDetails::~SingleUserDetails() {
  // @@protoc_insertion_point(destructor:grpc.testing.SingleUserDetails)
  SharedDtor();
}

void SingleUserDetails::SharedDtor() {
  if (this != default_instance_) {
    delete user_details_;
  }
}

void SingleUserDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleUserDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleUserDetails_descriptor_;
}

const SingleUserDetails& SingleUserDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fdata_2eproto();
  return *default_instance_;
}

SingleUserDetails* SingleUserDetails::default_instance_ = NULL;

SingleUserDetails* SingleUserDetails::New(::google::protobuf::Arena* arena) const {
  SingleUserDetails* n = new SingleUserDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleUserDetails::Clear() {
  if (has_user_details()) {
    if (user_details_ != NULL) user_details_->::grpc::testing::UserDetails::Clear();
  }
  data_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SingleUserDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.SingleUserDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .grpc.testing.DataDetails data_details = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data_details;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_user_details;
        break;
      }

      // optional .grpc.testing.UserDetails user_details = 2;
      case 2: {
        if (tag == 18) {
         parse_user_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.SingleUserDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.SingleUserDetails)
  return false;
#undef DO_
}

void SingleUserDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.SingleUserDetails)
  // repeated .grpc.testing.DataDetails data_details = 1;
  for (unsigned int i = 0, n = this->data_details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_details(i), output);
  }

  // optional .grpc.testing.UserDetails user_details = 2;
  if (has_user_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->user_details_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.testing.SingleUserDetails)
}

::google::protobuf::uint8* SingleUserDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.SingleUserDetails)
  // repeated .grpc.testing.DataDetails data_details = 1;
  for (unsigned int i = 0, n = this->data_details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_details(i), target);
  }

  // optional .grpc.testing.UserDetails user_details = 2;
  if (has_user_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->user_details_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.SingleUserDetails)
  return target;
}

int SingleUserDetails::ByteSize() const {
  int total_size = 0;

  // optional .grpc.testing.UserDetails user_details = 2;
  if (has_user_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_details_);
  }

  // repeated .grpc.testing.DataDetails data_details = 1;
  total_size += 1 * this->data_details_size();
  for (int i = 0; i < this->data_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_details(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleUserDetails::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SingleUserDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleUserDetails>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleUserDetails::MergeFrom(const SingleUserDetails& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_details_.MergeFrom(from.data_details_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_user_details()) {
      mutable_user_details()->::grpc::testing::UserDetails::MergeFrom(from.user_details());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SingleUserDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleUserDetails::CopyFrom(const SingleUserDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleUserDetails::IsInitialized() const {

  return true;
}

void SingleUserDetails::Swap(SingleUserDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleUserDetails::InternalSwap(SingleUserDetails* other) {
  data_details_.UnsafeArenaSwap(&other->data_details_);
  std::swap(user_details_, other->user_details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleUserDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleUserDetails_descriptor_;
  metadata.reflection = SingleUserDetails_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleUserDetails

// repeated .grpc.testing.DataDetails data_details = 1;
int SingleUserDetails::data_details_size() const {
  return data_details_.size();
}
void SingleUserDetails::clear_data_details() {
  data_details_.Clear();
}
 const ::grpc::testing::DataDetails& SingleUserDetails::data_details(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserDetails.data_details)
  return data_details_.Get(index);
}
 ::grpc::testing::DataDetails* SingleUserDetails::mutable_data_details(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserDetails.data_details)
  return data_details_.Mutable(index);
}
 ::grpc::testing::DataDetails* SingleUserDetails::add_data_details() {
  // @@protoc_insertion_point(field_add:grpc.testing.SingleUserDetails.data_details)
  return data_details_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::grpc::testing::DataDetails >&
SingleUserDetails::data_details() const {
  // @@protoc_insertion_point(field_list:grpc.testing.SingleUserDetails.data_details)
  return data_details_;
}
 ::google::protobuf::RepeatedPtrField< ::grpc::testing::DataDetails >*
SingleUserDetails::mutable_data_details() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.SingleUserDetails.data_details)
  return &data_details_;
}

// optional .grpc.testing.UserDetails user_details = 2;
bool SingleUserDetails::has_user_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SingleUserDetails::set_has_user_details() {
  _has_bits_[0] |= 0x00000002u;
}
void SingleUserDetails::clear_has_user_details() {
  _has_bits_[0] &= ~0x00000002u;
}
void SingleUserDetails::clear_user_details() {
  if (user_details_ != NULL) user_details_->::grpc::testing::UserDetails::Clear();
  clear_has_user_details();
}
 const ::grpc::testing::UserDetails& SingleUserDetails::user_details() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserDetails.user_details)
  return user_details_ != NULL ? *user_details_ : *default_instance_->user_details_;
}
 ::grpc::testing::UserDetails* SingleUserDetails::mutable_user_details() {
  set_has_user_details();
  if (user_details_ == NULL) {
    user_details_ = new ::grpc::testing::UserDetails;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserDetails.user_details)
  return user_details_;
}
 ::grpc::testing::UserDetails* SingleUserDetails::release_user_details() {
  clear_has_user_details();
  ::grpc::testing::UserDetails* temp = user_details_;
  user_details_ = NULL;
  return temp;
}
 void SingleUserDetails::set_allocated_user_details(::grpc::testing::UserDetails* user_details) {
  delete user_details_;
  user_details_ = user_details;
  if (user_details) {
    set_has_user_details();
  } else {
    clear_has_user_details();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserDetails.user_details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SingleUserRecordRequest::kAccessTokenFieldNumber;
const int SingleUserRecordRequest::kTestNameFieldNumber;
const int SingleUserRecordRequest::kSysInfoFieldNumber;
const int SingleUserRecordRequest::kMetricsFieldNumber;
const int SingleUserRecordRequest::kClientConfigFieldNumber;
const int SingleUserRecordRequest::kServerConfigFieldNumber;
#endif  // !_MSC_VER

SingleUserRecordRequest::SingleUserRecordRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.SingleUserRecordRequest)
}

void SingleUserRecordRequest::InitAsDefaultInstance() {
  metrics_ = const_cast< ::grpc::testing::Metrics*>(&::grpc::testing::Metrics::default_instance());
  client_config_ = const_cast< ::grpc::testing::ClientConfig*>(&::grpc::testing::ClientConfig::default_instance());
  server_config_ = const_cast< ::grpc::testing::ServerConfig*>(&::grpc::testing::ServerConfig::default_instance());
}

SingleUserRecordRequest::SingleUserRecordRequest(const SingleUserRecordRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.SingleUserRecordRequest)
}

void SingleUserRecordRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sys_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metrics_ = NULL;
  client_config_ = NULL;
  server_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleUserRecordRequest::~SingleUserRecordRequest() {
  // @@protoc_insertion_point(destructor:grpc.testing.SingleUserRecordRequest)
  SharedDtor();
}

void SingleUserRecordRequest::SharedDtor() {
  access_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sys_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete metrics_;
    delete client_config_;
    delete server_config_;
  }
}

void SingleUserRecordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleUserRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleUserRecordRequest_descriptor_;
}

const SingleUserRecordRequest& SingleUserRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fdata_2eproto();
  return *default_instance_;
}

SingleUserRecordRequest* SingleUserRecordRequest::default_instance_ = NULL;

SingleUserRecordRequest* SingleUserRecordRequest::New(::google::protobuf::Arena* arena) const {
  SingleUserRecordRequest* n = new SingleUserRecordRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleUserRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & 63u) {
    if (has_access_token()) {
      access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_test_name()) {
      test_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sys_info()) {
      sys_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_metrics()) {
      if (metrics_ != NULL) metrics_->::grpc::testing::Metrics::Clear();
    }
    if (has_client_config()) {
      if (client_config_ != NULL) client_config_->::grpc::testing::ClientConfig::Clear();
    }
    if (has_server_config()) {
      if (server_config_ != NULL) server_config_->::grpc::testing::ServerConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SingleUserRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.SingleUserRecordRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.SingleUserRecordRequest.access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_test_name;
        break;
      }

      // optional string test_name = 2;
      case 2: {
        if (tag == 18) {
         parse_test_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_name().data(), this->test_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.SingleUserRecordRequest.test_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sys_info;
        break;
      }

      // optional string sys_info = 3;
      case 3: {
        if (tag == 26) {
         parse_sys_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sys_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sys_info().data(), this->sys_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.SingleUserRecordRequest.sys_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_metrics;
        break;
      }

      // optional .grpc.testing.Metrics metrics = 4;
      case 4: {
        if (tag == 34) {
         parse_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_client_config;
        break;
      }

      // optional .grpc.testing.ClientConfig client_config = 5;
      case 5: {
        if (tag == 42) {
         parse_client_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_server_config;
        break;
      }

      // optional .grpc.testing.ServerConfig server_config = 6;
      case 6: {
        if (tag == 50) {
         parse_server_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.SingleUserRecordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.SingleUserRecordRequest)
  return false;
#undef DO_
}

void SingleUserRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.SingleUserRecordRequest)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.SingleUserRecordRequest.access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string test_name = 2;
  if (has_test_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_name().data(), this->test_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.SingleUserRecordRequest.test_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->test_name(), output);
  }

  // optional string sys_info = 3;
  if (has_sys_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sys_info().data(), this->sys_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.SingleUserRecordRequest.sys_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sys_info(), output);
  }

  // optional .grpc.testing.Metrics metrics = 4;
  if (has_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->metrics_, output);
  }

  // optional .grpc.testing.ClientConfig client_config = 5;
  if (has_client_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->client_config_, output);
  }

  // optional .grpc.testing.ServerConfig server_config = 6;
  if (has_server_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->server_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.testing.SingleUserRecordRequest)
}

::google::protobuf::uint8* SingleUserRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.SingleUserRecordRequest)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.SingleUserRecordRequest.access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string test_name = 2;
  if (has_test_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_name().data(), this->test_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.SingleUserRecordRequest.test_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->test_name(), target);
  }

  // optional string sys_info = 3;
  if (has_sys_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sys_info().data(), this->sys_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.SingleUserRecordRequest.sys_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sys_info(), target);
  }

  // optional .grpc.testing.Metrics metrics = 4;
  if (has_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->metrics_, target);
  }

  // optional .grpc.testing.ClientConfig client_config = 5;
  if (has_client_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->client_config_, target);
  }

  // optional .grpc.testing.ServerConfig server_config = 6;
  if (has_server_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->server_config_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.SingleUserRecordRequest)
  return target;
}

int SingleUserRecordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string test_name = 2;
    if (has_test_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_name());
    }

    // optional string sys_info = 3;
    if (has_sys_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sys_info());
    }

    // optional .grpc.testing.Metrics metrics = 4;
    if (has_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metrics_);
    }

    // optional .grpc.testing.ClientConfig client_config = 5;
    if (has_client_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->client_config_);
    }

    // optional .grpc.testing.ServerConfig server_config = 6;
    if (has_server_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->server_config_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleUserRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SingleUserRecordRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleUserRecordRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleUserRecordRequest::MergeFrom(const SingleUserRecordRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_has_access_token();
      access_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_token_);
    }
    if (from.has_test_name()) {
      set_has_test_name();
      test_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.test_name_);
    }
    if (from.has_sys_info()) {
      set_has_sys_info();
      sys_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sys_info_);
    }
    if (from.has_metrics()) {
      mutable_metrics()->::grpc::testing::Metrics::MergeFrom(from.metrics());
    }
    if (from.has_client_config()) {
      mutable_client_config()->::grpc::testing::ClientConfig::MergeFrom(from.client_config());
    }
    if (from.has_server_config()) {
      mutable_server_config()->::grpc::testing::ServerConfig::MergeFrom(from.server_config());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SingleUserRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleUserRecordRequest::CopyFrom(const SingleUserRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleUserRecordRequest::IsInitialized() const {

  return true;
}

void SingleUserRecordRequest::Swap(SingleUserRecordRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleUserRecordRequest::InternalSwap(SingleUserRecordRequest* other) {
  access_token_.Swap(&other->access_token_);
  test_name_.Swap(&other->test_name_);
  sys_info_.Swap(&other->sys_info_);
  std::swap(metrics_, other->metrics_);
  std::swap(client_config_, other->client_config_);
  std::swap(server_config_, other->server_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleUserRecordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleUserRecordRequest_descriptor_;
  metadata.reflection = SingleUserRecordRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleUserRecordRequest

// optional string access_token = 1;
bool SingleUserRecordRequest::has_access_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SingleUserRecordRequest::set_has_access_token() {
  _has_bits_[0] |= 0x00000001u;
}
void SingleUserRecordRequest::clear_has_access_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void SingleUserRecordRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_access_token();
}
 const ::std::string& SingleUserRecordRequest::access_token() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRecordRequest.access_token)
  return access_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleUserRecordRequest::set_access_token(const ::std::string& value) {
  set_has_access_token();
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.SingleUserRecordRequest.access_token)
}
 void SingleUserRecordRequest::set_access_token(const char* value) {
  set_has_access_token();
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.SingleUserRecordRequest.access_token)
}
 void SingleUserRecordRequest::set_access_token(const char* value, size_t size) {
  set_has_access_token();
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.SingleUserRecordRequest.access_token)
}
 ::std::string* SingleUserRecordRequest::mutable_access_token() {
  set_has_access_token();
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRecordRequest.access_token)
  return access_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SingleUserRecordRequest::release_access_token() {
  clear_has_access_token();
  return access_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleUserRecordRequest::set_allocated_access_token(::std::string* access_token) {
  if (access_token != NULL) {
    set_has_access_token();
  } else {
    clear_has_access_token();
  }
  access_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRecordRequest.access_token)
}

// optional string test_name = 2;
bool SingleUserRecordRequest::has_test_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SingleUserRecordRequest::set_has_test_name() {
  _has_bits_[0] |= 0x00000002u;
}
void SingleUserRecordRequest::clear_has_test_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void SingleUserRecordRequest::clear_test_name() {
  test_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_test_name();
}
 const ::std::string& SingleUserRecordRequest::test_name() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRecordRequest.test_name)
  return test_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleUserRecordRequest::set_test_name(const ::std::string& value) {
  set_has_test_name();
  test_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.SingleUserRecordRequest.test_name)
}
 void SingleUserRecordRequest::set_test_name(const char* value) {
  set_has_test_name();
  test_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.SingleUserRecordRequest.test_name)
}
 void SingleUserRecordRequest::set_test_name(const char* value, size_t size) {
  set_has_test_name();
  test_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.SingleUserRecordRequest.test_name)
}
 ::std::string* SingleUserRecordRequest::mutable_test_name() {
  set_has_test_name();
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRecordRequest.test_name)
  return test_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SingleUserRecordRequest::release_test_name() {
  clear_has_test_name();
  return test_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleUserRecordRequest::set_allocated_test_name(::std::string* test_name) {
  if (test_name != NULL) {
    set_has_test_name();
  } else {
    clear_has_test_name();
  }
  test_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_name);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRecordRequest.test_name)
}

// optional string sys_info = 3;
bool SingleUserRecordRequest::has_sys_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SingleUserRecordRequest::set_has_sys_info() {
  _has_bits_[0] |= 0x00000004u;
}
void SingleUserRecordRequest::clear_has_sys_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void SingleUserRecordRequest::clear_sys_info() {
  sys_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sys_info();
}
 const ::std::string& SingleUserRecordRequest::sys_info() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRecordRequest.sys_info)
  return sys_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleUserRecordRequest::set_sys_info(const ::std::string& value) {
  set_has_sys_info();
  sys_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.SingleUserRecordRequest.sys_info)
}
 void SingleUserRecordRequest::set_sys_info(const char* value) {
  set_has_sys_info();
  sys_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.SingleUserRecordRequest.sys_info)
}
 void SingleUserRecordRequest::set_sys_info(const char* value, size_t size) {
  set_has_sys_info();
  sys_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.SingleUserRecordRequest.sys_info)
}
 ::std::string* SingleUserRecordRequest::mutable_sys_info() {
  set_has_sys_info();
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRecordRequest.sys_info)
  return sys_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SingleUserRecordRequest::release_sys_info() {
  clear_has_sys_info();
  return sys_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleUserRecordRequest::set_allocated_sys_info(::std::string* sys_info) {
  if (sys_info != NULL) {
    set_has_sys_info();
  } else {
    clear_has_sys_info();
  }
  sys_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sys_info);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRecordRequest.sys_info)
}

// optional .grpc.testing.Metrics metrics = 4;
bool SingleUserRecordRequest::has_metrics() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SingleUserRecordRequest::set_has_metrics() {
  _has_bits_[0] |= 0x00000008u;
}
void SingleUserRecordRequest::clear_has_metrics() {
  _has_bits_[0] &= ~0x00000008u;
}
void SingleUserRecordRequest::clear_metrics() {
  if (metrics_ != NULL) metrics_->::grpc::testing::Metrics::Clear();
  clear_has_metrics();
}
 const ::grpc::testing::Metrics& SingleUserRecordRequest::metrics() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRecordRequest.metrics)
  return metrics_ != NULL ? *metrics_ : *default_instance_->metrics_;
}
 ::grpc::testing::Metrics* SingleUserRecordRequest::mutable_metrics() {
  set_has_metrics();
  if (metrics_ == NULL) {
    metrics_ = new ::grpc::testing::Metrics;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRecordRequest.metrics)
  return metrics_;
}
 ::grpc::testing::Metrics* SingleUserRecordRequest::release_metrics() {
  clear_has_metrics();
  ::grpc::testing::Metrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
 void SingleUserRecordRequest::set_allocated_metrics(::grpc::testing::Metrics* metrics) {
  delete metrics_;
  metrics_ = metrics;
  if (metrics) {
    set_has_metrics();
  } else {
    clear_has_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRecordRequest.metrics)
}

// optional .grpc.testing.ClientConfig client_config = 5;
bool SingleUserRecordRequest::has_client_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SingleUserRecordRequest::set_has_client_config() {
  _has_bits_[0] |= 0x00000010u;
}
void SingleUserRecordRequest::clear_has_client_config() {
  _has_bits_[0] &= ~0x00000010u;
}
void SingleUserRecordRequest::clear_client_config() {
  if (client_config_ != NULL) client_config_->::grpc::testing::ClientConfig::Clear();
  clear_has_client_config();
}
 const ::grpc::testing::ClientConfig& SingleUserRecordRequest::client_config() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRecordRequest.client_config)
  return client_config_ != NULL ? *client_config_ : *default_instance_->client_config_;
}
 ::grpc::testing::ClientConfig* SingleUserRecordRequest::mutable_client_config() {
  set_has_client_config();
  if (client_config_ == NULL) {
    client_config_ = new ::grpc::testing::ClientConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRecordRequest.client_config)
  return client_config_;
}
 ::grpc::testing::ClientConfig* SingleUserRecordRequest::release_client_config() {
  clear_has_client_config();
  ::grpc::testing::ClientConfig* temp = client_config_;
  client_config_ = NULL;
  return temp;
}
 void SingleUserRecordRequest::set_allocated_client_config(::grpc::testing::ClientConfig* client_config) {
  delete client_config_;
  client_config_ = client_config;
  if (client_config) {
    set_has_client_config();
  } else {
    clear_has_client_config();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRecordRequest.client_config)
}

// optional .grpc.testing.ServerConfig server_config = 6;
bool SingleUserRecordRequest::has_server_config() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SingleUserRecordRequest::set_has_server_config() {
  _has_bits_[0] |= 0x00000020u;
}
void SingleUserRecordRequest::clear_has_server_config() {
  _has_bits_[0] &= ~0x00000020u;
}
void SingleUserRecordRequest::clear_server_config() {
  if (server_config_ != NULL) server_config_->::grpc::testing::ServerConfig::Clear();
  clear_has_server_config();
}
 const ::grpc::testing::ServerConfig& SingleUserRecordRequest::server_config() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRecordRequest.server_config)
  return server_config_ != NULL ? *server_config_ : *default_instance_->server_config_;
}
 ::grpc::testing::ServerConfig* SingleUserRecordRequest::mutable_server_config() {
  set_has_server_config();
  if (server_config_ == NULL) {
    server_config_ = new ::grpc::testing::ServerConfig;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRecordRequest.server_config)
  return server_config_;
}
 ::grpc::testing::ServerConfig* SingleUserRecordRequest::release_server_config() {
  clear_has_server_config();
  ::grpc::testing::ServerConfig* temp = server_config_;
  server_config_ = NULL;
  return temp;
}
 void SingleUserRecordRequest::set_allocated_server_config(::grpc::testing::ServerConfig* server_config) {
  delete server_config_;
  server_config_ = server_config;
  if (server_config) {
    set_has_server_config();
  } else {
    clear_has_server_config();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRecordRequest.server_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SingleUserRecordReply::SingleUserRecordReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.SingleUserRecordReply)
}

void SingleUserRecordReply::InitAsDefaultInstance() {
}

SingleUserRecordReply::SingleUserRecordReply(const SingleUserRecordReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.SingleUserRecordReply)
}

void SingleUserRecordReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleUserRecordReply::~SingleUserRecordReply() {
  // @@protoc_insertion_point(destructor:grpc.testing.SingleUserRecordReply)
  SharedDtor();
}

void SingleUserRecordReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleUserRecordReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleUserRecordReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleUserRecordReply_descriptor_;
}

const SingleUserRecordReply& SingleUserRecordReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fdata_2eproto();
  return *default_instance_;
}

SingleUserRecordReply* SingleUserRecordReply::default_instance_ = NULL;

SingleUserRecordReply* SingleUserRecordReply::New(::google::protobuf::Arena* arena) const {
  SingleUserRecordReply* n = new SingleUserRecordReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleUserRecordReply::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SingleUserRecordReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.SingleUserRecordReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.SingleUserRecordReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.SingleUserRecordReply)
  return false;
#undef DO_
}

void SingleUserRecordReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.SingleUserRecordReply)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.testing.SingleUserRecordReply)
}

::google::protobuf::uint8* SingleUserRecordReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.SingleUserRecordReply)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.SingleUserRecordReply)
  return target;
}

int SingleUserRecordReply::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleUserRecordReply::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SingleUserRecordReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleUserRecordReply>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleUserRecordReply::MergeFrom(const SingleUserRecordReply& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SingleUserRecordReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleUserRecordReply::CopyFrom(const SingleUserRecordReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleUserRecordReply::IsInitialized() const {

  return true;
}

void SingleUserRecordReply::Swap(SingleUserRecordReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleUserRecordReply::InternalSwap(SingleUserRecordReply* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleUserRecordReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleUserRecordReply_descriptor_;
  metadata.reflection = SingleUserRecordReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleUserRecordReply

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SingleUserRetrieveRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

SingleUserRetrieveRequest::SingleUserRetrieveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.SingleUserRetrieveRequest)
}

void SingleUserRetrieveRequest::InitAsDefaultInstance() {
}

SingleUserRetrieveRequest::SingleUserRetrieveRequest(const SingleUserRetrieveRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.SingleUserRetrieveRequest)
}

void SingleUserRetrieveRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleUserRetrieveRequest::~SingleUserRetrieveRequest() {
  // @@protoc_insertion_point(destructor:grpc.testing.SingleUserRetrieveRequest)
  SharedDtor();
}

void SingleUserRetrieveRequest::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SingleUserRetrieveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleUserRetrieveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleUserRetrieveRequest_descriptor_;
}

const SingleUserRetrieveRequest& SingleUserRetrieveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fdata_2eproto();
  return *default_instance_;
}

SingleUserRetrieveRequest* SingleUserRetrieveRequest::default_instance_ = NULL;

SingleUserRetrieveRequest* SingleUserRetrieveRequest::New(::google::protobuf::Arena* arena) const {
  SingleUserRetrieveRequest* n = new SingleUserRetrieveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleUserRetrieveRequest::Clear() {
  if (has_user_id()) {
    user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SingleUserRetrieveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.SingleUserRetrieveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grpc.testing.SingleUserRetrieveRequest.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.SingleUserRetrieveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.SingleUserRetrieveRequest)
  return false;
#undef DO_
}

void SingleUserRetrieveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.SingleUserRetrieveRequest)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.SingleUserRetrieveRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.testing.SingleUserRetrieveRequest)
}

::google::protobuf::uint8* SingleUserRetrieveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.SingleUserRetrieveRequest)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grpc.testing.SingleUserRetrieveRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.SingleUserRetrieveRequest)
  return target;
}

int SingleUserRetrieveRequest::ByteSize() const {
  int total_size = 0;

  // optional string user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleUserRetrieveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SingleUserRetrieveRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleUserRetrieveRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleUserRetrieveRequest::MergeFrom(const SingleUserRetrieveRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SingleUserRetrieveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleUserRetrieveRequest::CopyFrom(const SingleUserRetrieveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleUserRetrieveRequest::IsInitialized() const {

  return true;
}

void SingleUserRetrieveRequest::Swap(SingleUserRetrieveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleUserRetrieveRequest::InternalSwap(SingleUserRetrieveRequest* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleUserRetrieveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleUserRetrieveRequest_descriptor_;
  metadata.reflection = SingleUserRetrieveRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleUserRetrieveRequest

// optional string user_id = 1;
bool SingleUserRetrieveRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SingleUserRetrieveRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SingleUserRetrieveRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SingleUserRetrieveRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& SingleUserRetrieveRequest::user_id() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRetrieveRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleUserRetrieveRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc.testing.SingleUserRetrieveRequest.user_id)
}
 void SingleUserRetrieveRequest::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc.testing.SingleUserRetrieveRequest.user_id)
}
 void SingleUserRetrieveRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc.testing.SingleUserRetrieveRequest.user_id)
}
 ::std::string* SingleUserRetrieveRequest::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRetrieveRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SingleUserRetrieveRequest::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SingleUserRetrieveRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRetrieveRequest.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SingleUserRetrieveReply::kDetailsFieldNumber;
#endif  // !_MSC_VER

SingleUserRetrieveReply::SingleUserRetrieveReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.SingleUserRetrieveReply)
}

void SingleUserRetrieveReply::InitAsDefaultInstance() {
  details_ = const_cast< ::grpc::testing::SingleUserDetails*>(&::grpc::testing::SingleUserDetails::default_instance());
}

SingleUserRetrieveReply::SingleUserRetrieveReply(const SingleUserRetrieveReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.SingleUserRetrieveReply)
}

void SingleUserRetrieveReply::SharedCtor() {
  _cached_size_ = 0;
  details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleUserRetrieveReply::~SingleUserRetrieveReply() {
  // @@protoc_insertion_point(destructor:grpc.testing.SingleUserRetrieveReply)
  SharedDtor();
}

void SingleUserRetrieveReply::SharedDtor() {
  if (this != default_instance_) {
    delete details_;
  }
}

void SingleUserRetrieveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleUserRetrieveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleUserRetrieveReply_descriptor_;
}

const SingleUserRetrieveReply& SingleUserRetrieveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fdata_2eproto();
  return *default_instance_;
}

SingleUserRetrieveReply* SingleUserRetrieveReply::default_instance_ = NULL;

SingleUserRetrieveReply* SingleUserRetrieveReply::New(::google::protobuf::Arena* arena) const {
  SingleUserRetrieveReply* n = new SingleUserRetrieveReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleUserRetrieveReply::Clear() {
  if (has_details()) {
    if (details_ != NULL) details_->::grpc::testing::SingleUserDetails::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SingleUserRetrieveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.SingleUserRetrieveReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .grpc.testing.SingleUserDetails details = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.SingleUserRetrieveReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.SingleUserRetrieveReply)
  return false;
#undef DO_
}

void SingleUserRetrieveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.SingleUserRetrieveReply)
  // optional .grpc.testing.SingleUserDetails details = 1;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->details_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.testing.SingleUserRetrieveReply)
}

::google::protobuf::uint8* SingleUserRetrieveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.SingleUserRetrieveReply)
  // optional .grpc.testing.SingleUserDetails details = 1;
  if (has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->details_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.SingleUserRetrieveReply)
  return target;
}

int SingleUserRetrieveReply::ByteSize() const {
  int total_size = 0;

  // optional .grpc.testing.SingleUserDetails details = 1;
  if (has_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->details_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleUserRetrieveReply::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SingleUserRetrieveReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleUserRetrieveReply>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleUserRetrieveReply::MergeFrom(const SingleUserRetrieveReply& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_details()) {
      mutable_details()->::grpc::testing::SingleUserDetails::MergeFrom(from.details());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SingleUserRetrieveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleUserRetrieveReply::CopyFrom(const SingleUserRetrieveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleUserRetrieveReply::IsInitialized() const {

  return true;
}

void SingleUserRetrieveReply::Swap(SingleUserRetrieveReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleUserRetrieveReply::InternalSwap(SingleUserRetrieveReply* other) {
  std::swap(details_, other->details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleUserRetrieveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleUserRetrieveReply_descriptor_;
  metadata.reflection = SingleUserRetrieveReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleUserRetrieveReply

// optional .grpc.testing.SingleUserDetails details = 1;
bool SingleUserRetrieveReply::has_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SingleUserRetrieveReply::set_has_details() {
  _has_bits_[0] |= 0x00000001u;
}
void SingleUserRetrieveReply::clear_has_details() {
  _has_bits_[0] &= ~0x00000001u;
}
void SingleUserRetrieveReply::clear_details() {
  if (details_ != NULL) details_->::grpc::testing::SingleUserDetails::Clear();
  clear_has_details();
}
 const ::grpc::testing::SingleUserDetails& SingleUserRetrieveReply::details() const {
  // @@protoc_insertion_point(field_get:grpc.testing.SingleUserRetrieveReply.details)
  return details_ != NULL ? *details_ : *default_instance_->details_;
}
 ::grpc::testing::SingleUserDetails* SingleUserRetrieveReply::mutable_details() {
  set_has_details();
  if (details_ == NULL) {
    details_ = new ::grpc::testing::SingleUserDetails;
  }
  // @@protoc_insertion_point(field_mutable:grpc.testing.SingleUserRetrieveReply.details)
  return details_;
}
 ::grpc::testing::SingleUserDetails* SingleUserRetrieveReply::release_details() {
  clear_has_details();
  ::grpc::testing::SingleUserDetails* temp = details_;
  details_ = NULL;
  return temp;
}
 void SingleUserRetrieveReply::set_allocated_details(::grpc::testing::SingleUserDetails* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
  // @@protoc_insertion_point(field_set_allocated:grpc.testing.SingleUserRetrieveReply.details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AllUsersRetrieveReply::kUserDataFieldNumber;
#endif  // !_MSC_VER

AllUsersRetrieveReply::AllUsersRetrieveReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.AllUsersRetrieveReply)
}

void AllUsersRetrieveReply::InitAsDefaultInstance() {
}

AllUsersRetrieveReply::AllUsersRetrieveReply(const AllUsersRetrieveReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.AllUsersRetrieveReply)
}

void AllUsersRetrieveReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllUsersRetrieveReply::~AllUsersRetrieveReply() {
  // @@protoc_insertion_point(destructor:grpc.testing.AllUsersRetrieveReply)
  SharedDtor();
}

void AllUsersRetrieveReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllUsersRetrieveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllUsersRetrieveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllUsersRetrieveReply_descriptor_;
}

const AllUsersRetrieveReply& AllUsersRetrieveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fdata_2eproto();
  return *default_instance_;
}

AllUsersRetrieveReply* AllUsersRetrieveReply::default_instance_ = NULL;

AllUsersRetrieveReply* AllUsersRetrieveReply::New(::google::protobuf::Arena* arena) const {
  AllUsersRetrieveReply* n = new AllUsersRetrieveReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllUsersRetrieveReply::Clear() {
  user_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AllUsersRetrieveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.AllUsersRetrieveReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .grpc.testing.SingleUserDetails user_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_user_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.AllUsersRetrieveReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.AllUsersRetrieveReply)
  return false;
#undef DO_
}

void AllUsersRetrieveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.AllUsersRetrieveReply)
  // repeated .grpc.testing.SingleUserDetails user_data = 1;
  for (unsigned int i = 0, n = this->user_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.testing.AllUsersRetrieveReply)
}

::google::protobuf::uint8* AllUsersRetrieveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.AllUsersRetrieveReply)
  // repeated .grpc.testing.SingleUserDetails user_data = 1;
  for (unsigned int i = 0, n = this->user_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.AllUsersRetrieveReply)
  return target;
}

int AllUsersRetrieveReply::ByteSize() const {
  int total_size = 0;

  // repeated .grpc.testing.SingleUserDetails user_data = 1;
  total_size += 1 * this->user_data_size();
  for (int i = 0; i < this->user_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllUsersRetrieveReply::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AllUsersRetrieveReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AllUsersRetrieveReply>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllUsersRetrieveReply::MergeFrom(const AllUsersRetrieveReply& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  user_data_.MergeFrom(from.user_data_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AllUsersRetrieveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllUsersRetrieveReply::CopyFrom(const AllUsersRetrieveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllUsersRetrieveReply::IsInitialized() const {

  return true;
}

void AllUsersRetrieveReply::Swap(AllUsersRetrieveReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllUsersRetrieveReply::InternalSwap(AllUsersRetrieveReply* other) {
  user_data_.UnsafeArenaSwap(&other->user_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllUsersRetrieveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllUsersRetrieveReply_descriptor_;
  metadata.reflection = AllUsersRetrieveReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllUsersRetrieveReply

// repeated .grpc.testing.SingleUserDetails user_data = 1;
int AllUsersRetrieveReply::user_data_size() const {
  return user_data_.size();
}
void AllUsersRetrieveReply::clear_user_data() {
  user_data_.Clear();
}
 const ::grpc::testing::SingleUserDetails& AllUsersRetrieveReply::user_data(int index) const {
  // @@protoc_insertion_point(field_get:grpc.testing.AllUsersRetrieveReply.user_data)
  return user_data_.Get(index);
}
 ::grpc::testing::SingleUserDetails* AllUsersRetrieveReply::mutable_user_data(int index) {
  // @@protoc_insertion_point(field_mutable:grpc.testing.AllUsersRetrieveReply.user_data)
  return user_data_.Mutable(index);
}
 ::grpc::testing::SingleUserDetails* AllUsersRetrieveReply::add_user_data() {
  // @@protoc_insertion_point(field_add:grpc.testing.AllUsersRetrieveReply.user_data)
  return user_data_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::grpc::testing::SingleUserDetails >&
AllUsersRetrieveReply::user_data() const {
  // @@protoc_insertion_point(field_list:grpc.testing.AllUsersRetrieveReply.user_data)
  return user_data_;
}
 ::google::protobuf::RepeatedPtrField< ::grpc::testing::SingleUserDetails >*
AllUsersRetrieveReply::mutable_user_data() {
  // @@protoc_insertion_point(field_mutable_list:grpc.testing.AllUsersRetrieveReply.user_data)
  return &user_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AllUsersRetrieveRequest::AllUsersRetrieveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpc.testing.AllUsersRetrieveRequest)
}

void AllUsersRetrieveRequest::InitAsDefaultInstance() {
}

AllUsersRetrieveRequest::AllUsersRetrieveRequest(const AllUsersRetrieveRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grpc.testing.AllUsersRetrieveRequest)
}

void AllUsersRetrieveRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllUsersRetrieveRequest::~AllUsersRetrieveRequest() {
  // @@protoc_insertion_point(destructor:grpc.testing.AllUsersRetrieveRequest)
  SharedDtor();
}

void AllUsersRetrieveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllUsersRetrieveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllUsersRetrieveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllUsersRetrieveRequest_descriptor_;
}

const AllUsersRetrieveRequest& AllUsersRetrieveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fdata_2eproto();
  return *default_instance_;
}

AllUsersRetrieveRequest* AllUsersRetrieveRequest::default_instance_ = NULL;

AllUsersRetrieveRequest* AllUsersRetrieveRequest::New(::google::protobuf::Arena* arena) const {
  AllUsersRetrieveRequest* n = new AllUsersRetrieveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllUsersRetrieveRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AllUsersRetrieveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpc.testing.AllUsersRetrieveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:grpc.testing.AllUsersRetrieveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpc.testing.AllUsersRetrieveRequest)
  return false;
#undef DO_
}

void AllUsersRetrieveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpc.testing.AllUsersRetrieveRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grpc.testing.AllUsersRetrieveRequest)
}

::google::protobuf::uint8* AllUsersRetrieveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.testing.AllUsersRetrieveRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.testing.AllUsersRetrieveRequest)
  return target;
}

int AllUsersRetrieveRequest::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllUsersRetrieveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AllUsersRetrieveRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AllUsersRetrieveRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllUsersRetrieveRequest::MergeFrom(const AllUsersRetrieveRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AllUsersRetrieveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllUsersRetrieveRequest::CopyFrom(const AllUsersRetrieveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllUsersRetrieveRequest::IsInitialized() const {

  return true;
}

void AllUsersRetrieveRequest::Swap(AllUsersRetrieveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllUsersRetrieveRequest::InternalSwap(AllUsersRetrieveRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllUsersRetrieveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllUsersRetrieveRequest_descriptor_;
  metadata.reflection = AllUsersRetrieveRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllUsersRetrieveRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace testing
}  // namespace grpc

// @@protoc_insertion_point(global_scope)
