// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto2";

import "qpstest.proto";

package grpc.testing;

service UserDataTransfer {
  // Sends client info
  rpc RecordSingleClientData (SingleUserRecordRequest) returns (SingleUserRecordReply) {}

  rpc RetrieveSingleUserData (SingleUserRetrieveRequest) returns (SingleUserRetrieveReply) {}

  rpc RetrieveAllUsersData (AllUsersRetrieveRequest) returns (AllUsersRetrieveReply) {}
}

//Metrics to be stored
message Metrics {
  optional double qps = 1;
  optional double qps_per_core = 2;
  optional double perc_lat_50 = 3;
  optional double perc_lat_90 = 4;
  optional double perc_lat_95 = 5;
  optional double perc_lat_99 = 6;
  optional double perc_lat_99_point_9 = 7;
  optional double server_system_time = 8;
  optional double server_user_time = 9;
  optional double client_system_time = 10;
  optional double client_user_time = 11;
}

//Timestamped details
message DataDetails {
  optional string timestamp = 1;
  optional string test_name = 2;
  optional string sys_info = 3;
  optional Metrics metrics = 4;
  optional ClientConfig client_config = 5;
  optional ServerConfig server_config = 6;
}

//User details
message UserDetails {
  optional string id = 1;
  optional string email = 2;
  optional bool verified_email = 3;
  optional string name = 4;
  optional string given_name = 5;
  optional string family_name = 6;
  optional string link = 7;
  optional string picture = 8;
  optional string gender = 9;
  optional string locale = 10;
  optional string hd = 11;
}

//Stored to database
message SingleUserDetails {
  repeated DataDetails data_details = 1;
  optional UserDetails user_details = 2;
}

//Request for storing a single user's data
message SingleUserRecordRequest {
  optional string access_token = 1;
  optional string test_name = 2;
  optional string sys_info = 3;
  optional Metrics metrics = 4;
  optional ClientConfig client_config = 5;
  optional ServerConfig server_config = 6;
}

//Reply to request for storing single user's data
message SingleUserRecordReply {
}

//Request for retrieving single user's data
message SingleUserRetrieveRequest {
  optional string user_id = 1;
}

//Reply for request to retrieve single user's data
message SingleUserRetrieveReply {
  optional SingleUserDetails details = 1;
}

//Request for retrieving all users' data
message AllUsersRetrieveReply {
  repeated SingleUserDetails user_data = 1;
}

//Reply to request for retrieving all users' data
message AllUsersRetrieveRequest {
}